{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst path = require(\"path\");\nconst os = require(\"os\");\nconst {\n  TraceMap,\n  originalPositionFor\n} = require(\"@jridgewell/trace-mapping\");\nconst {\n  validate\n} = require(\"schema-utils\");\nconst serialize = require(\"serialize-javascript\");\nconst {\n  Worker\n} = require(\"jest-worker\");\nconst {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n} = require(\"./utils\");\nconst schema = require(\"./options.json\");\nconst {\n  minify\n} = require(\"./minify\");\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Compilation} Compilation */\n\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\n\n/** @typedef {import(\"webpack\").Asset} Asset */\n\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\n\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\n\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\n\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n\n/** @typedef {RegExp | string} Rule */\n\n/** @typedef {Rule[] | Rule} Rules */\n\n/**\n * @callback ExtractCommentsFunction\n * @param {any} astNode\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\n * @returns {boolean}\n */\n\n/**\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\n */\n\n/**\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\n */\n\n/**\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\n */\n\n/**\n * @typedef {Object} ExtractCommentsObject\n * @property {ExtractCommentsCondition} [condition]\n * @property {ExtractCommentsFilename} [filename]\n * @property {ExtractCommentsBanner} [banner]\n */\n\n/**\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\n */\n\n/**\n * @typedef {Object} MinimizedResult\n * @property {string} code\n * @property {SourceMapInput} [map]\n * @property {Array<Error | string>} [errors]\n * @property {Array<Error | string>} [warnings]\n * @property {Array<string>} [extractedComments]\n */\n\n/**\n * @typedef {{ [file: string]: string }} Input\n */\n\n/**\n * @typedef {{ [key: string]: any }} CustomOptions\n */\n\n/**\n * @template T\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\n */\n\n/**\n * @typedef {Object} PredefinedOptions\n * @property {boolean} [module]\n * @property {TerserECMA} [ecma]\n */\n\n/**\n * @template T\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\n */\n\n/**\n * @template T\n * @callback BasicMinimizerImplementation\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {MinimizerOptions<T>} minifyOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @returns {Promise<MinimizedResult>}\n */\n\n/**\n * @typedef {object} MinimizeFunctionHelpers\n * @property {() => string | undefined} [getMinimizerVersion]\n */\n\n/**\n * @template T\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\n */\n\n/**\n * @template T\n * @typedef {Object} InternalOptions\n * @property {string} name\n * @property {string} input\n * @property {SourceMapInput | undefined} inputSourceMap\n * @property {ExtractCommentsOptions | undefined} extractComments\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\n */\n\n/**\n * @template T\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\n */\n\n/**\n * @typedef {undefined | boolean | number} Parallel\n */\n\n/**\n * @typedef {Object} BasePluginOptions\n * @property {Rules} [test]\n * @property {Rules} [include]\n * @property {Rules} [exclude]\n * @property {ExtractCommentsOptions} [extractComments]\n * @property {Parallel} [parallel]\n */\n\n/**\n * @template T\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\n */\n\n/**\n * @template T\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\n */\n\n/**\n * @template [T=TerserOptions]\n */\n\nclass TerserPlugin {\n  /**\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\n   */\n  constructor(options) {\n    validate( /** @type {Schema} */\n    schema, options || {}, {\n      name: \"Terser Plugin\",\n      baseDataPath: \"options\"\n    }); // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\n\n    const {\n      minify = /** @type {MinimizerImplementation<T>} */\n      terserMinify,\n      terserOptions = /** @type {MinimizerOptions<T>} */\n      {},\n      test = /\\.[cm]?js(\\?.*)?$/i,\n      extractComments = true,\n      parallel = true,\n      include,\n      exclude\n    } = options || {};\n    /**\n     * @private\n     * @type {InternalPluginOptions<T>}\n     */\n\n    this.options = {\n      test,\n      extractComments,\n      parallel,\n      include,\n      exclude,\n      minimizer: {\n        implementation: minify,\n        options: terserOptions\n      }\n    };\n  }\n  /**\n   * @private\n   * @param {any} input\n   * @returns {boolean}\n   */\n\n  static isSourceMap(input) {\n    // All required options for `new TraceMap(...options)`\n    // https://github.com/jridgewell/trace-mapping#usage\n    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\n  }\n  /**\n   * @private\n   * @param {unknown} warning\n   * @param {string} file\n   * @returns {Error}\n   */\n\n  static buildWarning(warning, file) {\n    /**\n     * @type {Error & { hideStack: true, file: string }}\n     */\n    // @ts-ignore\n    const builtWarning = new Error(warning.toString());\n    builtWarning.name = \"Warning\";\n    builtWarning.hideStack = true;\n    builtWarning.file = file;\n    return builtWarning;\n  }\n  /**\n   * @private\n   * @param {any} error\n   * @param {string} file\n   * @param {TraceMap} [sourceMap]\n   * @param {Compilation[\"requestShortener\"]} [requestShortener]\n   * @returns {Error}\n   */\n\n  static buildError(error, file, sourceMap, requestShortener) {\n    /**\n     * @type {Error & { file?: string }}\n     */\n    let builtError;\n    if (typeof error === \"string\") {\n      builtError = new Error(`${file} from Terser plugin\\n${error}`);\n      builtError.file = file;\n      return builtError;\n    }\n    if (error.line) {\n      const original = sourceMap && originalPositionFor(sourceMap, {\n        line: error.line,\n        column: error.col\n      });\n      if (original && original.source && requestShortener) {\n        builtError = new Error(`${file} from Terser plugin\\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n        builtError.file = file;\n        return builtError;\n      }\n      builtError = new Error(`${file} from Terser plugin\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n      builtError.file = file;\n      return builtError;\n    }\n    if (error.stack) {\n      builtError = new Error(`${file} from Terser plugin\\n${typeof error.message !== \"undefined\" ? error.message : \"\"}\\n${error.stack}`);\n      builtError.file = file;\n      return builtError;\n    }\n    builtError = new Error(`${file} from Terser plugin\\n${error.message}`);\n    builtError.file = file;\n    return builtError;\n  }\n  /**\n   * @private\n   * @param {Parallel} parallel\n   * @returns {number}\n   */\n\n  static getAvailableNumberOfCores(parallel) {\n    // In some cases cpus() returns undefined\n    // https://github.com/nodejs/node/issues/19022\n    const cpus = os.cpus() || {\n      length: 1\n    };\n    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n  }\n  /**\n   * @private\n   * @param {Compiler} compiler\n   * @param {Compilation} compilation\n   * @param {Record<string, import(\"webpack\").sources.Source>} assets\n   * @param {{availableNumberOfCores: number}} optimizeOptions\n   * @returns {Promise<void>}\n   */\n\n  optimize(compiler, compilation, assets, optimizeOptions) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const cache = compilation.getCache(\"TerserWebpackPlugin\");\n      let numberOfAssets = 0;\n      const assetsForMinify = yield Promise.all(Object.keys(assets).filter(name => {\n        const {\n          info\n        } = /** @type {Asset} */\n        compilation.getAsset(name);\n        if (\n        // Skip double minimize assets from child compilation\n        info.minimized ||\n        // Skip minimizing for extracted comments assets\n        info.extractedComments) {\n          return false;\n        }\n        if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind(\n        // eslint-disable-next-line no-undefined\n        undefined, _this.options)(name)) {\n          return false;\n        }\n        return true;\n      }).map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (name) {\n          const {\n            info,\n            source\n          } = /** @type {Asset} */\n          compilation.getAsset(name);\n          const eTag = cache.getLazyHashedEtag(source);\n          const cacheItem = cache.getItemCache(name, eTag);\n          const output = yield cacheItem.getPromise();\n          if (!output) {\n            numberOfAssets += 1;\n          }\n          return {\n            name,\n            info,\n            inputSource: source,\n            output,\n            cacheItem\n          };\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      if (assetsForMinify.length === 0) {\n        return;\n      }\n      /** @type {undefined | (() => MinimizerWorker<T>)} */\n\n      let getWorker;\n      /** @type {undefined | MinimizerWorker<T>} */\n\n      let initializedWorker;\n      /** @type {undefined | number} */\n\n      let numberOfWorkers;\n      if (optimizeOptions.availableNumberOfCores > 0) {\n        // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\n        numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores); // eslint-disable-next-line consistent-return\n\n        getWorker = () => {\n          if (initializedWorker) {\n            return initializedWorker;\n          }\n          initializedWorker = /** @type {MinimizerWorker<T>} */\n          new Worker(require.resolve(\"./minify\"), {\n            numWorkers: numberOfWorkers,\n            enableWorkerThreads: true\n          }); // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\n\n          const workerStdout = initializedWorker.getStdout();\n          if (workerStdout) {\n            workerStdout.on(\"data\", chunk => process.stdout.write(chunk));\n          }\n          const workerStderr = initializedWorker.getStderr();\n          if (workerStderr) {\n            workerStderr.on(\"data\", chunk => process.stderr.write(chunk));\n          }\n          return initializedWorker;\n        };\n      }\n      const {\n        SourceMapSource,\n        ConcatSource,\n        RawSource\n      } = compiler.webpack.sources;\n      /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\n\n      /** @type {Map<string, ExtractedCommentsInfo>} */\n\n      const allExtractedComments = new Map();\n      const scheduledTasks = [];\n      for (const asset of assetsForMinify) {\n        scheduledTasks.push( /*#__PURE__*/_asyncToGenerator(function* () {\n          const {\n            name,\n            inputSource,\n            info,\n            cacheItem\n          } = asset;\n          let {\n            output\n          } = asset;\n          if (!output) {\n            let input;\n            /** @type {SourceMapInput | undefined} */\n\n            let inputSourceMap;\n            const {\n              source: sourceFromInputSource,\n              map\n            } = inputSource.sourceAndMap();\n            input = sourceFromInputSource;\n            if (map) {\n              if (!TerserPlugin.isSourceMap(map)) {\n                compilation.warnings.push( /** @type {WebpackError} */\n                new Error(`${name} contains invalid source map`));\n              } else {\n                inputSourceMap = /** @type {SourceMapInput} */\n                map;\n              }\n            }\n            if (Buffer.isBuffer(input)) {\n              input = input.toString();\n            }\n            /**\n             * @type {InternalOptions<T>}\n             */\n\n            const options = {\n              name,\n              input,\n              inputSourceMap,\n              minimizer: {\n                implementation: _this.options.minimizer.implementation,\n                // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\n                options: {\n                  ..._this.options.minimizer.options\n                }\n              },\n              extractComments: _this.options.extractComments\n            };\n            if (typeof options.minimizer.options.module === \"undefined\") {\n              if (typeof info.javascriptModule !== \"undefined\") {\n                options.minimizer.options.module = info.javascriptModule;\n              } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n                options.minimizer.options.module = true;\n              } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n                options.minimizer.options.module = false;\n              }\n            }\n            if (typeof options.minimizer.options.ecma === \"undefined\") {\n              options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\n            }\n            try {\n              output = yield getWorker ? getWorker().transform(serialize(options)) : minify(options);\n            } catch (error) {\n              const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n              compilation.errors.push( /** @type {WebpackError} */\n              TerserPlugin.buildError(error, name, hasSourceMap ? new TraceMap( /** @type {SourceMapInput} */\n              inputSourceMap) :\n              // eslint-disable-next-line no-undefined\n              undefined,\n              // eslint-disable-next-line no-undefined\n              hasSourceMap ? compilation.requestShortener : undefined));\n              return;\n            }\n            if (typeof output.code === \"undefined\") {\n              compilation.errors.push( /** @type {WebpackError} */\n              new Error(`${name} from Terser plugin\\nMinimizer doesn't return result`));\n              return;\n            }\n            if (output.warnings && output.warnings.length > 0) {\n              output.warnings = output.warnings.map(\n              /**\n               * @param {Error | string} item\n               */\n              item => TerserPlugin.buildWarning(item, name));\n            }\n            if (output.errors && output.errors.length > 0) {\n              const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n              output.errors = output.errors.map(\n              /**\n               * @param {Error | string} item\n               */\n              item => TerserPlugin.buildError(item, name, hasSourceMap ? new TraceMap( /** @type {SourceMapInput} */\n              inputSourceMap) :\n              // eslint-disable-next-line no-undefined\n              undefined,\n              // eslint-disable-next-line no-undefined\n              hasSourceMap ? compilation.requestShortener : undefined));\n            }\n            let shebang;\n            if ( /** @type {ExtractCommentsObject} */\n            _this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\n              const firstNewlinePosition = output.code.indexOf(\"\\n\");\n              shebang = output.code.substring(0, firstNewlinePosition);\n              output.code = output.code.substring(firstNewlinePosition + 1);\n            }\n            if (output.map) {\n              output.source = new SourceMapSource(output.code, name, output.map, input, /** @type {SourceMapInput} */\n              inputSourceMap, true);\n            } else {\n              output.source = new RawSource(output.code);\n            }\n            if (output.extractedComments && output.extractedComments.length > 0) {\n              const commentsFilename = /** @type {ExtractCommentsObject} */\n              _this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\n              let query = \"\";\n              let filename = name;\n              const querySplit = filename.indexOf(\"?\");\n              if (querySplit >= 0) {\n                query = filename.slice(querySplit);\n                filename = filename.slice(0, querySplit);\n              }\n              const lastSlashIndex = filename.lastIndexOf(\"/\");\n              const basename = lastSlashIndex === -1 ? filename : filename.slice(lastSlashIndex + 1);\n              const data = {\n                filename,\n                basename,\n                query\n              };\n              output.commentsFilename = compilation.getPath(commentsFilename, data);\n              let banner; // Add a banner to the original file\n\n              if ( /** @type {ExtractCommentsObject} */\n              _this.options.extractComments.banner !== false) {\n                banner = /** @type {ExtractCommentsObject} */\n                _this.options.extractComments.banner || `For license information please see ${path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\")}`;\n                if (typeof banner === \"function\") {\n                  banner = banner(output.commentsFilename);\n                }\n                if (banner) {\n                  output.source = new ConcatSource(shebang ? `${shebang}\\n` : \"\", `/*! ${banner} */\\n`, output.source);\n                }\n              }\n              const extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\n              output.extractedCommentsSource = new RawSource(`${extractedCommentsString}\\n`);\n            }\n            yield cacheItem.storePromise({\n              source: output.source,\n              errors: output.errors,\n              warnings: output.warnings,\n              commentsFilename: output.commentsFilename,\n              extractedCommentsSource: output.extractedCommentsSource\n            });\n          }\n          if (output.warnings && output.warnings.length > 0) {\n            for (const warning of output.warnings) {\n              compilation.warnings.push( /** @type {WebpackError} */\n              warning);\n            }\n          }\n          if (output.errors && output.errors.length > 0) {\n            for (const error of output.errors) {\n              compilation.errors.push( /** @type {WebpackError} */\n              error);\n            }\n          }\n          /** @type {Record<string, any>} */\n\n          const newInfo = {\n            minimized: true\n          };\n          const {\n            source,\n            extractedCommentsSource\n          } = output; // Write extracted comments to commentsFilename\n\n          if (extractedCommentsSource) {\n            const {\n              commentsFilename\n            } = output;\n            newInfo.related = {\n              license: commentsFilename\n            };\n            allExtractedComments.set(name, {\n              extractedCommentsSource,\n              commentsFilename\n            });\n          }\n          compilation.updateAsset(name, source, newInfo);\n        }));\n      }\n      const limit = getWorker && numberOfAssets > 0 ? /** @type {number} */\n      numberOfWorkers : scheduledTasks.length;\n      yield throttleAll(limit, scheduledTasks);\n      if (initializedWorker) {\n        yield initializedWorker.end();\n      }\n      /** @typedef {{ source: import(\"webpack\").sources.Source, commentsFilename: string, from: string }} ExtractedCommentsInfoWIthFrom */\n\n      yield Array.from(allExtractedComments).sort().reduce(\n      /*#__PURE__*/\n      /**\n       * @param {Promise<unknown>} previousPromise\n       * @param {[string, ExtractedCommentsInfo]} extractedComments\n       * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\n       */\n      function () {\n        var _ref3 = _asyncToGenerator(function* (previousPromise, [from, value]) {\n          const previous = /** @type {ExtractedCommentsInfoWIthFrom | undefined} **/yield previousPromise;\n          const {\n            commentsFilename,\n            extractedCommentsSource\n          } = value;\n          if (previous && previous.commentsFilename === commentsFilename) {\n            const {\n              from: previousFrom,\n              source: prevSource\n            } = previous;\n            const mergedName = `${previousFrom}|${from}`;\n            const name = `${commentsFilename}|${mergedName}`;\n            const eTag = [prevSource, extractedCommentsSource].map(item => cache.getLazyHashedEtag(item)).reduce((previousValue, currentValue) => cache.mergeEtags(previousValue, currentValue));\n            let source = yield cache.getPromise(name, eTag);\n            if (!source) {\n              source = new ConcatSource(Array.from(new Set([... /** @type {string}*/\n              prevSource.source().split(\"\\n\\n\"), ... /** @type {string}*/\n              extractedCommentsSource.source().split(\"\\n\\n\")])).join(\"\\n\\n\"));\n              yield cache.storePromise(name, eTag, source);\n            }\n            compilation.updateAsset(commentsFilename, source);\n            return {\n              source,\n              commentsFilename,\n              from: mergedName\n            };\n          }\n          const existingAsset = compilation.getAsset(commentsFilename);\n          if (existingAsset) {\n            return {\n              source: existingAsset.source,\n              commentsFilename,\n              from: commentsFilename\n            };\n          }\n          compilation.emitAsset(commentsFilename, extractedCommentsSource, {\n            extractedComments: true\n          });\n          return {\n            source: extractedCommentsSource,\n            commentsFilename,\n            from\n          };\n        });\n        return function (_x2, _x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }(), /** @type {Promise<unknown>} */\n      Promise.resolve());\n    })();\n  }\n  /**\n   * @private\n   * @param {any} environment\n   * @returns {TerserECMA}\n   */\n\n  static getEcmaVersion(environment) {\n    // ES 6th\n    if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n      return 2015;\n    } // ES 11th\n\n    if (environment.bigIntLiteral || environment.dynamicImport) {\n      return 2020;\n    }\n    return 5;\n  }\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n\n  apply(compiler) {\n    const pluginName = this.constructor.name;\n    const availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\n    compiler.hooks.compilation.tap(pluginName, compilation => {\n      const hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n      const data = serialize({\n        minimizer: typeof this.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? this.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\n        options: this.options.minimizer.options\n      });\n      hooks.chunkHash.tap(pluginName, (chunk, hash) => {\n        hash.update(\"TerserPlugin\");\n        hash.update(data);\n      });\n      compilation.hooks.processAssets.tapPromise({\n        name: pluginName,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n        additionalAssets: true\n      }, assets => this.optimize(compiler, compilation, assets, {\n        availableNumberOfCores\n      }));\n      compilation.hooks.statsPrinter.tap(pluginName, stats => {\n        stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", (minimized, {\n          green,\n          formatFlag\n        }) => minimized ? /** @type {Function} */\n        green( /** @type {Function} */\n        formatFlag(\"minimized\")) : \"\");\n      });\n    });\n  }\n}\nTerserPlugin.terserMinify = terserMinify;\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\nTerserPlugin.swcMinify = swcMinify;\nTerserPlugin.esbuildMinify = esbuildMinify;\nmodule.exports = TerserPlugin;","map":{"version":3,"names":["path","require","os","TraceMap","originalPositionFor","validate","serialize","Worker","throttleAll","terserMinify","uglifyJsMinify","swcMinify","esbuildMinify","schema","minify","TerserPlugin","constructor","options","name","baseDataPath","terserOptions","test","extractComments","parallel","include","exclude","minimizer","implementation","isSourceMap","input","Boolean","version","sources","Array","isArray","mappings","buildWarning","warning","file","builtWarning","Error","toString","hideStack","buildError","error","sourceMap","requestShortener","builtError","line","original","column","col","source","message","shorten","stack","split","slice","join","getAvailableNumberOfCores","cpus","length","Math","min","Number","optimize","compiler","compilation","assets","optimizeOptions","cache","getCache","numberOfAssets","assetsForMinify","Promise","all","Object","keys","filter","info","getAsset","minimized","extractedComments","webpack","ModuleFilenameHelpers","matchObject","bind","undefined","map","eTag","getLazyHashedEtag","cacheItem","getItemCache","output","getPromise","inputSource","getWorker","initializedWorker","numberOfWorkers","availableNumberOfCores","resolve","numWorkers","enableWorkerThreads","workerStdout","getStdout","on","chunk","process","stdout","write","workerStderr","getStderr","stderr","SourceMapSource","ConcatSource","RawSource","allExtractedComments","Map","scheduledTasks","asset","push","inputSourceMap","sourceFromInputSource","sourceAndMap","warnings","Buffer","isBuffer","module","javascriptModule","ecma","getEcmaVersion","environment","transform","hasSourceMap","errors","code","item","shebang","banner","startsWith","firstNewlinePosition","indexOf","substring","commentsFilename","filename","query","querySplit","lastSlashIndex","lastIndexOf","basename","data","getPath","relative","dirname","replace","extractedCommentsString","sort","extractedCommentsSource","storePromise","newInfo","related","license","set","updateAsset","limit","end","from","reduce","previousPromise","value","previous","previousFrom","prevSource","mergedName","previousValue","currentValue","mergeEtags","Set","existingAsset","emitAsset","arrowFunction","const","destructuring","forOf","bigIntLiteral","dynamicImport","apply","pluginName","hooks","tap","javascript","JavascriptModulesPlugin","getCompilationHooks","getMinimizerVersion","chunkHash","hash","update","processAssets","tapPromise","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE","additionalAssets","statsPrinter","stats","print","for","green","formatFlag","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/terser-webpack-plugin/dist/index.js"],"sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\n\nconst os = require(\"os\");\n\nconst {\n  TraceMap,\n  originalPositionFor\n} = require(\"@jridgewell/trace-mapping\");\n\nconst {\n  validate\n} = require(\"schema-utils\");\n\nconst serialize = require(\"serialize-javascript\");\n\nconst {\n  Worker\n} = require(\"jest-worker\");\n\nconst {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n} = require(\"./utils\");\n\nconst schema = require(\"./options.json\");\n\nconst {\n  minify\n} = require(\"./minify\");\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Compilation} Compilation */\n\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\n\n/** @typedef {import(\"webpack\").Asset} Asset */\n\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\n\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\n\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\n\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n\n/** @typedef {RegExp | string} Rule */\n\n/** @typedef {Rule[] | Rule} Rules */\n\n/**\n * @callback ExtractCommentsFunction\n * @param {any} astNode\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\n * @returns {boolean}\n */\n\n/**\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\n */\n\n/**\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\n */\n\n/**\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\n */\n\n/**\n * @typedef {Object} ExtractCommentsObject\n * @property {ExtractCommentsCondition} [condition]\n * @property {ExtractCommentsFilename} [filename]\n * @property {ExtractCommentsBanner} [banner]\n */\n\n/**\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\n */\n\n/**\n * @typedef {Object} MinimizedResult\n * @property {string} code\n * @property {SourceMapInput} [map]\n * @property {Array<Error | string>} [errors]\n * @property {Array<Error | string>} [warnings]\n * @property {Array<string>} [extractedComments]\n */\n\n/**\n * @typedef {{ [file: string]: string }} Input\n */\n\n/**\n * @typedef {{ [key: string]: any }} CustomOptions\n */\n\n/**\n * @template T\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\n */\n\n/**\n * @typedef {Object} PredefinedOptions\n * @property {boolean} [module]\n * @property {TerserECMA} [ecma]\n */\n\n/**\n * @template T\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\n */\n\n/**\n * @template T\n * @callback BasicMinimizerImplementation\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {MinimizerOptions<T>} minifyOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @returns {Promise<MinimizedResult>}\n */\n\n/**\n * @typedef {object} MinimizeFunctionHelpers\n * @property {() => string | undefined} [getMinimizerVersion]\n */\n\n/**\n * @template T\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\n */\n\n/**\n * @template T\n * @typedef {Object} InternalOptions\n * @property {string} name\n * @property {string} input\n * @property {SourceMapInput | undefined} inputSourceMap\n * @property {ExtractCommentsOptions | undefined} extractComments\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\n */\n\n/**\n * @template T\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\n */\n\n/**\n * @typedef {undefined | boolean | number} Parallel\n */\n\n/**\n * @typedef {Object} BasePluginOptions\n * @property {Rules} [test]\n * @property {Rules} [include]\n * @property {Rules} [exclude]\n * @property {ExtractCommentsOptions} [extractComments]\n * @property {Parallel} [parallel]\n */\n\n/**\n * @template T\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\n */\n\n/**\n * @template T\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\n */\n\n/**\n * @template [T=TerserOptions]\n */\n\n\nclass TerserPlugin {\n  /**\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\n   */\n  constructor(options) {\n    validate(\n    /** @type {Schema} */\n    schema, options || {}, {\n      name: \"Terser Plugin\",\n      baseDataPath: \"options\"\n    }); // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\n\n    const {\n      minify =\n      /** @type {MinimizerImplementation<T>} */\n      terserMinify,\n      terserOptions =\n      /** @type {MinimizerOptions<T>} */\n      {},\n      test = /\\.[cm]?js(\\?.*)?$/i,\n      extractComments = true,\n      parallel = true,\n      include,\n      exclude\n    } = options || {};\n    /**\n     * @private\n     * @type {InternalPluginOptions<T>}\n     */\n\n    this.options = {\n      test,\n      extractComments,\n      parallel,\n      include,\n      exclude,\n      minimizer: {\n        implementation: minify,\n        options: terserOptions\n      }\n    };\n  }\n  /**\n   * @private\n   * @param {any} input\n   * @returns {boolean}\n   */\n\n\n  static isSourceMap(input) {\n    // All required options for `new TraceMap(...options)`\n    // https://github.com/jridgewell/trace-mapping#usage\n    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\n  }\n  /**\n   * @private\n   * @param {unknown} warning\n   * @param {string} file\n   * @returns {Error}\n   */\n\n\n  static buildWarning(warning, file) {\n    /**\n     * @type {Error & { hideStack: true, file: string }}\n     */\n    // @ts-ignore\n    const builtWarning = new Error(warning.toString());\n    builtWarning.name = \"Warning\";\n    builtWarning.hideStack = true;\n    builtWarning.file = file;\n    return builtWarning;\n  }\n  /**\n   * @private\n   * @param {any} error\n   * @param {string} file\n   * @param {TraceMap} [sourceMap]\n   * @param {Compilation[\"requestShortener\"]} [requestShortener]\n   * @returns {Error}\n   */\n\n\n  static buildError(error, file, sourceMap, requestShortener) {\n    /**\n     * @type {Error & { file?: string }}\n     */\n    let builtError;\n\n    if (typeof error === \"string\") {\n      builtError = new Error(`${file} from Terser plugin\\n${error}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.line) {\n      const original = sourceMap && originalPositionFor(sourceMap, {\n        line: error.line,\n        column: error.col\n      });\n\n      if (original && original.source && requestShortener) {\n        builtError = new Error(`${file} from Terser plugin\\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n        builtError.file = file;\n        return builtError;\n      }\n\n      builtError = new Error(`${file} from Terser plugin\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.stack) {\n      builtError = new Error(`${file} from Terser plugin\\n${typeof error.message !== \"undefined\" ? error.message : \"\"}\\n${error.stack}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    builtError = new Error(`${file} from Terser plugin\\n${error.message}`);\n    builtError.file = file;\n    return builtError;\n  }\n  /**\n   * @private\n   * @param {Parallel} parallel\n   * @returns {number}\n   */\n\n\n  static getAvailableNumberOfCores(parallel) {\n    // In some cases cpus() returns undefined\n    // https://github.com/nodejs/node/issues/19022\n    const cpus = os.cpus() || {\n      length: 1\n    };\n    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n  }\n  /**\n   * @private\n   * @param {Compiler} compiler\n   * @param {Compilation} compilation\n   * @param {Record<string, import(\"webpack\").sources.Source>} assets\n   * @param {{availableNumberOfCores: number}} optimizeOptions\n   * @returns {Promise<void>}\n   */\n\n\n  async optimize(compiler, compilation, assets, optimizeOptions) {\n    const cache = compilation.getCache(\"TerserWebpackPlugin\");\n    let numberOfAssets = 0;\n    const assetsForMinify = await Promise.all(Object.keys(assets).filter(name => {\n      const {\n        info\n      } =\n      /** @type {Asset} */\n      compilation.getAsset(name);\n\n      if ( // Skip double minimize assets from child compilation\n      info.minimized || // Skip minimizing for extracted comments assets\n      info.extractedComments) {\n        return false;\n      }\n\n      if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined\n      undefined, this.options)(name)) {\n        return false;\n      }\n\n      return true;\n    }).map(async name => {\n      const {\n        info,\n        source\n      } =\n      /** @type {Asset} */\n      compilation.getAsset(name);\n      const eTag = cache.getLazyHashedEtag(source);\n      const cacheItem = cache.getItemCache(name, eTag);\n      const output = await cacheItem.getPromise();\n\n      if (!output) {\n        numberOfAssets += 1;\n      }\n\n      return {\n        name,\n        info,\n        inputSource: source,\n        output,\n        cacheItem\n      };\n    }));\n\n    if (assetsForMinify.length === 0) {\n      return;\n    }\n    /** @type {undefined | (() => MinimizerWorker<T>)} */\n\n\n    let getWorker;\n    /** @type {undefined | MinimizerWorker<T>} */\n\n    let initializedWorker;\n    /** @type {undefined | number} */\n\n    let numberOfWorkers;\n\n    if (optimizeOptions.availableNumberOfCores > 0) {\n      // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\n      numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores); // eslint-disable-next-line consistent-return\n\n      getWorker = () => {\n        if (initializedWorker) {\n          return initializedWorker;\n        }\n\n        initializedWorker =\n        /** @type {MinimizerWorker<T>} */\n        new Worker(require.resolve(\"./minify\"), {\n          numWorkers: numberOfWorkers,\n          enableWorkerThreads: true\n        }); // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\n\n        const workerStdout = initializedWorker.getStdout();\n\n        if (workerStdout) {\n          workerStdout.on(\"data\", chunk => process.stdout.write(chunk));\n        }\n\n        const workerStderr = initializedWorker.getStderr();\n\n        if (workerStderr) {\n          workerStderr.on(\"data\", chunk => process.stderr.write(chunk));\n        }\n\n        return initializedWorker;\n      };\n    }\n\n    const {\n      SourceMapSource,\n      ConcatSource,\n      RawSource\n    } = compiler.webpack.sources;\n    /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\n\n    /** @type {Map<string, ExtractedCommentsInfo>} */\n\n    const allExtractedComments = new Map();\n    const scheduledTasks = [];\n\n    for (const asset of assetsForMinify) {\n      scheduledTasks.push(async () => {\n        const {\n          name,\n          inputSource,\n          info,\n          cacheItem\n        } = asset;\n        let {\n          output\n        } = asset;\n\n        if (!output) {\n          let input;\n          /** @type {SourceMapInput | undefined} */\n\n          let inputSourceMap;\n          const {\n            source: sourceFromInputSource,\n            map\n          } = inputSource.sourceAndMap();\n          input = sourceFromInputSource;\n\n          if (map) {\n            if (!TerserPlugin.isSourceMap(map)) {\n              compilation.warnings.push(\n              /** @type {WebpackError} */\n              new Error(`${name} contains invalid source map`));\n            } else {\n              inputSourceMap =\n              /** @type {SourceMapInput} */\n              map;\n            }\n          }\n\n          if (Buffer.isBuffer(input)) {\n            input = input.toString();\n          }\n          /**\n           * @type {InternalOptions<T>}\n           */\n\n\n          const options = {\n            name,\n            input,\n            inputSourceMap,\n            minimizer: {\n              implementation: this.options.minimizer.implementation,\n              // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\n              options: { ...this.options.minimizer.options\n              }\n            },\n            extractComments: this.options.extractComments\n          };\n\n          if (typeof options.minimizer.options.module === \"undefined\") {\n            if (typeof info.javascriptModule !== \"undefined\") {\n              options.minimizer.options.module = info.javascriptModule;\n            } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = true;\n            } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = false;\n            }\n          }\n\n          if (typeof options.minimizer.options.ecma === \"undefined\") {\n            options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\n          }\n\n          try {\n            output = await (getWorker ? getWorker().transform(serialize(options)) : minify(options));\n          } catch (error) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            TerserPlugin.buildError(error, name, hasSourceMap ? new TraceMap(\n            /** @type {SourceMapInput} */\n            inputSourceMap) : // eslint-disable-next-line no-undefined\n            undefined, // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n            return;\n          }\n\n          if (typeof output.code === \"undefined\") {\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            new Error(`${name} from Terser plugin\\nMinimizer doesn't return result`));\n            return;\n          }\n\n          if (output.warnings && output.warnings.length > 0) {\n            output.warnings = output.warnings.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildWarning(item, name));\n          }\n\n          if (output.errors && output.errors.length > 0) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            output.errors = output.errors.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildError(item, name, hasSourceMap ? new TraceMap(\n            /** @type {SourceMapInput} */\n            inputSourceMap) : // eslint-disable-next-line no-undefined\n            undefined, // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n          }\n\n          let shebang;\n\n          if (\n          /** @type {ExtractCommentsObject} */\n          this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\n            const firstNewlinePosition = output.code.indexOf(\"\\n\");\n            shebang = output.code.substring(0, firstNewlinePosition);\n            output.code = output.code.substring(firstNewlinePosition + 1);\n          }\n\n          if (output.map) {\n            output.source = new SourceMapSource(output.code, name, output.map, input,\n            /** @type {SourceMapInput} */\n            inputSourceMap, true);\n          } else {\n            output.source = new RawSource(output.code);\n          }\n\n          if (output.extractedComments && output.extractedComments.length > 0) {\n            const commentsFilename =\n            /** @type {ExtractCommentsObject} */\n            this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\n            let query = \"\";\n            let filename = name;\n            const querySplit = filename.indexOf(\"?\");\n\n            if (querySplit >= 0) {\n              query = filename.slice(querySplit);\n              filename = filename.slice(0, querySplit);\n            }\n\n            const lastSlashIndex = filename.lastIndexOf(\"/\");\n            const basename = lastSlashIndex === -1 ? filename : filename.slice(lastSlashIndex + 1);\n            const data = {\n              filename,\n              basename,\n              query\n            };\n            output.commentsFilename = compilation.getPath(commentsFilename, data);\n            let banner; // Add a banner to the original file\n\n            if (\n            /** @type {ExtractCommentsObject} */\n            this.options.extractComments.banner !== false) {\n              banner =\n              /** @type {ExtractCommentsObject} */\n              this.options.extractComments.banner || `For license information please see ${path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\")}`;\n\n              if (typeof banner === \"function\") {\n                banner = banner(output.commentsFilename);\n              }\n\n              if (banner) {\n                output.source = new ConcatSource(shebang ? `${shebang}\\n` : \"\", `/*! ${banner} */\\n`, output.source);\n              }\n            }\n\n            const extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\n            output.extractedCommentsSource = new RawSource(`${extractedCommentsString}\\n`);\n          }\n\n          await cacheItem.storePromise({\n            source: output.source,\n            errors: output.errors,\n            warnings: output.warnings,\n            commentsFilename: output.commentsFilename,\n            extractedCommentsSource: output.extractedCommentsSource\n          });\n        }\n\n        if (output.warnings && output.warnings.length > 0) {\n          for (const warning of output.warnings) {\n            compilation.warnings.push(\n            /** @type {WebpackError} */\n            warning);\n          }\n        }\n\n        if (output.errors && output.errors.length > 0) {\n          for (const error of output.errors) {\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            error);\n          }\n        }\n        /** @type {Record<string, any>} */\n\n\n        const newInfo = {\n          minimized: true\n        };\n        const {\n          source,\n          extractedCommentsSource\n        } = output; // Write extracted comments to commentsFilename\n\n        if (extractedCommentsSource) {\n          const {\n            commentsFilename\n          } = output;\n          newInfo.related = {\n            license: commentsFilename\n          };\n          allExtractedComments.set(name, {\n            extractedCommentsSource,\n            commentsFilename\n          });\n        }\n\n        compilation.updateAsset(name, source, newInfo);\n      });\n    }\n\n    const limit = getWorker && numberOfAssets > 0 ?\n    /** @type {number} */\n    numberOfWorkers : scheduledTasks.length;\n    await throttleAll(limit, scheduledTasks);\n\n    if (initializedWorker) {\n      await initializedWorker.end();\n    }\n    /** @typedef {{ source: import(\"webpack\").sources.Source, commentsFilename: string, from: string }} ExtractedCommentsInfoWIthFrom */\n\n\n    await Array.from(allExtractedComments).sort().reduce(\n    /**\n     * @param {Promise<unknown>} previousPromise\n     * @param {[string, ExtractedCommentsInfo]} extractedComments\n     * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\n     */\n    async (previousPromise, [from, value]) => {\n      const previous =\n      /** @type {ExtractedCommentsInfoWIthFrom | undefined} **/\n      await previousPromise;\n      const {\n        commentsFilename,\n        extractedCommentsSource\n      } = value;\n\n      if (previous && previous.commentsFilename === commentsFilename) {\n        const {\n          from: previousFrom,\n          source: prevSource\n        } = previous;\n        const mergedName = `${previousFrom}|${from}`;\n        const name = `${commentsFilename}|${mergedName}`;\n        const eTag = [prevSource, extractedCommentsSource].map(item => cache.getLazyHashedEtag(item)).reduce((previousValue, currentValue) => cache.mergeEtags(previousValue, currentValue));\n        let source = await cache.getPromise(name, eTag);\n\n        if (!source) {\n          source = new ConcatSource(Array.from(new Set([...\n          /** @type {string}*/\n          prevSource.source().split(\"\\n\\n\"), ...\n          /** @type {string}*/\n          extractedCommentsSource.source().split(\"\\n\\n\")])).join(\"\\n\\n\"));\n          await cache.storePromise(name, eTag, source);\n        }\n\n        compilation.updateAsset(commentsFilename, source);\n        return {\n          source,\n          commentsFilename,\n          from: mergedName\n        };\n      }\n\n      const existingAsset = compilation.getAsset(commentsFilename);\n\n      if (existingAsset) {\n        return {\n          source: existingAsset.source,\n          commentsFilename,\n          from: commentsFilename\n        };\n      }\n\n      compilation.emitAsset(commentsFilename, extractedCommentsSource, {\n        extractedComments: true\n      });\n      return {\n        source: extractedCommentsSource,\n        commentsFilename,\n        from\n      };\n    },\n    /** @type {Promise<unknown>} */\n    Promise.resolve());\n  }\n  /**\n   * @private\n   * @param {any} environment\n   * @returns {TerserECMA}\n   */\n\n\n  static getEcmaVersion(environment) {\n    // ES 6th\n    if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n      return 2015;\n    } // ES 11th\n\n\n    if (environment.bigIntLiteral || environment.dynamicImport) {\n      return 2020;\n    }\n\n    return 5;\n  }\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const pluginName = this.constructor.name;\n    const availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\n    compiler.hooks.compilation.tap(pluginName, compilation => {\n      const hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n      const data = serialize({\n        minimizer: typeof this.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? this.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\n        options: this.options.minimizer.options\n      });\n      hooks.chunkHash.tap(pluginName, (chunk, hash) => {\n        hash.update(\"TerserPlugin\");\n        hash.update(data);\n      });\n      compilation.hooks.processAssets.tapPromise({\n        name: pluginName,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n        additionalAssets: true\n      }, assets => this.optimize(compiler, compilation, assets, {\n        availableNumberOfCores\n      }));\n      compilation.hooks.statsPrinter.tap(pluginName, stats => {\n        stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", (minimized, {\n          green,\n          formatFlag\n        }) => minimized ?\n        /** @type {Function} */\n        green(\n        /** @type {Function} */\n        formatFlag(\"minimized\")) : \"\");\n      });\n    });\n  }\n\n}\n\nTerserPlugin.terserMinify = terserMinify;\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\nTerserPlugin.swcMinify = swcMinify;\nTerserPlugin.esbuildMinify = esbuildMinify;\nmodule.exports = TerserPlugin;"],"mappings":"AAAA,YAAY;;AAAC;AAEb,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AAExB,MAAM;EACJE,QAAQ;EACRC;AACF,CAAC,GAAGH,OAAO,CAAC,2BAA2B,CAAC;AAExC,MAAM;EACJI;AACF,CAAC,GAAGJ,OAAO,CAAC,cAAc,CAAC;AAE3B,MAAMK,SAAS,GAAGL,OAAO,CAAC,sBAAsB,CAAC;AAEjD,MAAM;EACJM;AACF,CAAC,GAAGN,OAAO,CAAC,aAAa,CAAC;AAE1B,MAAM;EACJO,WAAW;EACXC,YAAY;EACZC,cAAc;EACdC,SAAS;EACTC;AACF,CAAC,GAAGX,OAAO,CAAC,SAAS,CAAC;AAEtB,MAAMY,MAAM,GAAGZ,OAAO,CAAC,gBAAgB,CAAC;AAExC,MAAM;EACJa;AACF,CAAC,GAAGb,OAAO,CAAC,UAAU,CAAC;AACvc,YAAY,CAAC;EACjB;AACF;AACA;EACEC,WAAW,CAACC,OAAO,EAAE;IACnBZ,QAAQ,EACR;IACAQ,MAAM,EAAEI,OAAO,IAAI,CAAC,CAAC,EAAE;MACrBC,IAAI,EAAE,eAAe;MACrBC,YAAY,EAAE;IAChB,CAAC,CAAC,CAAC,CAAC;;IAEJ,MAAM;MACJL,MAAM,GACN;MACAL,YAAY;MACZW,aAAa,GACb;MACA,CAAC,CAAC;MACFC,IAAI,GAAG,oBAAoB;MAC3BC,eAAe,GAAG,IAAI;MACtBC,QAAQ,GAAG,IAAI;MACfC,OAAO;MACPC;IACF,CAAC,GAAGR,OAAO,IAAI,CAAC,CAAC;IACjB;AACJ;AACA;AACA;;IAEI,IAAI,CAACA,OAAO,GAAG;MACbI,IAAI;MACJC,eAAe;MACfC,QAAQ;MACRC,OAAO;MACPC,OAAO;MACPC,SAAS,EAAE;QACTC,cAAc,EAAEb,MAAM;QACtBG,OAAO,EAAEG;MACX;IACF,CAAC;EACH;EACA;AACF;AACA;AACA;AACA;;EAGE,OAAOQ,WAAW,CAACC,KAAK,EAAE;IACxB;IACA;IACA,OAAOC,OAAO,CAACD,KAAK,IAAIA,KAAK,CAACE,OAAO,IAAIF,KAAK,CAACG,OAAO,IAAIC,KAAK,CAACC,OAAO,CAACL,KAAK,CAACG,OAAO,CAAC,IAAI,OAAOH,KAAK,CAACM,QAAQ,KAAK,QAAQ,CAAC;EAC/H;EACA;AACF;AACA;AACA;AACA;AACA;;EAGE,OAAOC,YAAY,CAACC,OAAO,EAAEC,IAAI,EAAE;IACjC;AACJ;AACA;IACI;IACA,MAAMC,YAAY,GAAG,IAAIC,KAAK,CAACH,OAAO,CAACI,QAAQ,EAAE,CAAC;IAClDF,YAAY,CAACrB,IAAI,GAAG,SAAS;IAC7BqB,YAAY,CAACG,SAAS,GAAG,IAAI;IAC7BH,YAAY,CAACD,IAAI,GAAGA,IAAI;IACxB,OAAOC,YAAY;EACrB;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE,OAAOI,UAAU,CAACC,KAAK,EAAEN,IAAI,EAAEO,SAAS,EAAEC,gBAAgB,EAAE;IAC1D;AACJ;AACA;IACI,IAAIC,UAAU;IAEd,IAAI,OAAOH,KAAK,KAAK,QAAQ,EAAE;MAC7BG,UAAU,GAAG,IAAIP,KAAK,CAAE,GAAEF,IAAK,wBAAuBM,KAAM,EAAC,CAAC;MAC9DG,UAAU,CAACT,IAAI,GAAGA,IAAI;MACtB,OAAOS,UAAU;IACnB;IAEA,IAAIH,KAAK,CAACI,IAAI,EAAE;MACd,MAAMC,QAAQ,GAAGJ,SAAS,IAAIzC,mBAAmB,CAACyC,SAAS,EAAE;QAC3DG,IAAI,EAAEJ,KAAK,CAACI,IAAI;QAChBE,MAAM,EAAEN,KAAK,CAACO;MAChB,CAAC,CAAC;MAEF,IAAIF,QAAQ,IAAIA,QAAQ,CAACG,MAAM,IAAIN,gBAAgB,EAAE;QACnDC,UAAU,GAAG,IAAIP,KAAK,CAAE,GAAEF,IAAK,wBAAuBM,KAAK,CAACS,OAAQ,KAAIP,gBAAgB,CAACQ,OAAO,CAACL,QAAQ,CAACG,MAAM,CAAE,IAAGH,QAAQ,CAACD,IAAK,IAAGC,QAAQ,CAACC,MAAO,KAAIZ,IAAK,IAAGM,KAAK,CAACI,IAAK,IAAGJ,KAAK,CAACO,GAAI,IAAGP,KAAK,CAACW,KAAK,GAAI,KAAIX,KAAK,CAACW,KAAK,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAE,EAAC,GAAG,EAAG,EAAC,CAAC;QACrQX,UAAU,CAACT,IAAI,GAAGA,IAAI;QACtB,OAAOS,UAAU;MACnB;MAEAA,UAAU,GAAG,IAAIP,KAAK,CAAE,GAAEF,IAAK,wBAAuBM,KAAK,CAACS,OAAQ,KAAIf,IAAK,IAAGM,KAAK,CAACI,IAAK,IAAGJ,KAAK,CAACO,GAAI,IAAGP,KAAK,CAACW,KAAK,GAAI,KAAIX,KAAK,CAACW,KAAK,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAE,EAAC,GAAG,EAAG,EAAC,CAAC;MACnLX,UAAU,CAACT,IAAI,GAAGA,IAAI;MACtB,OAAOS,UAAU;IACnB;IAEA,IAAIH,KAAK,CAACW,KAAK,EAAE;MACfR,UAAU,GAAG,IAAIP,KAAK,CAAE,GAAEF,IAAK,wBAAuB,OAAOM,KAAK,CAACS,OAAO,KAAK,WAAW,GAAGT,KAAK,CAACS,OAAO,GAAG,EAAG,KAAIT,KAAK,CAACW,KAAM,EAAC,CAAC;MAClIR,UAAU,CAACT,IAAI,GAAGA,IAAI;MACtB,OAAOS,UAAU;IACnB;IAEAA,UAAU,GAAG,IAAIP,KAAK,CAAE,GAAEF,IAAK,wBAAuBM,KAAK,CAACS,OAAQ,EAAC,CAAC;IACtEN,UAAU,CAACT,IAAI,GAAGA,IAAI;IACtB,OAAOS,UAAU;EACnB;EACA;AACF;AACA;AACA;AACA;;EAGE,OAAOY,yBAAyB,CAACpC,QAAQ,EAAE;IACzC;IACA;IACA,MAAMqC,IAAI,GAAG1D,EAAE,CAAC0D,IAAI,EAAE,IAAI;MACxBC,MAAM,EAAE;IACV,CAAC;IACD,OAAOtC,QAAQ,KAAK,IAAI,GAAGqC,IAAI,CAACC,MAAM,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACC,MAAM,CAACzC,QAAQ,CAAC,IAAI,CAAC,EAAEqC,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;EAC/F;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAGQI,QAAQ,CAACC,QAAQ,EAAEC,WAAW,EAAEC,MAAM,EAAEC,eAAe,EAAE;IAAA;IAAA;MAC7D,MAAMC,KAAK,GAAGH,WAAW,CAACI,QAAQ,CAAC,qBAAqB,CAAC;MACzD,IAAIC,cAAc,GAAG,CAAC;MACtB,MAAMC,eAAe,SAASC,OAAO,CAACC,GAAG,CAACC,MAAM,CAACC,IAAI,CAACT,MAAM,CAAC,CAACU,MAAM,CAAC5D,IAAI,IAAI;QAC3E,MAAM;UACJ6D;QACF,CAAC,GACD;QACAZ,WAAW,CAACa,QAAQ,CAAC9D,IAAI,CAAC;QAE1B;QAAK;QACL6D,IAAI,CAACE,SAAS;QAAI;QAClBF,IAAI,CAACG,iBAAiB,EAAE;UACtB,OAAO,KAAK;QACd;QAEA,IAAI,CAAChB,QAAQ,CAACiB,OAAO,CAACC,qBAAqB,CAACC,WAAW,CAACC,IAAI;QAAE;QAC9DC,SAAS,EAAE,KAAI,CAACtE,OAAO,CAAC,CAACC,IAAI,CAAC,EAAE;UAC9B,OAAO,KAAK;QACd;QAEA,OAAO,IAAI;MACb,CAAC,CAAC,CAACsE,GAAG;QAAA,6BAAC,WAAMtE,IAAI,EAAI;UACnB,MAAM;YACJ6D,IAAI;YACJ3B;UACF,CAAC,GACD;UACAe,WAAW,CAACa,QAAQ,CAAC9D,IAAI,CAAC;UAC1B,MAAMuE,IAAI,GAAGnB,KAAK,CAACoB,iBAAiB,CAACtC,MAAM,CAAC;UAC5C,MAAMuC,SAAS,GAAGrB,KAAK,CAACsB,YAAY,CAAC1E,IAAI,EAAEuE,IAAI,CAAC;UAChD,MAAMI,MAAM,SAASF,SAAS,CAACG,UAAU,EAAE;UAE3C,IAAI,CAACD,MAAM,EAAE;YACXrB,cAAc,IAAI,CAAC;UACrB;UAEA,OAAO;YACLtD,IAAI;YACJ6D,IAAI;YACJgB,WAAW,EAAE3C,MAAM;YACnByC,MAAM;YACNF;UACF,CAAC;QACH,CAAC;QAAA;UAAA;QAAA;MAAA,IAAC,CAAC;MAEH,IAAIlB,eAAe,CAACZ,MAAM,KAAK,CAAC,EAAE;QAChC;MACF;MACA;;MAGA,IAAImC,SAAS;MACb;;MAEA,IAAIC,iBAAiB;MACrB;;MAEA,IAAIC,eAAe;MAEnB,IAAI7B,eAAe,CAAC8B,sBAAsB,GAAG,CAAC,EAAE;QAC9C;QACAD,eAAe,GAAGpC,IAAI,CAACC,GAAG,CAACS,cAAc,EAAEH,eAAe,CAAC8B,sBAAsB,CAAC,CAAC,CAAC;;QAEpFH,SAAS,GAAG,MAAM;UAChB,IAAIC,iBAAiB,EAAE;YACrB,OAAOA,iBAAiB;UAC1B;UAEAA,iBAAiB,GACjB;UACA,IAAI1F,MAAM,CAACN,OAAO,CAACmG,OAAO,CAAC,UAAU,CAAC,EAAE;YACtCC,UAAU,EAAEH,eAAe;YAC3BI,mBAAmB,EAAE;UACvB,CAAC,CAAC,CAAC,CAAC;;UAEJ,MAAMC,YAAY,GAAGN,iBAAiB,CAACO,SAAS,EAAE;UAElD,IAAID,YAAY,EAAE;YAChBA,YAAY,CAACE,EAAE,CAAC,MAAM,EAAEC,KAAK,IAAIC,OAAO,CAACC,MAAM,CAACC,KAAK,CAACH,KAAK,CAAC,CAAC;UAC/D;UAEA,MAAMI,YAAY,GAAGb,iBAAiB,CAACc,SAAS,EAAE;UAElD,IAAID,YAAY,EAAE;YAChBA,YAAY,CAACL,EAAE,CAAC,MAAM,EAAEC,KAAK,IAAIC,OAAO,CAACK,MAAM,CAACH,KAAK,CAACH,KAAK,CAAC,CAAC;UAC/D;UAEA,OAAOT,iBAAiB;QAC1B,CAAC;MACH;MAEA,MAAM;QACJgB,eAAe;QACfC,YAAY;QACZC;MACF,CAAC,GAAGjD,QAAQ,CAACiB,OAAO,CAACnD,OAAO;MAC5B;;MAEA;;MAEA,MAAMoF,oBAAoB,GAAG,IAAIC,GAAG,EAAE;MACtC,MAAMC,cAAc,GAAG,EAAE;MAEzB,KAAK,MAAMC,KAAK,IAAI9C,eAAe,EAAE;QACnC6C,cAAc,CAACE,IAAI,iCAAC,aAAY;UAC9B,MAAM;YACJtG,IAAI;YACJ6E,WAAW;YACXhB,IAAI;YACJY;UACF,CAAC,GAAG4B,KAAK;UACT,IAAI;YACF1B;UACF,CAAC,GAAG0B,KAAK;UAET,IAAI,CAAC1B,MAAM,EAAE;YACX,IAAIhE,KAAK;YACT;;YAEA,IAAI4F,cAAc;YAClB,MAAM;cACJrE,MAAM,EAAEsE,qBAAqB;cAC7BlC;YACF,CAAC,GAAGO,WAAW,CAAC4B,YAAY,EAAE;YAC9B9F,KAAK,GAAG6F,qBAAqB;YAE7B,IAAIlC,GAAG,EAAE;cACP,IAAI,CAACzE,YAAY,CAACa,WAAW,CAAC4D,GAAG,CAAC,EAAE;gBAClCrB,WAAW,CAACyD,QAAQ,CAACJ,IAAI,EACzB;gBACA,IAAIhF,KAAK,CAAE,GAAEtB,IAAK,8BAA6B,CAAC,CAAC;cACnD,CAAC,MAAM;gBACLuG,cAAc,GACd;gBACAjC,GAAG;cACL;YACF;YAEA,IAAIqC,MAAM,CAACC,QAAQ,CAACjG,KAAK,CAAC,EAAE;cAC1BA,KAAK,GAAGA,KAAK,CAACY,QAAQ,EAAE;YAC1B;YACA;AACV;AACA;;YAGU,MAAMxB,OAAO,GAAG;cACdC,IAAI;cACJW,KAAK;cACL4F,cAAc;cACd/F,SAAS,EAAE;gBACTC,cAAc,EAAE,KAAI,CAACV,OAAO,CAACS,SAAS,CAACC,cAAc;gBACrD;gBACAV,OAAO,EAAE;kBAAE,GAAG,KAAI,CAACA,OAAO,CAACS,SAAS,CAACT;gBACrC;cACF,CAAC;cACDK,eAAe,EAAE,KAAI,CAACL,OAAO,CAACK;YAChC,CAAC;YAED,IAAI,OAAOL,OAAO,CAACS,SAAS,CAACT,OAAO,CAAC8G,MAAM,KAAK,WAAW,EAAE;cAC3D,IAAI,OAAOhD,IAAI,CAACiD,gBAAgB,KAAK,WAAW,EAAE;gBAChD/G,OAAO,CAACS,SAAS,CAACT,OAAO,CAAC8G,MAAM,GAAGhD,IAAI,CAACiD,gBAAgB;cAC1D,CAAC,MAAM,IAAI,gBAAgB,CAAC3G,IAAI,CAACH,IAAI,CAAC,EAAE;gBACtCD,OAAO,CAACS,SAAS,CAACT,OAAO,CAAC8G,MAAM,GAAG,IAAI;cACzC,CAAC,MAAM,IAAI,gBAAgB,CAAC1G,IAAI,CAACH,IAAI,CAAC,EAAE;gBACtCD,OAAO,CAACS,SAAS,CAACT,OAAO,CAAC8G,MAAM,GAAG,KAAK;cAC1C;YACF;YAEA,IAAI,OAAO9G,OAAO,CAACS,SAAS,CAACT,OAAO,CAACgH,IAAI,KAAK,WAAW,EAAE;cACzDhH,OAAO,CAACS,SAAS,CAACT,OAAO,CAACgH,IAAI,GAAGlH,YAAY,CAACmH,cAAc,CAAChE,QAAQ,CAACjD,OAAO,CAAC4E,MAAM,CAACsC,WAAW,IAAI,CAAC,CAAC,CAAC;YACzG;YAEA,IAAI;cACFtC,MAAM,SAAUG,SAAS,GAAGA,SAAS,EAAE,CAACoC,SAAS,CAAC9H,SAAS,CAACW,OAAO,CAAC,CAAC,GAAGH,MAAM,CAACG,OAAO,CAAE;YAC1F,CAAC,CAAC,OAAO2B,KAAK,EAAE;cACd,MAAMyF,YAAY,GAAGZ,cAAc,IAAI1G,YAAY,CAACa,WAAW,CAAC6F,cAAc,CAAC;cAC/EtD,WAAW,CAACmE,MAAM,CAACd,IAAI,EACvB;cACAzG,YAAY,CAAC4B,UAAU,CAACC,KAAK,EAAE1B,IAAI,EAAEmH,YAAY,GAAG,IAAIlI,QAAQ,EAChE;cACAsH,cAAc,CAAC;cAAG;cAClBlC,SAAS;cAAE;cACX8C,YAAY,GAAGlE,WAAW,CAACrB,gBAAgB,GAAGyC,SAAS,CAAC,CAAC;cACzD;YACF;YAEA,IAAI,OAAOM,MAAM,CAAC0C,IAAI,KAAK,WAAW,EAAE;cACtCpE,WAAW,CAACmE,MAAM,CAACd,IAAI,EACvB;cACA,IAAIhF,KAAK,CAAE,GAAEtB,IAAK,sDAAqD,CAAC,CAAC;cACzE;YACF;YAEA,IAAI2E,MAAM,CAAC+B,QAAQ,IAAI/B,MAAM,CAAC+B,QAAQ,CAAC/D,MAAM,GAAG,CAAC,EAAE;cACjDgC,MAAM,CAAC+B,QAAQ,GAAG/B,MAAM,CAAC+B,QAAQ,CAACpC,GAAG;cACrC;AACZ;AACA;cACYgD,IAAI,IAAIzH,YAAY,CAACqB,YAAY,CAACoG,IAAI,EAAEtH,IAAI,CAAC,CAAC;YAChD;YAEA,IAAI2E,MAAM,CAACyC,MAAM,IAAIzC,MAAM,CAACyC,MAAM,CAACzE,MAAM,GAAG,CAAC,EAAE;cAC7C,MAAMwE,YAAY,GAAGZ,cAAc,IAAI1G,YAAY,CAACa,WAAW,CAAC6F,cAAc,CAAC;cAC/E5B,MAAM,CAACyC,MAAM,GAAGzC,MAAM,CAACyC,MAAM,CAAC9C,GAAG;cACjC;AACZ;AACA;cACYgD,IAAI,IAAIzH,YAAY,CAAC4B,UAAU,CAAC6F,IAAI,EAAEtH,IAAI,EAAEmH,YAAY,GAAG,IAAIlI,QAAQ,EACvE;cACAsH,cAAc,CAAC;cAAG;cAClBlC,SAAS;cAAE;cACX8C,YAAY,GAAGlE,WAAW,CAACrB,gBAAgB,GAAGyC,SAAS,CAAC,CAAC;YAC3D;YAEA,IAAIkD,OAAO;YAEX,KACA;YACA,KAAI,CAACxH,OAAO,CAACK,eAAe,CAACoH,MAAM,KAAK,KAAK,IAAI7C,MAAM,CAACX,iBAAiB,IAAIW,MAAM,CAACX,iBAAiB,CAACrB,MAAM,GAAG,CAAC,IAAIgC,MAAM,CAAC0C,IAAI,CAACI,UAAU,CAAC,IAAI,CAAC,EAAE;cAChJ,MAAMC,oBAAoB,GAAG/C,MAAM,CAAC0C,IAAI,CAACM,OAAO,CAAC,IAAI,CAAC;cACtDJ,OAAO,GAAG5C,MAAM,CAAC0C,IAAI,CAACO,SAAS,CAAC,CAAC,EAAEF,oBAAoB,CAAC;cACxD/C,MAAM,CAAC0C,IAAI,GAAG1C,MAAM,CAAC0C,IAAI,CAACO,SAAS,CAACF,oBAAoB,GAAG,CAAC,CAAC;YAC/D;YAEA,IAAI/C,MAAM,CAACL,GAAG,EAAE;cACdK,MAAM,CAACzC,MAAM,GAAG,IAAI6D,eAAe,CAACpB,MAAM,CAAC0C,IAAI,EAAErH,IAAI,EAAE2E,MAAM,CAACL,GAAG,EAAE3D,KAAK,EACxE;cACA4F,cAAc,EAAE,IAAI,CAAC;YACvB,CAAC,MAAM;cACL5B,MAAM,CAACzC,MAAM,GAAG,IAAI+D,SAAS,CAACtB,MAAM,CAAC0C,IAAI,CAAC;YAC5C;YAEA,IAAI1C,MAAM,CAACX,iBAAiB,IAAIW,MAAM,CAACX,iBAAiB,CAACrB,MAAM,GAAG,CAAC,EAAE;cACnE,MAAMkF,gBAAgB,GACtB;cACA,KAAI,CAAC9H,OAAO,CAACK,eAAe,CAAC0H,QAAQ,IAAI,2BAA2B;cACpE,IAAIC,KAAK,GAAG,EAAE;cACd,IAAID,QAAQ,GAAG9H,IAAI;cACnB,MAAMgI,UAAU,GAAGF,QAAQ,CAACH,OAAO,CAAC,GAAG,CAAC;cAExC,IAAIK,UAAU,IAAI,CAAC,EAAE;gBACnBD,KAAK,GAAGD,QAAQ,CAACvF,KAAK,CAACyF,UAAU,CAAC;gBAClCF,QAAQ,GAAGA,QAAQ,CAACvF,KAAK,CAAC,CAAC,EAAEyF,UAAU,CAAC;cAC1C;cAEA,MAAMC,cAAc,GAAGH,QAAQ,CAACI,WAAW,CAAC,GAAG,CAAC;cAChD,MAAMC,QAAQ,GAAGF,cAAc,KAAK,CAAC,CAAC,GAAGH,QAAQ,GAAGA,QAAQ,CAACvF,KAAK,CAAC0F,cAAc,GAAG,CAAC,CAAC;cACtF,MAAMG,IAAI,GAAG;gBACXN,QAAQ;gBACRK,QAAQ;gBACRJ;cACF,CAAC;cACDpD,MAAM,CAACkD,gBAAgB,GAAG5E,WAAW,CAACoF,OAAO,CAACR,gBAAgB,EAAEO,IAAI,CAAC;cACrE,IAAIZ,MAAM,CAAC,CAAC;;cAEZ,KACA;cACA,KAAI,CAACzH,OAAO,CAACK,eAAe,CAACoH,MAAM,KAAK,KAAK,EAAE;gBAC7CA,MAAM,GACN;gBACA,KAAI,CAACzH,OAAO,CAACK,eAAe,CAACoH,MAAM,IAAK,sCAAqC1I,IAAI,CAACwJ,QAAQ,CAACxJ,IAAI,CAACyJ,OAAO,CAACvI,IAAI,CAAC,EAAE2E,MAAM,CAACkD,gBAAgB,CAAC,CAACW,OAAO,CAAC,KAAK,EAAE,GAAG,CAAE,EAAC;gBAE7J,IAAI,OAAOhB,MAAM,KAAK,UAAU,EAAE;kBAChCA,MAAM,GAAGA,MAAM,CAAC7C,MAAM,CAACkD,gBAAgB,CAAC;gBAC1C;gBAEA,IAAIL,MAAM,EAAE;kBACV7C,MAAM,CAACzC,MAAM,GAAG,IAAI8D,YAAY,CAACuB,OAAO,GAAI,GAAEA,OAAQ,IAAG,GAAG,EAAE,EAAG,OAAMC,MAAO,OAAM,EAAE7C,MAAM,CAACzC,MAAM,CAAC;gBACtG;cACF;cAEA,MAAMuG,uBAAuB,GAAG9D,MAAM,CAACX,iBAAiB,CAAC0E,IAAI,EAAE,CAAClG,IAAI,CAAC,MAAM,CAAC;cAC5EmC,MAAM,CAACgE,uBAAuB,GAAG,IAAI1C,SAAS,CAAE,GAAEwC,uBAAwB,IAAG,CAAC;YAChF;YAEA,MAAMhE,SAAS,CAACmE,YAAY,CAAC;cAC3B1G,MAAM,EAAEyC,MAAM,CAACzC,MAAM;cACrBkF,MAAM,EAAEzC,MAAM,CAACyC,MAAM;cACrBV,QAAQ,EAAE/B,MAAM,CAAC+B,QAAQ;cACzBmB,gBAAgB,EAAElD,MAAM,CAACkD,gBAAgB;cACzCc,uBAAuB,EAAEhE,MAAM,CAACgE;YAClC,CAAC,CAAC;UACJ;UAEA,IAAIhE,MAAM,CAAC+B,QAAQ,IAAI/B,MAAM,CAAC+B,QAAQ,CAAC/D,MAAM,GAAG,CAAC,EAAE;YACjD,KAAK,MAAMxB,OAAO,IAAIwD,MAAM,CAAC+B,QAAQ,EAAE;cACrCzD,WAAW,CAACyD,QAAQ,CAACJ,IAAI,EACzB;cACAnF,OAAO,CAAC;YACV;UACF;UAEA,IAAIwD,MAAM,CAACyC,MAAM,IAAIzC,MAAM,CAACyC,MAAM,CAACzE,MAAM,GAAG,CAAC,EAAE;YAC7C,KAAK,MAAMjB,KAAK,IAAIiD,MAAM,CAACyC,MAAM,EAAE;cACjCnE,WAAW,CAACmE,MAAM,CAACd,IAAI,EACvB;cACA5E,KAAK,CAAC;YACR;UACF;UACA;;UAGA,MAAMmH,OAAO,GAAG;YACd9E,SAAS,EAAE;UACb,CAAC;UACD,MAAM;YACJ7B,MAAM;YACNyG;UACF,CAAC,GAAGhE,MAAM,CAAC,CAAC;;UAEZ,IAAIgE,uBAAuB,EAAE;YAC3B,MAAM;cACJd;YACF,CAAC,GAAGlD,MAAM;YACVkE,OAAO,CAACC,OAAO,GAAG;cAChBC,OAAO,EAAElB;YACX,CAAC;YACD3B,oBAAoB,CAAC8C,GAAG,CAAChJ,IAAI,EAAE;cAC7B2I,uBAAuB;cACvBd;YACF,CAAC,CAAC;UACJ;UAEA5E,WAAW,CAACgG,WAAW,CAACjJ,IAAI,EAAEkC,MAAM,EAAE2G,OAAO,CAAC;QAChD,CAAC,EAAC;MACJ;MAEA,MAAMK,KAAK,GAAGpE,SAAS,IAAIxB,cAAc,GAAG,CAAC,GAC7C;MACA0B,eAAe,GAAGoB,cAAc,CAACzD,MAAM;MACvC,MAAMrD,WAAW,CAAC4J,KAAK,EAAE9C,cAAc,CAAC;MAExC,IAAIrB,iBAAiB,EAAE;QACrB,MAAMA,iBAAiB,CAACoE,GAAG,EAAE;MAC/B;MACA;;MAGA,MAAMpI,KAAK,CAACqI,IAAI,CAAClD,oBAAoB,CAAC,CAACwC,IAAI,EAAE,CAACW,MAAM;MAAA;MACpD;AACJ;AACA;AACA;AACA;MAJI;QAAA,8BAKA,WAAOC,eAAe,EAAE,CAACF,IAAI,EAAEG,KAAK,CAAC,EAAK;UACxC,MAAMC,QAAQ,GACd,+DACMF,eAAe;UACrB,MAAM;YACJzB,gBAAgB;YAChBc;UACF,CAAC,GAAGY,KAAK;UAET,IAAIC,QAAQ,IAAIA,QAAQ,CAAC3B,gBAAgB,KAAKA,gBAAgB,EAAE;YAC9D,MAAM;cACJuB,IAAI,EAAEK,YAAY;cAClBvH,MAAM,EAAEwH;YACV,CAAC,GAAGF,QAAQ;YACZ,MAAMG,UAAU,GAAI,GAAEF,YAAa,IAAGL,IAAK,EAAC;YAC5C,MAAMpJ,IAAI,GAAI,GAAE6H,gBAAiB,IAAG8B,UAAW,EAAC;YAChD,MAAMpF,IAAI,GAAG,CAACmF,UAAU,EAAEf,uBAAuB,CAAC,CAACrE,GAAG,CAACgD,IAAI,IAAIlE,KAAK,CAACoB,iBAAiB,CAAC8C,IAAI,CAAC,CAAC,CAAC+B,MAAM,CAAC,CAACO,aAAa,EAAEC,YAAY,KAAKzG,KAAK,CAAC0G,UAAU,CAACF,aAAa,EAAEC,YAAY,CAAC,CAAC;YACpL,IAAI3H,MAAM,SAASkB,KAAK,CAACwB,UAAU,CAAC5E,IAAI,EAAEuE,IAAI,CAAC;YAE/C,IAAI,CAACrC,MAAM,EAAE;cACXA,MAAM,GAAG,IAAI8D,YAAY,CAACjF,KAAK,CAACqI,IAAI,CAAC,IAAIW,GAAG,CAAC,CAAC,IAC9C;cACAL,UAAU,CAACxH,MAAM,EAAE,CAACI,KAAK,CAAC,MAAM,CAAC,EAAE,IACnC;cACAqG,uBAAuB,CAACzG,MAAM,EAAE,CAACI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,MAAM,CAAC,CAAC;cAC/D,MAAMY,KAAK,CAACwF,YAAY,CAAC5I,IAAI,EAAEuE,IAAI,EAAErC,MAAM,CAAC;YAC9C;YAEAe,WAAW,CAACgG,WAAW,CAACpB,gBAAgB,EAAE3F,MAAM,CAAC;YACjD,OAAO;cACLA,MAAM;cACN2F,gBAAgB;cAChBuB,IAAI,EAAEO;YACR,CAAC;UACH;UAEA,MAAMK,aAAa,GAAG/G,WAAW,CAACa,QAAQ,CAAC+D,gBAAgB,CAAC;UAE5D,IAAImC,aAAa,EAAE;YACjB,OAAO;cACL9H,MAAM,EAAE8H,aAAa,CAAC9H,MAAM;cAC5B2F,gBAAgB;cAChBuB,IAAI,EAAEvB;YACR,CAAC;UACH;UAEA5E,WAAW,CAACgH,SAAS,CAACpC,gBAAgB,EAAEc,uBAAuB,EAAE;YAC/D3E,iBAAiB,EAAE;UACrB,CAAC,CAAC;UACF,OAAO;YACL9B,MAAM,EAAEyG,uBAAuB;YAC/Bd,gBAAgB;YAChBuB;UACF,CAAC;QACH,CAAC;QAAA;UAAA;QAAA;MAAA,KACD;MACA5F,OAAO,CAAC0B,OAAO,EAAE,CAAC;IAAC;EACrB;EACA;AACF;AACA;AACA;AACA;;EAGE,OAAO8B,cAAc,CAACC,WAAW,EAAE;IACjC;IACA,IAAIA,WAAW,CAACiD,aAAa,IAAIjD,WAAW,CAACkD,KAAK,IAAIlD,WAAW,CAACmD,aAAa,IAAInD,WAAW,CAACoD,KAAK,IAAIpD,WAAW,CAACJ,MAAM,EAAE;MAC1H,OAAO,IAAI;IACb,CAAC,CAAC;;IAGF,IAAII,WAAW,CAACqD,aAAa,IAAIrD,WAAW,CAACsD,aAAa,EAAE;MAC1D,OAAO,IAAI;IACb;IAEA,OAAO,CAAC;EACV;EACA;AACF;AACA;AACA;;EAGEC,KAAK,CAACxH,QAAQ,EAAE;IACd,MAAMyH,UAAU,GAAG,IAAI,CAAC3K,WAAW,CAACE,IAAI;IACxC,MAAMiF,sBAAsB,GAAGpF,YAAY,CAAC4C,yBAAyB,CAAC,IAAI,CAAC1C,OAAO,CAACM,QAAQ,CAAC;IAC5F2C,QAAQ,CAAC0H,KAAK,CAACzH,WAAW,CAAC0H,GAAG,CAACF,UAAU,EAAExH,WAAW,IAAI;MACxD,MAAMyH,KAAK,GAAG1H,QAAQ,CAACiB,OAAO,CAAC2G,UAAU,CAACC,uBAAuB,CAACC,mBAAmB,CAAC7H,WAAW,CAAC;MAClG,MAAMmF,IAAI,GAAGhJ,SAAS,CAAC;QACrBoB,SAAS,EAAE,OAAO,IAAI,CAACT,OAAO,CAACS,SAAS,CAACC,cAAc,CAACsK,mBAAmB,KAAK,WAAW,GAAG,IAAI,CAAChL,OAAO,CAACS,SAAS,CAACC,cAAc,CAACsK,mBAAmB,EAAE,IAAI,OAAO,GAAG,OAAO;QAC9KhL,OAAO,EAAE,IAAI,CAACA,OAAO,CAACS,SAAS,CAACT;MAClC,CAAC,CAAC;MACF2K,KAAK,CAACM,SAAS,CAACL,GAAG,CAACF,UAAU,EAAE,CAACjF,KAAK,EAAEyF,IAAI,KAAK;QAC/CA,IAAI,CAACC,MAAM,CAAC,cAAc,CAAC;QAC3BD,IAAI,CAACC,MAAM,CAAC9C,IAAI,CAAC;MACnB,CAAC,CAAC;MACFnF,WAAW,CAACyH,KAAK,CAACS,aAAa,CAACC,UAAU,CAAC;QACzCpL,IAAI,EAAEyK,UAAU;QAChBY,KAAK,EAAErI,QAAQ,CAACiB,OAAO,CAACqH,WAAW,CAACC,kCAAkC;QACtEC,gBAAgB,EAAE;MACpB,CAAC,EAAEtI,MAAM,IAAI,IAAI,CAACH,QAAQ,CAACC,QAAQ,EAAEC,WAAW,EAAEC,MAAM,EAAE;QACxD+B;MACF,CAAC,CAAC,CAAC;MACHhC,WAAW,CAACyH,KAAK,CAACe,YAAY,CAACd,GAAG,CAACF,UAAU,EAAEiB,KAAK,IAAI;QACtDA,KAAK,CAAChB,KAAK,CAACiB,KAAK,CAACC,GAAG,CAAC,sBAAsB,CAAC,CAACjB,GAAG,CAAC,uBAAuB,EAAE,CAAC5G,SAAS,EAAE;UACrF8H,KAAK;UACLC;QACF,CAAC,KAAK/H,SAAS,GACf;QACA8H,KAAK,EACL;QACAC,UAAU,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC;MAChC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AAEF;AAEAjM,YAAY,CAACN,YAAY,GAAGA,YAAY;AACxCM,YAAY,CAACL,cAAc,GAAGA,cAAc;AAC5CK,YAAY,CAACJ,SAAS,GAAGA,SAAS;AAClCI,YAAY,CAACH,aAAa,GAAGA,aAAa;AAC1CmH,MAAM,CAACkF,OAAO,GAAGlM,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}