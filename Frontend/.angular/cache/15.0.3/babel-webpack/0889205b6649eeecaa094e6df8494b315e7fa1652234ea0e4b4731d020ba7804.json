{"ast":null,"code":"'use strict';\n\nconst querystring = require('querystring');\nconst common = require('./common');\nconst log = require('../logger').create('middleware:source-files');\nfunction findByPath(files, path) {\n  return Array.from(files).find(file => file.path === path);\n}\nfunction composeUrl(url, basePath, urlRoot) {\n  return url.replace(urlRoot, '/').replace(/\\?.*$/, '').replace(/^\\/absolute/, '').replace(/^\\/base/, basePath);\n}\n\n// Source Files middleware is responsible for serving all the source files under the test.\nfunction createSourceFilesMiddleware(filesPromise, serveFile, basePath, urlRoot) {\n  return function (request, response, next) {\n    const requestedFilePath = composeUrl(request.url, basePath, urlRoot);\n    // When a path contains HTML-encoded characters (e.g %2F used by Jenkins for branches with /)\n    const requestedFilePathUnescaped = composeUrl(querystring.unescape(request.url), basePath, urlRoot);\n    request.pause();\n    log.debug(`Requesting ${request.url}`);\n    log.debug(`Fetching ${requestedFilePath}`);\n    return filesPromise.then(function (files) {\n      // TODO(vojta): change served to be a map rather then an array\n      const file = findByPath(files.served, requestedFilePath) || findByPath(files.served, requestedFilePathUnescaped);\n      const rangeHeader = request.headers.range;\n      if (file) {\n        const acceptEncodingHeader = request.headers['accept-encoding'];\n        const matchedEncoding = Object.keys(file.encodings).find(encoding => new RegExp(`(^|.*, ?)${encoding}(,|$)`).test(acceptEncodingHeader));\n        const content = file.encodings[matchedEncoding] || file.content;\n        serveFile(file.contentPath || file.path, rangeHeader, response, function () {\n          if (/\\?\\w+/.test(request.url)) {\n            common.setHeavyCacheHeaders(response); // files with timestamps - cache one year, rely on timestamps\n          } else {\n            common.setNoCacheHeaders(response); // without timestamps - no cache (debug)\n          }\n\n          if (matchedEncoding) {\n            response.setHeader('Content-Encoding', matchedEncoding);\n          }\n        }, content, file.doNotCache);\n      } else {\n        next();\n      }\n      request.resume();\n    });\n  };\n}\ncreateSourceFilesMiddleware.$inject = ['filesPromise', 'serveFile', 'config.basePath', 'config.urlRoot'];\nexports.create = createSourceFilesMiddleware;","map":{"version":3,"names":["querystring","require","common","log","create","findByPath","files","path","Array","from","find","file","composeUrl","url","basePath","urlRoot","replace","createSourceFilesMiddleware","filesPromise","serveFile","request","response","next","requestedFilePath","requestedFilePathUnescaped","unescape","pause","debug","then","served","rangeHeader","headers","range","acceptEncodingHeader","matchedEncoding","Object","keys","encodings","encoding","RegExp","test","content","contentPath","setHeavyCacheHeaders","setNoCacheHeaders","setHeader","doNotCache","resume","$inject","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/karma/lib/middleware/source_files.js"],"sourcesContent":["'use strict'\n\nconst querystring = require('querystring')\nconst common = require('./common')\n\nconst log = require('../logger').create('middleware:source-files')\n\nfunction findByPath (files, path) {\n  return Array.from(files).find((file) => file.path === path)\n}\n\nfunction composeUrl (url, basePath, urlRoot) {\n  return url\n    .replace(urlRoot, '/')\n    .replace(/\\?.*$/, '')\n    .replace(/^\\/absolute/, '')\n    .replace(/^\\/base/, basePath)\n}\n\n// Source Files middleware is responsible for serving all the source files under the test.\nfunction createSourceFilesMiddleware (filesPromise, serveFile, basePath, urlRoot) {\n  return function (request, response, next) {\n    const requestedFilePath = composeUrl(request.url, basePath, urlRoot)\n    // When a path contains HTML-encoded characters (e.g %2F used by Jenkins for branches with /)\n    const requestedFilePathUnescaped = composeUrl(querystring.unescape(request.url), basePath, urlRoot)\n\n    request.pause()\n\n    log.debug(`Requesting ${request.url}`)\n    log.debug(`Fetching ${requestedFilePath}`)\n\n    return filesPromise.then(function (files) {\n      // TODO(vojta): change served to be a map rather then an array\n      const file = findByPath(files.served, requestedFilePath) || findByPath(files.served, requestedFilePathUnescaped)\n      const rangeHeader = request.headers.range\n\n      if (file) {\n        const acceptEncodingHeader = request.headers['accept-encoding']\n        const matchedEncoding = Object.keys(file.encodings).find(\n          (encoding) => new RegExp(`(^|.*, ?)${encoding}(,|$)`).test(acceptEncodingHeader)\n        )\n        const content = file.encodings[matchedEncoding] || file.content\n\n        serveFile(file.contentPath || file.path, rangeHeader, response, function () {\n          if (/\\?\\w+/.test(request.url)) {\n            common.setHeavyCacheHeaders(response) // files with timestamps - cache one year, rely on timestamps\n          } else {\n            common.setNoCacheHeaders(response) // without timestamps - no cache (debug)\n          }\n          if (matchedEncoding) {\n            response.setHeader('Content-Encoding', matchedEncoding)\n          }\n        }, content, file.doNotCache)\n      } else {\n        next()\n      }\n\n      request.resume()\n    })\n  }\n}\n\ncreateSourceFilesMiddleware.$inject = [\n  'filesPromise', 'serveFile', 'config.basePath', 'config.urlRoot'\n]\n\nexports.create = createSourceFilesMiddleware\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}