{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CssOptimizerPlugin = void 0;\nconst esbuild_targets_1 = require(\"../../utils/esbuild-targets\");\nconst webpack_diagnostics_1 = require(\"../../utils/webpack-diagnostics\");\nconst esbuild_executor_1 = require(\"./esbuild-executor\");\n/**\n * The name of the plugin provided to Webpack when tapping Webpack compiler hooks.\n */\nconst PLUGIN_NAME = 'angular-css-optimizer';\n/**\n * A Webpack plugin that provides CSS optimization capabilities.\n *\n * The plugin uses both `esbuild` to provide both fast and highly-optimized\n * code output.\n */\nclass CssOptimizerPlugin {\n  constructor(options) {\n    this.esbuild = new esbuild_executor_1.EsbuildExecutor();\n    if (options === null || options === void 0 ? void 0 : options.supportedBrowsers) {\n      this.targets = (0, esbuild_targets_1.transformSupportedBrowsersToTargets)(options.supportedBrowsers);\n    }\n  }\n  apply(compiler) {\n    var _this = this;\n    const {\n      OriginalSource,\n      SourceMapSource\n    } = compiler.webpack.sources;\n    compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {\n      const logger = compilation.getLogger('build-angular.CssOptimizerPlugin');\n      compilation.hooks.processAssets.tapPromise({\n        name: PLUGIN_NAME,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE\n      }, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (compilationAssets) {\n          const cache = compilation.options.cache && compilation.getCache(PLUGIN_NAME);\n          logger.time('optimize css assets');\n          for (const assetName of Object.keys(compilationAssets)) {\n            if (!/\\.(?:css|scss|sass|less)$/.test(assetName)) {\n              continue;\n            }\n            const asset = compilation.getAsset(assetName);\n            // Skip assets that have already been optimized or are verbatim copies (project assets)\n            if (!asset || asset.info.minimized || asset.info.copied) {\n              continue;\n            }\n            const {\n              source: styleAssetSource,\n              name\n            } = asset;\n            let cacheItem;\n            if (cache) {\n              const eTag = cache.getLazyHashedEtag(styleAssetSource);\n              cacheItem = cache.getItemCache(name, eTag);\n              const cachedOutput = yield cacheItem.getPromise();\n              if (cachedOutput) {\n                logger.debug(`${name} restored from cache`);\n                yield _this.addWarnings(compilation, cachedOutput.warnings);\n                compilation.updateAsset(name, cachedOutput.source, assetInfo => ({\n                  ...assetInfo,\n                  minimized: true\n                }));\n                continue;\n              }\n            }\n            const {\n              source,\n              map: inputMap\n            } = styleAssetSource.sourceAndMap();\n            const input = typeof source === 'string' ? source : source.toString();\n            const optimizeAssetLabel = `optimize asset: ${asset.name}`;\n            logger.time(optimizeAssetLabel);\n            const {\n              code,\n              warnings,\n              map\n            } = yield _this.optimize(input, asset.name, inputMap, _this.targets);\n            logger.timeEnd(optimizeAssetLabel);\n            yield _this.addWarnings(compilation, warnings);\n            const optimizedAsset = map ? new SourceMapSource(code, name, map) : new OriginalSource(code, name);\n            compilation.updateAsset(name, optimizedAsset, assetInfo => ({\n              ...assetInfo,\n              minimized: true\n            }));\n            yield cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.storePromise({\n              source: optimizedAsset,\n              warnings\n            });\n          }\n          logger.timeEnd('optimize css assets');\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    });\n  }\n  /**\n   * Optimizes a CSS asset using esbuild.\n   *\n   * @param input The CSS asset source content to optimize.\n   * @param name The name of the CSS asset. Used to generate source maps.\n   * @param inputMap Optionally specifies the CSS asset's original source map that will\n   * be merged with the intermediate optimized source map.\n   * @param target Optionally specifies the target browsers for the output code.\n   * @returns A promise resolving to the optimized CSS, source map, and any warnings.\n   */\n  optimize(input, name, inputMap, target) {\n    let sourceMapLine;\n    if (inputMap) {\n      // esbuild will automatically remap the sourcemap if provided\n      sourceMapLine = `\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,${Buffer.from(JSON.stringify(inputMap)).toString('base64')} */`;\n    }\n    return this.esbuild.transform(sourceMapLine ? input + sourceMapLine : input, {\n      loader: 'css',\n      legalComments: 'inline',\n      minify: true,\n      sourcemap: !!inputMap && 'external',\n      sourcefile: name,\n      target\n    });\n  }\n  addWarnings(compilation, warnings) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (warnings.length > 0) {\n        for (const warning of yield _this2.esbuild.formatMessages(warnings, {\n          kind: 'warning'\n        })) {\n          (0, webpack_diagnostics_1.addWarning)(compilation, warning);\n        }\n      }\n    })();\n  }\n}\nexports.CssOptimizerPlugin = CssOptimizerPlugin;","map":{"version":3,"names":["Object","defineProperty","exports","value","CssOptimizerPlugin","esbuild_targets_1","require","webpack_diagnostics_1","esbuild_executor_1","PLUGIN_NAME","constructor","options","esbuild","EsbuildExecutor","supportedBrowsers","targets","transformSupportedBrowsersToTargets","apply","compiler","OriginalSource","SourceMapSource","webpack","sources","hooks","compilation","tap","logger","getLogger","processAssets","tapPromise","name","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE","compilationAssets","cache","getCache","time","assetName","keys","test","asset","getAsset","info","minimized","copied","source","styleAssetSource","cacheItem","eTag","getLazyHashedEtag","getItemCache","cachedOutput","getPromise","debug","addWarnings","warnings","updateAsset","assetInfo","map","inputMap","sourceAndMap","input","toString","optimizeAssetLabel","code","optimize","timeEnd","optimizedAsset","storePromise","target","sourceMapLine","Buffer","from","JSON","stringify","transform","loader","legalComments","minify","sourcemap","sourcefile","length","warning","formatMessages","kind","addWarning"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@angular-devkit/build-angular/src/webpack/plugins/css-optimizer-plugin.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CssOptimizerPlugin = void 0;\nconst esbuild_targets_1 = require(\"../../utils/esbuild-targets\");\nconst webpack_diagnostics_1 = require(\"../../utils/webpack-diagnostics\");\nconst esbuild_executor_1 = require(\"./esbuild-executor\");\n/**\n * The name of the plugin provided to Webpack when tapping Webpack compiler hooks.\n */\nconst PLUGIN_NAME = 'angular-css-optimizer';\n/**\n * A Webpack plugin that provides CSS optimization capabilities.\n *\n * The plugin uses both `esbuild` to provide both fast and highly-optimized\n * code output.\n */\nclass CssOptimizerPlugin {\n    constructor(options) {\n        this.esbuild = new esbuild_executor_1.EsbuildExecutor();\n        if (options === null || options === void 0 ? void 0 : options.supportedBrowsers) {\n            this.targets = (0, esbuild_targets_1.transformSupportedBrowsersToTargets)(options.supportedBrowsers);\n        }\n    }\n    apply(compiler) {\n        const { OriginalSource, SourceMapSource } = compiler.webpack.sources;\n        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation) => {\n            const logger = compilation.getLogger('build-angular.CssOptimizerPlugin');\n            compilation.hooks.processAssets.tapPromise({\n                name: PLUGIN_NAME,\n                stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n            }, async (compilationAssets) => {\n                const cache = compilation.options.cache && compilation.getCache(PLUGIN_NAME);\n                logger.time('optimize css assets');\n                for (const assetName of Object.keys(compilationAssets)) {\n                    if (!/\\.(?:css|scss|sass|less)$/.test(assetName)) {\n                        continue;\n                    }\n                    const asset = compilation.getAsset(assetName);\n                    // Skip assets that have already been optimized or are verbatim copies (project assets)\n                    if (!asset || asset.info.minimized || asset.info.copied) {\n                        continue;\n                    }\n                    const { source: styleAssetSource, name } = asset;\n                    let cacheItem;\n                    if (cache) {\n                        const eTag = cache.getLazyHashedEtag(styleAssetSource);\n                        cacheItem = cache.getItemCache(name, eTag);\n                        const cachedOutput = await cacheItem.getPromise();\n                        if (cachedOutput) {\n                            logger.debug(`${name} restored from cache`);\n                            await this.addWarnings(compilation, cachedOutput.warnings);\n                            compilation.updateAsset(name, cachedOutput.source, (assetInfo) => ({\n                                ...assetInfo,\n                                minimized: true,\n                            }));\n                            continue;\n                        }\n                    }\n                    const { source, map: inputMap } = styleAssetSource.sourceAndMap();\n                    const input = typeof source === 'string' ? source : source.toString();\n                    const optimizeAssetLabel = `optimize asset: ${asset.name}`;\n                    logger.time(optimizeAssetLabel);\n                    const { code, warnings, map } = await this.optimize(input, asset.name, inputMap, this.targets);\n                    logger.timeEnd(optimizeAssetLabel);\n                    await this.addWarnings(compilation, warnings);\n                    const optimizedAsset = map\n                        ? new SourceMapSource(code, name, map)\n                        : new OriginalSource(code, name);\n                    compilation.updateAsset(name, optimizedAsset, (assetInfo) => ({\n                        ...assetInfo,\n                        minimized: true,\n                    }));\n                    await (cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.storePromise({\n                        source: optimizedAsset,\n                        warnings,\n                    }));\n                }\n                logger.timeEnd('optimize css assets');\n            });\n        });\n    }\n    /**\n     * Optimizes a CSS asset using esbuild.\n     *\n     * @param input The CSS asset source content to optimize.\n     * @param name The name of the CSS asset. Used to generate source maps.\n     * @param inputMap Optionally specifies the CSS asset's original source map that will\n     * be merged with the intermediate optimized source map.\n     * @param target Optionally specifies the target browsers for the output code.\n     * @returns A promise resolving to the optimized CSS, source map, and any warnings.\n     */\n    optimize(input, name, inputMap, target) {\n        let sourceMapLine;\n        if (inputMap) {\n            // esbuild will automatically remap the sourcemap if provided\n            sourceMapLine = `\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,${Buffer.from(JSON.stringify(inputMap)).toString('base64')} */`;\n        }\n        return this.esbuild.transform(sourceMapLine ? input + sourceMapLine : input, {\n            loader: 'css',\n            legalComments: 'inline',\n            minify: true,\n            sourcemap: !!inputMap && 'external',\n            sourcefile: name,\n            target,\n        });\n    }\n    async addWarnings(compilation, warnings) {\n        if (warnings.length > 0) {\n            for (const warning of await this.esbuild.formatMessages(warnings, { kind: 'warning' })) {\n                (0, webpack_diagnostics_1.addWarning)(compilation, warning);\n            }\n        }\n    }\n}\nexports.CssOptimizerPlugin = CssOptimizerPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}