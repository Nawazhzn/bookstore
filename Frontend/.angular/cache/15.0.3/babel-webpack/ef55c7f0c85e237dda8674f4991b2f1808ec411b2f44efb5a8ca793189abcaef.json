{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JavaScriptOptimizerPlugin = void 0;\nconst piscina_1 = __importDefault(require(\"piscina\"));\nconst environment_options_1 = require(\"../../utils/environment-options\");\nconst esbuild_targets_1 = require(\"../../utils/esbuild-targets\");\nconst webpack_diagnostics_1 = require(\"../../utils/webpack-diagnostics\");\nconst esbuild_executor_1 = require(\"./esbuild-executor\");\n/**\n * The maximum number of Workers that will be created to execute optimize tasks.\n */\nconst MAX_OPTIMIZE_WORKERS = environment_options_1.maxWorkers;\n/**\n * The name of the plugin provided to Webpack when tapping Webpack compiler hooks.\n */\nconst PLUGIN_NAME = 'angular-javascript-optimizer';\n/**\n * A Webpack plugin that provides JavaScript optimization capabilities.\n *\n * The plugin uses both `esbuild` and `terser` to provide both fast and highly-optimized\n * code output. `esbuild` is used as an initial pass to remove the majority of unused code\n * as well as shorten identifiers. `terser` is then used as a secondary pass to apply\n * optimizations not yet implemented by `esbuild`.\n */\nclass JavaScriptOptimizerPlugin {\n  constructor(options) {\n    this.options = options;\n    if (options.supportedBrowsers) {\n      this.targets = (0, esbuild_targets_1.transformSupportedBrowsersToTargets)(options.supportedBrowsers);\n    }\n  }\n  apply(compiler) {\n    var _this = this;\n    const {\n      OriginalSource,\n      SourceMapSource\n    } = compiler.webpack.sources;\n    compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {\n      const logger = compilation.getLogger('build-angular.JavaScriptOptimizerPlugin');\n      compilation.hooks.processAssets.tapPromise({\n        name: PLUGIN_NAME,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE\n      }, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (compilationAssets) {\n          logger.time('optimize js assets');\n          const scriptsToOptimize = [];\n          const cache = compilation.options.cache && compilation.getCache('JavaScriptOptimizerPlugin');\n          // Analyze the compilation assets for scripts that require optimization\n          for (const assetName of Object.keys(compilationAssets)) {\n            if (!assetName.endsWith('.js')) {\n              continue;\n            }\n            const scriptAsset = compilation.getAsset(assetName);\n            // Skip assets that have already been optimized or are verbatim copies (project assets)\n            if (!scriptAsset || scriptAsset.info.minimized || scriptAsset.info.copied) {\n              continue;\n            }\n            const {\n              source: scriptAssetSource,\n              name\n            } = scriptAsset;\n            let cacheItem;\n            if (cache) {\n              const eTag = cache.getLazyHashedEtag(scriptAssetSource);\n              cacheItem = cache.getItemCache(name, eTag);\n              const cachedOutput = yield cacheItem.getPromise();\n              if (cachedOutput) {\n                logger.debug(`${name} restored from cache`);\n                compilation.updateAsset(name, cachedOutput.source, assetInfo => ({\n                  ...assetInfo,\n                  minimized: true\n                }));\n                continue;\n              }\n            }\n            const {\n              source,\n              map\n            } = scriptAssetSource.sourceAndMap();\n            scriptsToOptimize.push({\n              name: scriptAsset.name,\n              code: typeof source === 'string' ? source : source.toString(),\n              map,\n              cacheItem\n            });\n          }\n          if (scriptsToOptimize.length === 0) {\n            return;\n          }\n          // Ensure all replacement values are strings which is the expected type for esbuild\n          let define;\n          if (_this.options.define) {\n            define = {};\n            for (const [key, value] of Object.entries(_this.options.define)) {\n              define[key] = String(value);\n            }\n          }\n          // Setup the options used by all worker tasks\n          const optimizeOptions = {\n            sourcemap: _this.options.sourcemap,\n            define,\n            keepNames: _this.options.keepNames,\n            keepIdentifierNames: _this.options.keepIdentifierNames,\n            target: _this.targets,\n            removeLicenses: _this.options.removeLicenses,\n            advanced: _this.options.advanced,\n            // Perform a single native esbuild support check.\n            // This removes the need for each worker to perform the check which would\n            // otherwise require spawning a separate process per worker.\n            alwaysUseWasm: !(yield esbuild_executor_1.EsbuildExecutor.hasNativeSupport())\n          };\n          // Sort scripts so larger scripts start first - worker pool uses a FIFO queue\n          scriptsToOptimize.sort((a, b) => a.code.length - b.code.length);\n          // Initialize the task worker pool\n          const workerPath = require.resolve('./javascript-optimizer-worker');\n          const workerPool = new piscina_1.default({\n            filename: workerPath,\n            maxThreads: MAX_OPTIMIZE_WORKERS\n          });\n          // Enqueue script optimization tasks and update compilation assets as the tasks complete\n          try {\n            const tasks = [];\n            for (const {\n              name,\n              code,\n              map,\n              cacheItem\n            } of scriptsToOptimize) {\n              logger.time(`optimize asset: ${name}`);\n              tasks.push(workerPool.run({\n                asset: {\n                  name,\n                  code,\n                  map\n                },\n                options: optimizeOptions\n              }).then(({\n                code,\n                name,\n                map\n              }) => {\n                const optimizedAsset = map ? new SourceMapSource(code, name, map) : new OriginalSource(code, name);\n                compilation.updateAsset(name, optimizedAsset, assetInfo => ({\n                  ...assetInfo,\n                  minimized: true\n                }));\n                logger.timeEnd(`optimize asset: ${name}`);\n                return cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.storePromise({\n                  source: optimizedAsset\n                });\n              }, error => {\n                (0, webpack_diagnostics_1.addError)(compilation, `Optimization error [${name}]: ${error.stack || error.message}`);\n              }));\n            }\n            yield Promise.all(tasks);\n          } finally {\n            void workerPool.destroy();\n          }\n          logger.timeEnd('optimize js assets');\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    });\n  }\n}\nexports.JavaScriptOptimizerPlugin = JavaScriptOptimizerPlugin;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","JavaScriptOptimizerPlugin","piscina_1","require","environment_options_1","esbuild_targets_1","webpack_diagnostics_1","esbuild_executor_1","MAX_OPTIMIZE_WORKERS","maxWorkers","PLUGIN_NAME","constructor","options","supportedBrowsers","targets","transformSupportedBrowsersToTargets","apply","compiler","OriginalSource","SourceMapSource","webpack","sources","hooks","compilation","tap","logger","getLogger","processAssets","tapPromise","name","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE","compilationAssets","time","scriptsToOptimize","cache","getCache","assetName","keys","endsWith","scriptAsset","getAsset","info","minimized","copied","source","scriptAssetSource","cacheItem","eTag","getLazyHashedEtag","getItemCache","cachedOutput","getPromise","debug","updateAsset","assetInfo","map","sourceAndMap","push","code","toString","length","define","key","entries","String","optimizeOptions","sourcemap","keepNames","keepIdentifierNames","target","removeLicenses","advanced","alwaysUseWasm","EsbuildExecutor","hasNativeSupport","sort","a","b","workerPath","resolve","workerPool","default","filename","maxThreads","tasks","run","asset","then","optimizedAsset","timeEnd","storePromise","error","addError","stack","message","Promise","all","destroy"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@angular-devkit/build-angular/src/webpack/plugins/javascript-optimizer-plugin.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JavaScriptOptimizerPlugin = void 0;\nconst piscina_1 = __importDefault(require(\"piscina\"));\nconst environment_options_1 = require(\"../../utils/environment-options\");\nconst esbuild_targets_1 = require(\"../../utils/esbuild-targets\");\nconst webpack_diagnostics_1 = require(\"../../utils/webpack-diagnostics\");\nconst esbuild_executor_1 = require(\"./esbuild-executor\");\n/**\n * The maximum number of Workers that will be created to execute optimize tasks.\n */\nconst MAX_OPTIMIZE_WORKERS = environment_options_1.maxWorkers;\n/**\n * The name of the plugin provided to Webpack when tapping Webpack compiler hooks.\n */\nconst PLUGIN_NAME = 'angular-javascript-optimizer';\n/**\n * A Webpack plugin that provides JavaScript optimization capabilities.\n *\n * The plugin uses both `esbuild` and `terser` to provide both fast and highly-optimized\n * code output. `esbuild` is used as an initial pass to remove the majority of unused code\n * as well as shorten identifiers. `terser` is then used as a secondary pass to apply\n * optimizations not yet implemented by `esbuild`.\n */\nclass JavaScriptOptimizerPlugin {\n    constructor(options) {\n        this.options = options;\n        if (options.supportedBrowsers) {\n            this.targets = (0, esbuild_targets_1.transformSupportedBrowsersToTargets)(options.supportedBrowsers);\n        }\n    }\n    apply(compiler) {\n        const { OriginalSource, SourceMapSource } = compiler.webpack.sources;\n        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation) => {\n            const logger = compilation.getLogger('build-angular.JavaScriptOptimizerPlugin');\n            compilation.hooks.processAssets.tapPromise({\n                name: PLUGIN_NAME,\n                stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n            }, async (compilationAssets) => {\n                logger.time('optimize js assets');\n                const scriptsToOptimize = [];\n                const cache = compilation.options.cache && compilation.getCache('JavaScriptOptimizerPlugin');\n                // Analyze the compilation assets for scripts that require optimization\n                for (const assetName of Object.keys(compilationAssets)) {\n                    if (!assetName.endsWith('.js')) {\n                        continue;\n                    }\n                    const scriptAsset = compilation.getAsset(assetName);\n                    // Skip assets that have already been optimized or are verbatim copies (project assets)\n                    if (!scriptAsset || scriptAsset.info.minimized || scriptAsset.info.copied) {\n                        continue;\n                    }\n                    const { source: scriptAssetSource, name } = scriptAsset;\n                    let cacheItem;\n                    if (cache) {\n                        const eTag = cache.getLazyHashedEtag(scriptAssetSource);\n                        cacheItem = cache.getItemCache(name, eTag);\n                        const cachedOutput = await cacheItem.getPromise();\n                        if (cachedOutput) {\n                            logger.debug(`${name} restored from cache`);\n                            compilation.updateAsset(name, cachedOutput.source, (assetInfo) => ({\n                                ...assetInfo,\n                                minimized: true,\n                            }));\n                            continue;\n                        }\n                    }\n                    const { source, map } = scriptAssetSource.sourceAndMap();\n                    scriptsToOptimize.push({\n                        name: scriptAsset.name,\n                        code: typeof source === 'string' ? source : source.toString(),\n                        map,\n                        cacheItem,\n                    });\n                }\n                if (scriptsToOptimize.length === 0) {\n                    return;\n                }\n                // Ensure all replacement values are strings which is the expected type for esbuild\n                let define;\n                if (this.options.define) {\n                    define = {};\n                    for (const [key, value] of Object.entries(this.options.define)) {\n                        define[key] = String(value);\n                    }\n                }\n                // Setup the options used by all worker tasks\n                const optimizeOptions = {\n                    sourcemap: this.options.sourcemap,\n                    define,\n                    keepNames: this.options.keepNames,\n                    keepIdentifierNames: this.options.keepIdentifierNames,\n                    target: this.targets,\n                    removeLicenses: this.options.removeLicenses,\n                    advanced: this.options.advanced,\n                    // Perform a single native esbuild support check.\n                    // This removes the need for each worker to perform the check which would\n                    // otherwise require spawning a separate process per worker.\n                    alwaysUseWasm: !(await esbuild_executor_1.EsbuildExecutor.hasNativeSupport()),\n                };\n                // Sort scripts so larger scripts start first - worker pool uses a FIFO queue\n                scriptsToOptimize.sort((a, b) => a.code.length - b.code.length);\n                // Initialize the task worker pool\n                const workerPath = require.resolve('./javascript-optimizer-worker');\n                const workerPool = new piscina_1.default({\n                    filename: workerPath,\n                    maxThreads: MAX_OPTIMIZE_WORKERS,\n                });\n                // Enqueue script optimization tasks and update compilation assets as the tasks complete\n                try {\n                    const tasks = [];\n                    for (const { name, code, map, cacheItem } of scriptsToOptimize) {\n                        logger.time(`optimize asset: ${name}`);\n                        tasks.push(workerPool\n                            .run({\n                            asset: {\n                                name,\n                                code,\n                                map,\n                            },\n                            options: optimizeOptions,\n                        })\n                            .then(({ code, name, map }) => {\n                            const optimizedAsset = map\n                                ? new SourceMapSource(code, name, map)\n                                : new OriginalSource(code, name);\n                            compilation.updateAsset(name, optimizedAsset, (assetInfo) => ({\n                                ...assetInfo,\n                                minimized: true,\n                            }));\n                            logger.timeEnd(`optimize asset: ${name}`);\n                            return cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.storePromise({\n                                source: optimizedAsset,\n                            });\n                        }, (error) => {\n                            (0, webpack_diagnostics_1.addError)(compilation, `Optimization error [${name}]: ${error.stack || error.message}`);\n                        }));\n                    }\n                    await Promise.all(tasks);\n                }\n                finally {\n                    void workerPool.destroy();\n                }\n                logger.timeEnd('optimize js assets');\n            });\n        });\n    }\n}\nexports.JavaScriptOptimizerPlugin = JavaScriptOptimizerPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}