{"ast":null,"code":"var annotate = function () {\n  var args = Array.prototype.slice.call(arguments);\n  var fn = args.pop();\n  fn.$inject = args;\n  return fn;\n};\n\n// Current limitations:\n// - can't put into \"function arg\" comments\n// function /* (no parenthesis like this) */ (){}\n// function abc( /* xx (no parenthesis like this) */ a, b) {}\n//\n// Just put the comment before function or inside:\n// /* (((this is fine))) */ function(a, b) {}\n// function abc(a) { /* (((this is fine))) */}\n\nvar FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar FN_ARG = /\\/\\*([^\\*]*)\\*\\//m;\nvar parse = function (fn) {\n  if (typeof fn !== 'function') {\n    throw new Error('Can not annotate \"' + fn + '\". Expected a function!');\n  }\n  var match = fn.toString().match(FN_ARGS);\n  return match[1] && match[1].split(',').map(function (arg) {\n    match = arg.match(FN_ARG);\n    return match ? match[1].trim() : arg.trim();\n  }) || [];\n};\nexports.annotate = annotate;\nexports.parse = parse;","map":{"version":3,"names":["annotate","args","Array","prototype","slice","call","arguments","fn","pop","$inject","FN_ARGS","FN_ARG","parse","Error","match","toString","split","map","arg","trim","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/di/lib/annotation.js"],"sourcesContent":["var annotate = function() {\n  var args = Array.prototype.slice.call(arguments);\n  var fn = args.pop();\n\n  fn.$inject = args;\n\n  return fn;\n};\n\n\n// Current limitations:\n// - can't put into \"function arg\" comments\n// function /* (no parenthesis like this) */ (){}\n// function abc( /* xx (no parenthesis like this) */ a, b) {}\n//\n// Just put the comment before function or inside:\n// /* (((this is fine))) */ function(a, b) {}\n// function abc(a) { /* (((this is fine))) */}\n\nvar FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar FN_ARG = /\\/\\*([^\\*]*)\\*\\//m;\n\nvar parse = function(fn) {\n  if (typeof fn !== 'function') {\n    throw new Error('Can not annotate \"' + fn + '\". Expected a function!');\n  }\n\n  var match = fn.toString().match(FN_ARGS);\n  return match[1] && match[1].split(',').map(function(arg) {\n    match = arg.match(FN_ARG);\n    return match ? match[1].trim() : arg.trim();\n  }) || [];\n};\n\n\nexports.annotate = annotate;\nexports.parse = parse;\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,YAAW;EACxB,IAAIC,IAAI,GAAGC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACC,SAAS,CAAC;EAChD,IAAIC,EAAE,GAAGN,IAAI,CAACO,GAAG,EAAE;EAEnBD,EAAE,CAACE,OAAO,GAAGR,IAAI;EAEjB,OAAOM,EAAE;AACX,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIG,OAAO,GAAG,oCAAoC;AAClD,IAAIC,MAAM,GAAG,mBAAmB;AAEhC,IAAIC,KAAK,GAAG,UAASL,EAAE,EAAE;EACvB,IAAI,OAAOA,EAAE,KAAK,UAAU,EAAE;IAC5B,MAAM,IAAIM,KAAK,CAAC,oBAAoB,GAAGN,EAAE,GAAG,yBAAyB,CAAC;EACxE;EAEA,IAAIO,KAAK,GAAGP,EAAE,CAACQ,QAAQ,EAAE,CAACD,KAAK,CAACJ,OAAO,CAAC;EACxC,OAAOI,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,UAASC,GAAG,EAAE;IACvDJ,KAAK,GAAGI,GAAG,CAACJ,KAAK,CAACH,MAAM,CAAC;IACzB,OAAOG,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,CAACK,IAAI,EAAE,GAAGD,GAAG,CAACC,IAAI,EAAE;EAC7C,CAAC,CAAC,IAAI,EAAE;AACV,CAAC;AAGDC,OAAO,CAACpB,QAAQ,GAAGA,QAAQ;AAC3BoB,OAAO,CAACR,KAAK,GAAGA,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}