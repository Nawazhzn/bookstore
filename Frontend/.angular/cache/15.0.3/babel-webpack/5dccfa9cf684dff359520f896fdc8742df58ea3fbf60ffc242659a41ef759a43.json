{"ast":null,"code":"// This is the **logger** module for *Karma*. It uses\n// [log4js](https://github.com/nomiddlename/log4js-node) to handle and\n// configure all logging that happens inside of *Karma*.\n\n// ### Helpers and Setup\n\nlet log4js = require('log4js');\nconst helper = require('./helper');\nconst constant = require('./constants');\n\n// #### Public Functions\n\n// Setup the logger by passing in the configuration options. It needs\n// three arguments:\n//\n//     setup(logLevel, colors, appenders)\n//\n// * `logLevel`: *String* Defines the global log level.\n// * `colors`: *Boolean* Use colors in the stdout or not.\n// * `appenders`: *Object*  This will be passed as appenders to log4js\n//   to allow for fine grained configuration of log4js. For more information\n//   see https://github.com/nomiddlename/log4js-node.\n//   *Array* is also accepted for backwards compatibility.\nfunction setup(level, colors, appenders) {\n  // Turn color on/off on the console appenders with pattern layout\n  const pattern = colors ? constant.COLOR_PATTERN : constant.NO_COLOR_PATTERN;\n  if (appenders) {\n    // Convert Array to Object for backwards compatibility.\n    if (appenders.map) {\n      if (appenders.length === 0) {\n        appenders = [constant.CONSOLE_APPENDER];\n      }\n      const v1Appenders = appenders;\n      appenders = {};\n      v1Appenders.forEach(function (appender, index) {\n        if (appender.type === 'console') {\n          appenders.console = appender;\n          if (helper.isDefined(appender.layout) && appender.layout.type === 'pattern') {\n            appender.layout.pattern = pattern;\n          }\n        } else {\n          appenders[index + ''] = appender;\n        }\n        return appender;\n      });\n    }\n  } else {\n    appenders = {\n      console: constant.CONSOLE_APPENDER\n    };\n  }\n  log4js.configure({\n    appenders: appenders,\n    categories: {\n      default: {\n        appenders: Object.keys(appenders),\n        level: level\n      }\n    }\n  });\n}\n\n// Setup the logger by passing in the config object. The function sets the\n// `colors` and `logLevel` if they are defined. It takes two arguments:\n//\n//     setupFromConfig(config, appenders)\n//\n// * `config`: *Object* The configuration object.\n// * `appenders`: *Object*  This will be passed as appenders to log4js\n//   to allow for fine grained configuration of log4js. For more information\n//   see https://github.com/nomiddlename/log4js-node.\n//   *Array* is also accepted for backwards compatibility.\nfunction setupFromConfig(config, appenders) {\n  let useColors = true;\n  let logLevel = constant.LOG_INFO;\n  if (helper.isDefined(config.colors)) {\n    useColors = config.colors;\n  }\n  if (helper.isDefined(config.logLevel)) {\n    logLevel = config.logLevel;\n  }\n  setup(logLevel, useColors, appenders);\n}\nconst loggerCache = {};\n\n// Create a new logger. There are two optional arguments\n// * `name`, which defaults to `karma` and\n//   If the `name = 'socket.io'` this will create a special wrapper\n//   to be used as a logger for socket.io.\n// * `level`, which defaults to the global level.\nfunction create(name, level) {\n  name = name || 'karma';\n  let logger;\n  if (Object.prototype.hasOwnProperty.call(loggerCache, name)) {\n    logger = loggerCache[name];\n  } else {\n    logger = log4js.getLogger(name);\n    loggerCache[name] = logger;\n  }\n  if (helper.isDefined(level)) {\n    logger.setLevel(level);\n  }\n  return logger;\n}\n\n// #### Publish\n\nexports.create = create;\nexports.setup = setup;\nexports.setupFromConfig = setupFromConfig;\nexports._rebindLog4js4testing = function (mockLog4js) {\n  log4js = mockLog4js;\n};","map":{"version":3,"names":["log4js","require","helper","constant","setup","level","colors","appenders","pattern","COLOR_PATTERN","NO_COLOR_PATTERN","map","length","CONSOLE_APPENDER","v1Appenders","forEach","appender","index","type","console","isDefined","layout","configure","categories","default","Object","keys","setupFromConfig","config","useColors","logLevel","LOG_INFO","loggerCache","create","name","logger","prototype","hasOwnProperty","call","getLogger","setLevel","exports","_rebindLog4js4testing","mockLog4js"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/karma/lib/logger.js"],"sourcesContent":["// This is the **logger** module for *Karma*. It uses\n// [log4js](https://github.com/nomiddlename/log4js-node) to handle and\n// configure all logging that happens inside of *Karma*.\n\n// ### Helpers and Setup\n\nlet log4js = require('log4js')\nconst helper = require('./helper')\nconst constant = require('./constants')\n\n// #### Public Functions\n\n// Setup the logger by passing in the configuration options. It needs\n// three arguments:\n//\n//     setup(logLevel, colors, appenders)\n//\n// * `logLevel`: *String* Defines the global log level.\n// * `colors`: *Boolean* Use colors in the stdout or not.\n// * `appenders`: *Object*  This will be passed as appenders to log4js\n//   to allow for fine grained configuration of log4js. For more information\n//   see https://github.com/nomiddlename/log4js-node.\n//   *Array* is also accepted for backwards compatibility.\nfunction setup (level, colors, appenders) {\n  // Turn color on/off on the console appenders with pattern layout\n  const pattern = colors ? constant.COLOR_PATTERN : constant.NO_COLOR_PATTERN\n  if (appenders) {\n    // Convert Array to Object for backwards compatibility.\n    if (appenders.map) {\n      if (appenders.length === 0) {\n        appenders = [constant.CONSOLE_APPENDER]\n      }\n      const v1Appenders = appenders\n      appenders = {}\n      v1Appenders.forEach(function (appender, index) {\n        if (appender.type === 'console') {\n          appenders.console = appender\n          if (helper.isDefined(appender.layout) && appender.layout.type === 'pattern') {\n            appender.layout.pattern = pattern\n          }\n        } else {\n          appenders[index + ''] = appender\n        }\n        return appender\n      })\n    }\n  } else {\n    appenders = { console: constant.CONSOLE_APPENDER }\n  }\n\n  log4js.configure({\n    appenders: appenders,\n    categories: {\n      default: {\n        appenders: Object.keys(appenders),\n        level: level\n      }\n    }\n  })\n}\n\n// Setup the logger by passing in the config object. The function sets the\n// `colors` and `logLevel` if they are defined. It takes two arguments:\n//\n//     setupFromConfig(config, appenders)\n//\n// * `config`: *Object* The configuration object.\n// * `appenders`: *Object*  This will be passed as appenders to log4js\n//   to allow for fine grained configuration of log4js. For more information\n//   see https://github.com/nomiddlename/log4js-node.\n//   *Array* is also accepted for backwards compatibility.\nfunction setupFromConfig (config, appenders) {\n  let useColors = true\n  let logLevel = constant.LOG_INFO\n\n  if (helper.isDefined(config.colors)) {\n    useColors = config.colors\n  }\n\n  if (helper.isDefined(config.logLevel)) {\n    logLevel = config.logLevel\n  }\n  setup(logLevel, useColors, appenders)\n}\n\nconst loggerCache = {}\n\n// Create a new logger. There are two optional arguments\n// * `name`, which defaults to `karma` and\n//   If the `name = 'socket.io'` this will create a special wrapper\n//   to be used as a logger for socket.io.\n// * `level`, which defaults to the global level.\nfunction create (name, level) {\n  name = name || 'karma'\n  let logger\n  if (Object.prototype.hasOwnProperty.call(loggerCache, name)) {\n    logger = loggerCache[name]\n  } else {\n    logger = log4js.getLogger(name)\n    loggerCache[name] = logger\n  }\n  if (helper.isDefined(level)) {\n    logger.setLevel(level)\n  }\n  return logger\n}\n\n// #### Publish\n\nexports.create = create\nexports.setup = setup\nexports.setupFromConfig = setupFromConfig\nexports._rebindLog4js4testing = function (mockLog4js) {\n  log4js = mockLog4js\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}