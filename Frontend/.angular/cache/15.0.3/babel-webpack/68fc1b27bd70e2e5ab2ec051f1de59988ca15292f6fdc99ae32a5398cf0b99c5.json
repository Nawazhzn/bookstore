{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeAssetPatterns = exports.MissingAssetSourceRootException = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst fs_1 = require(\"fs\");\nconst path = __importStar(require(\"path\"));\nclass MissingAssetSourceRootException extends core_1.BaseException {\n  constructor(path) {\n    super(`The ${path} asset path must start with the project source root.`);\n  }\n}\nexports.MissingAssetSourceRootException = MissingAssetSourceRootException;\nfunction normalizeAssetPatterns(assetPatterns, workspaceRoot, projectRoot, projectSourceRoot) {\n  if (assetPatterns.length === 0) {\n    return [];\n  }\n  // When sourceRoot is not available, we default to ${projectRoot}/src.\n  const sourceRoot = projectSourceRoot || path.join(projectRoot, 'src');\n  const resolvedSourceRoot = path.resolve(workspaceRoot, sourceRoot);\n  return assetPatterns.map(assetPattern => {\n    // Normalize string asset patterns to objects.\n    if (typeof assetPattern === 'string') {\n      const assetPath = path.normalize(assetPattern);\n      const resolvedAssetPath = path.resolve(workspaceRoot, assetPath);\n      // Check if the string asset is within sourceRoot.\n      if (!resolvedAssetPath.startsWith(resolvedSourceRoot)) {\n        throw new MissingAssetSourceRootException(assetPattern);\n      }\n      let glob, input;\n      let isDirectory = false;\n      try {\n        isDirectory = (0, fs_1.statSync)(resolvedAssetPath).isDirectory();\n      } catch {\n        isDirectory = true;\n      }\n      if (isDirectory) {\n        // Folders get a recursive star glob.\n        glob = '**/*';\n        // Input directory is their original path.\n        input = assetPath;\n      } else {\n        // Files are their own glob.\n        glob = path.basename(assetPath);\n        // Input directory is their original dirname.\n        input = path.dirname(assetPath);\n      }\n      // Output directory for both is the relative path from source root to input.\n      const output = path.relative(resolvedSourceRoot, path.resolve(workspaceRoot, input));\n      // Return the asset pattern in object format.\n      return {\n        glob,\n        input,\n        output\n      };\n    } else {\n      // It's already an AssetPatternObject, no need to convert.\n      return assetPattern;\n    }\n  });\n}\nexports.normalizeAssetPatterns = normalizeAssetPatterns;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","normalizeAssetPatterns","MissingAssetSourceRootException","core_1","require","fs_1","path","BaseException","constructor","assetPatterns","workspaceRoot","projectRoot","projectSourceRoot","length","sourceRoot","join","resolvedSourceRoot","resolve","map","assetPattern","assetPath","normalize","resolvedAssetPath","startsWith","glob","input","isDirectory","statSync","basename","dirname","output","relative"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@angular-devkit/build-angular/src/utils/normalize-asset-patterns.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeAssetPatterns = exports.MissingAssetSourceRootException = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst fs_1 = require(\"fs\");\nconst path = __importStar(require(\"path\"));\nclass MissingAssetSourceRootException extends core_1.BaseException {\n    constructor(path) {\n        super(`The ${path} asset path must start with the project source root.`);\n    }\n}\nexports.MissingAssetSourceRootException = MissingAssetSourceRootException;\nfunction normalizeAssetPatterns(assetPatterns, workspaceRoot, projectRoot, projectSourceRoot) {\n    if (assetPatterns.length === 0) {\n        return [];\n    }\n    // When sourceRoot is not available, we default to ${projectRoot}/src.\n    const sourceRoot = projectSourceRoot || path.join(projectRoot, 'src');\n    const resolvedSourceRoot = path.resolve(workspaceRoot, sourceRoot);\n    return assetPatterns.map((assetPattern) => {\n        // Normalize string asset patterns to objects.\n        if (typeof assetPattern === 'string') {\n            const assetPath = path.normalize(assetPattern);\n            const resolvedAssetPath = path.resolve(workspaceRoot, assetPath);\n            // Check if the string asset is within sourceRoot.\n            if (!resolvedAssetPath.startsWith(resolvedSourceRoot)) {\n                throw new MissingAssetSourceRootException(assetPattern);\n            }\n            let glob, input;\n            let isDirectory = false;\n            try {\n                isDirectory = (0, fs_1.statSync)(resolvedAssetPath).isDirectory();\n            }\n            catch {\n                isDirectory = true;\n            }\n            if (isDirectory) {\n                // Folders get a recursive star glob.\n                glob = '**/*';\n                // Input directory is their original path.\n                input = assetPath;\n            }\n            else {\n                // Files are their own glob.\n                glob = path.basename(assetPath);\n                // Input directory is their original dirname.\n                input = path.dirname(assetPath);\n            }\n            // Output directory for both is the relative path from source root to input.\n            const output = path.relative(resolvedSourceRoot, path.resolve(workspaceRoot, input));\n            // Return the asset pattern in object format.\n            return { glob, input, output };\n        }\n        else {\n            // It's already an AssetPatternObject, no need to convert.\n            return assetPattern;\n        }\n    });\n}\nexports.normalizeAssetPatterns = normalizeAssetPatterns;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}