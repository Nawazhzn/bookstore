{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.augmentHostWithCaching = exports.augmentProgramWithVersioning = exports.augmentHostWithVersioning = exports.augmentHostWithSubstitutions = exports.augmentHostWithReplacements = exports.augmentHostWithNgcc = exports.augmentHostWithDependencyCollection = exports.augmentHostWithResources = void 0;\nconst crypto_1 = require(\"crypto\");\nconst path = __importStar(require(\"path\"));\nconst ts = __importStar(require(\"typescript\"));\nconst paths_1 = require(\"./paths\");\nfunction augmentHostWithResources(host, resourceLoader, options = {}) {\n  const resourceHost = host;\n  resourceHost.readResource = function (fileName) {\n    const filePath = (0, paths_1.normalizePath)(fileName);\n    if (options.directTemplateLoading && (filePath.endsWith('.html') || filePath.endsWith('.svg'))) {\n      const content = this.readFile(filePath);\n      if (content === undefined) {\n        throw new Error('Unable to locate component resource: ' + fileName);\n      }\n      resourceLoader.setAffectedResources(filePath, [filePath]);\n      return content;\n    } else {\n      return resourceLoader.get(filePath);\n    }\n  };\n  resourceHost.resourceNameToFileName = function (resourceName, containingFile) {\n    return path.join(path.dirname(containingFile), resourceName);\n  };\n  resourceHost.getModifiedResourceFiles = function () {\n    return resourceLoader.getModifiedResourceFiles();\n  };\n  resourceHost.transformResource = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (data, context) {\n      // Only inline style resources are supported currently\n      if (context.resourceFile || context.type !== 'style') {\n        return null;\n      }\n      if (options.inlineStyleFileExtension) {\n        const content = yield resourceLoader.process(data, options.inlineStyleFileExtension, context.type, context.containingFile);\n        return {\n          content\n        };\n      }\n      return null;\n    });\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\nexports.augmentHostWithResources = augmentHostWithResources;\nfunction augmentResolveModuleNames(host, resolvedModuleModifier, moduleResolutionCache) {\n  if (host.resolveModuleNames) {\n    const baseResolveModuleNames = host.resolveModuleNames;\n    host.resolveModuleNames = function (moduleNames, ...parameters) {\n      return moduleNames.map(name => {\n        const result = baseResolveModuleNames.call(host, [name], ...parameters);\n        return resolvedModuleModifier(result[0], name);\n      });\n    };\n  } else {\n    host.resolveModuleNames = function (moduleNames, containingFile, _reusedNames, redirectedReference, options) {\n      return moduleNames.map(name => {\n        const result = ts.resolveModuleName(name, containingFile, options, host, moduleResolutionCache, redirectedReference).resolvedModule;\n        return resolvedModuleModifier(result, name);\n      });\n    };\n  }\n}\n/**\n * Augments a TypeScript Compiler Host's resolveModuleNames function to collect dependencies\n * of the containing file passed to the resolveModuleNames function. This process assumes\n * that consumers of the Compiler Host will only call resolveModuleNames with modules that are\n * actually present in a containing file.\n * This process is a workaround for gathering a TypeScript SourceFile's dependencies as there\n * is no currently exposed public method to do so. A BuilderProgram does have a `getAllDependencies`\n * function. However, that function returns all transitive dependencies as well which can cause\n * excessive Webpack rebuilds.\n *\n * @param host The CompilerHost to augment.\n * @param dependencies A Map which will be used to store file dependencies.\n * @param moduleResolutionCache An optional resolution cache to use when the host resolves a module.\n */\nfunction augmentHostWithDependencyCollection(host, dependencies, moduleResolutionCache) {\n  if (host.resolveModuleNames) {\n    const baseResolveModuleNames = host.resolveModuleNames;\n    host.resolveModuleNames = function (moduleNames, containingFile, ...parameters) {\n      const results = baseResolveModuleNames.call(host, moduleNames, containingFile, ...parameters);\n      const containingFilePath = (0, paths_1.normalizePath)(containingFile);\n      for (const result of results) {\n        if (result) {\n          const containingFileDependencies = dependencies.get(containingFilePath);\n          if (containingFileDependencies) {\n            containingFileDependencies.add(result.resolvedFileName);\n          } else {\n            dependencies.set(containingFilePath, new Set([result.resolvedFileName]));\n          }\n        }\n      }\n      return results;\n    };\n  } else {\n    host.resolveModuleNames = function (moduleNames, containingFile, _reusedNames, redirectedReference, options) {\n      return moduleNames.map(name => {\n        const result = ts.resolveModuleName(name, containingFile, options, host, moduleResolutionCache, redirectedReference).resolvedModule;\n        if (result) {\n          const containingFilePath = (0, paths_1.normalizePath)(containingFile);\n          const containingFileDependencies = dependencies.get(containingFilePath);\n          if (containingFileDependencies) {\n            containingFileDependencies.add(result.resolvedFileName);\n          } else {\n            dependencies.set(containingFilePath, new Set([result.resolvedFileName]));\n          }\n        }\n        return result;\n      });\n    };\n  }\n}\nexports.augmentHostWithDependencyCollection = augmentHostWithDependencyCollection;\nfunction augmentHostWithNgcc(host, ngcc, moduleResolutionCache) {\n  augmentResolveModuleNames(host, (resolvedModule, moduleName) => {\n    if (resolvedModule && ngcc) {\n      ngcc.processModule(moduleName, resolvedModule);\n    }\n    return resolvedModule;\n  }, moduleResolutionCache);\n  if (host.resolveTypeReferenceDirectives) {\n    const baseResolveTypeReferenceDirectives = host.resolveTypeReferenceDirectives;\n    host.resolveTypeReferenceDirectives = function (names, ...parameters) {\n      return names.map(name => {\n        const fileName = typeof name === 'string' ? name : name.fileName;\n        const result = baseResolveTypeReferenceDirectives.call(host, [fileName], ...parameters);\n        if (result[0] && ngcc) {\n          ngcc.processModule(fileName, result[0]);\n        }\n        return result[0];\n      });\n    };\n  } else {\n    host.resolveTypeReferenceDirectives = function (moduleNames, containingFile, redirectedReference, options) {\n      return moduleNames.map(name => {\n        const fileName = typeof name === 'string' ? name : name.fileName;\n        const result = ts.resolveTypeReferenceDirective(fileName, containingFile, options, host, redirectedReference).resolvedTypeReferenceDirective;\n        if (result && ngcc) {\n          ngcc.processModule(fileName, result);\n        }\n        return result;\n      });\n    };\n  }\n}\nexports.augmentHostWithNgcc = augmentHostWithNgcc;\nfunction augmentHostWithReplacements(host, replacements, moduleResolutionCache) {\n  if (Object.keys(replacements).length === 0) {\n    return;\n  }\n  const normalizedReplacements = {};\n  for (const [key, value] of Object.entries(replacements)) {\n    normalizedReplacements[(0, paths_1.normalizePath)(key)] = (0, paths_1.normalizePath)(value);\n  }\n  const tryReplace = resolvedModule => {\n    const replacement = resolvedModule && normalizedReplacements[resolvedModule.resolvedFileName];\n    if (replacement) {\n      return {\n        resolvedFileName: replacement,\n        isExternalLibraryImport: /[/\\\\]node_modules[/\\\\]/.test(replacement)\n      };\n    } else {\n      return resolvedModule;\n    }\n  };\n  augmentResolveModuleNames(host, tryReplace, moduleResolutionCache);\n}\nexports.augmentHostWithReplacements = augmentHostWithReplacements;\nfunction augmentHostWithSubstitutions(host, substitutions) {\n  const regexSubstitutions = [];\n  for (const [key, value] of Object.entries(substitutions)) {\n    regexSubstitutions.push([new RegExp(`\\\\b${key}\\\\b`, 'g'), value]);\n  }\n  if (regexSubstitutions.length === 0) {\n    return;\n  }\n  const baseReadFile = host.readFile;\n  host.readFile = function (...parameters) {\n    let file = baseReadFile.call(host, ...parameters);\n    if (file) {\n      for (const entry of regexSubstitutions) {\n        file = file.replace(entry[0], entry[1]);\n      }\n    }\n    return file;\n  };\n}\nexports.augmentHostWithSubstitutions = augmentHostWithSubstitutions;\nfunction augmentHostWithVersioning(host) {\n  const baseGetSourceFile = host.getSourceFile;\n  host.getSourceFile = function (...parameters) {\n    const file = baseGetSourceFile.call(host, ...parameters);\n    if (file && file.version === undefined) {\n      file.version = (0, crypto_1.createHash)('sha256').update(file.text).digest('hex');\n    }\n    return file;\n  };\n}\nexports.augmentHostWithVersioning = augmentHostWithVersioning;\nfunction augmentProgramWithVersioning(program) {\n  const baseGetSourceFiles = program.getSourceFiles;\n  program.getSourceFiles = function (...parameters) {\n    const files = baseGetSourceFiles(...parameters);\n    for (const file of files) {\n      if (file.version === undefined) {\n        file.version = (0, crypto_1.createHash)('sha256').update(file.text).digest('hex');\n      }\n    }\n    return files;\n  };\n}\nexports.augmentProgramWithVersioning = augmentProgramWithVersioning;\nfunction augmentHostWithCaching(host, cache) {\n  const baseGetSourceFile = host.getSourceFile;\n  host.getSourceFile = function (fileName, languageVersion, onError, shouldCreateNewSourceFile, ...parameters) {\n    if (!shouldCreateNewSourceFile && cache.has(fileName)) {\n      return cache.get(fileName);\n    }\n    const file = baseGetSourceFile.call(host, fileName, languageVersion, onError, true, ...parameters);\n    if (file) {\n      cache.set(fileName, file);\n    }\n    return file;\n  };\n}\nexports.augmentHostWithCaching = augmentHostWithCaching;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","augmentHostWithCaching","augmentProgramWithVersioning","augmentHostWithVersioning","augmentHostWithSubstitutions","augmentHostWithReplacements","augmentHostWithNgcc","augmentHostWithDependencyCollection","augmentHostWithResources","crypto_1","require","path","ts","paths_1","host","resourceLoader","options","resourceHost","readResource","fileName","filePath","normalizePath","directTemplateLoading","endsWith","content","readFile","Error","setAffectedResources","resourceNameToFileName","resourceName","containingFile","join","dirname","getModifiedResourceFiles","transformResource","data","context","resourceFile","type","inlineStyleFileExtension","process","augmentResolveModuleNames","resolvedModuleModifier","moduleResolutionCache","resolveModuleNames","baseResolveModuleNames","moduleNames","parameters","map","name","_reusedNames","redirectedReference","resolveModuleName","resolvedModule","dependencies","results","containingFilePath","containingFileDependencies","add","resolvedFileName","set","Set","ngcc","moduleName","processModule","resolveTypeReferenceDirectives","baseResolveTypeReferenceDirectives","names","resolveTypeReferenceDirective","resolvedTypeReferenceDirective","replacements","keys","length","normalizedReplacements","key","entries","tryReplace","replacement","isExternalLibraryImport","test","substitutions","regexSubstitutions","push","RegExp","baseReadFile","file","entry","replace","baseGetSourceFile","getSourceFile","version","createHash","update","text","digest","program","baseGetSourceFiles","getSourceFiles","files","cache","languageVersion","onError","shouldCreateNewSourceFile","has"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@ngtools/webpack/src/ivy/host.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.augmentHostWithCaching = exports.augmentProgramWithVersioning = exports.augmentHostWithVersioning = exports.augmentHostWithSubstitutions = exports.augmentHostWithReplacements = exports.augmentHostWithNgcc = exports.augmentHostWithDependencyCollection = exports.augmentHostWithResources = void 0;\nconst crypto_1 = require(\"crypto\");\nconst path = __importStar(require(\"path\"));\nconst ts = __importStar(require(\"typescript\"));\nconst paths_1 = require(\"./paths\");\nfunction augmentHostWithResources(host, resourceLoader, options = {}) {\n    const resourceHost = host;\n    resourceHost.readResource = function (fileName) {\n        const filePath = (0, paths_1.normalizePath)(fileName);\n        if (options.directTemplateLoading &&\n            (filePath.endsWith('.html') || filePath.endsWith('.svg'))) {\n            const content = this.readFile(filePath);\n            if (content === undefined) {\n                throw new Error('Unable to locate component resource: ' + fileName);\n            }\n            resourceLoader.setAffectedResources(filePath, [filePath]);\n            return content;\n        }\n        else {\n            return resourceLoader.get(filePath);\n        }\n    };\n    resourceHost.resourceNameToFileName = function (resourceName, containingFile) {\n        return path.join(path.dirname(containingFile), resourceName);\n    };\n    resourceHost.getModifiedResourceFiles = function () {\n        return resourceLoader.getModifiedResourceFiles();\n    };\n    resourceHost.transformResource = async function (data, context) {\n        // Only inline style resources are supported currently\n        if (context.resourceFile || context.type !== 'style') {\n            return null;\n        }\n        if (options.inlineStyleFileExtension) {\n            const content = await resourceLoader.process(data, options.inlineStyleFileExtension, context.type, context.containingFile);\n            return { content };\n        }\n        return null;\n    };\n}\nexports.augmentHostWithResources = augmentHostWithResources;\nfunction augmentResolveModuleNames(host, resolvedModuleModifier, moduleResolutionCache) {\n    if (host.resolveModuleNames) {\n        const baseResolveModuleNames = host.resolveModuleNames;\n        host.resolveModuleNames = function (moduleNames, ...parameters) {\n            return moduleNames.map((name) => {\n                const result = baseResolveModuleNames.call(host, [name], ...parameters);\n                return resolvedModuleModifier(result[0], name);\n            });\n        };\n    }\n    else {\n        host.resolveModuleNames = function (moduleNames, containingFile, _reusedNames, redirectedReference, options) {\n            return moduleNames.map((name) => {\n                const result = ts.resolveModuleName(name, containingFile, options, host, moduleResolutionCache, redirectedReference).resolvedModule;\n                return resolvedModuleModifier(result, name);\n            });\n        };\n    }\n}\n/**\n * Augments a TypeScript Compiler Host's resolveModuleNames function to collect dependencies\n * of the containing file passed to the resolveModuleNames function. This process assumes\n * that consumers of the Compiler Host will only call resolveModuleNames with modules that are\n * actually present in a containing file.\n * This process is a workaround for gathering a TypeScript SourceFile's dependencies as there\n * is no currently exposed public method to do so. A BuilderProgram does have a `getAllDependencies`\n * function. However, that function returns all transitive dependencies as well which can cause\n * excessive Webpack rebuilds.\n *\n * @param host The CompilerHost to augment.\n * @param dependencies A Map which will be used to store file dependencies.\n * @param moduleResolutionCache An optional resolution cache to use when the host resolves a module.\n */\nfunction augmentHostWithDependencyCollection(host, dependencies, moduleResolutionCache) {\n    if (host.resolveModuleNames) {\n        const baseResolveModuleNames = host.resolveModuleNames;\n        host.resolveModuleNames = function (moduleNames, containingFile, ...parameters) {\n            const results = baseResolveModuleNames.call(host, moduleNames, containingFile, ...parameters);\n            const containingFilePath = (0, paths_1.normalizePath)(containingFile);\n            for (const result of results) {\n                if (result) {\n                    const containingFileDependencies = dependencies.get(containingFilePath);\n                    if (containingFileDependencies) {\n                        containingFileDependencies.add(result.resolvedFileName);\n                    }\n                    else {\n                        dependencies.set(containingFilePath, new Set([result.resolvedFileName]));\n                    }\n                }\n            }\n            return results;\n        };\n    }\n    else {\n        host.resolveModuleNames = function (moduleNames, containingFile, _reusedNames, redirectedReference, options) {\n            return moduleNames.map((name) => {\n                const result = ts.resolveModuleName(name, containingFile, options, host, moduleResolutionCache, redirectedReference).resolvedModule;\n                if (result) {\n                    const containingFilePath = (0, paths_1.normalizePath)(containingFile);\n                    const containingFileDependencies = dependencies.get(containingFilePath);\n                    if (containingFileDependencies) {\n                        containingFileDependencies.add(result.resolvedFileName);\n                    }\n                    else {\n                        dependencies.set(containingFilePath, new Set([result.resolvedFileName]));\n                    }\n                }\n                return result;\n            });\n        };\n    }\n}\nexports.augmentHostWithDependencyCollection = augmentHostWithDependencyCollection;\nfunction augmentHostWithNgcc(host, ngcc, moduleResolutionCache) {\n    augmentResolveModuleNames(host, (resolvedModule, moduleName) => {\n        if (resolvedModule && ngcc) {\n            ngcc.processModule(moduleName, resolvedModule);\n        }\n        return resolvedModule;\n    }, moduleResolutionCache);\n    if (host.resolveTypeReferenceDirectives) {\n        const baseResolveTypeReferenceDirectives = host.resolveTypeReferenceDirectives;\n        host.resolveTypeReferenceDirectives = function (names, ...parameters) {\n            return names.map((name) => {\n                const fileName = typeof name === 'string' ? name : name.fileName;\n                const result = baseResolveTypeReferenceDirectives.call(host, [fileName], ...parameters);\n                if (result[0] && ngcc) {\n                    ngcc.processModule(fileName, result[0]);\n                }\n                return result[0];\n            });\n        };\n    }\n    else {\n        host.resolveTypeReferenceDirectives = function (moduleNames, containingFile, redirectedReference, options) {\n            return moduleNames.map((name) => {\n                const fileName = typeof name === 'string' ? name : name.fileName;\n                const result = ts.resolveTypeReferenceDirective(fileName, containingFile, options, host, redirectedReference).resolvedTypeReferenceDirective;\n                if (result && ngcc) {\n                    ngcc.processModule(fileName, result);\n                }\n                return result;\n            });\n        };\n    }\n}\nexports.augmentHostWithNgcc = augmentHostWithNgcc;\nfunction augmentHostWithReplacements(host, replacements, moduleResolutionCache) {\n    if (Object.keys(replacements).length === 0) {\n        return;\n    }\n    const normalizedReplacements = {};\n    for (const [key, value] of Object.entries(replacements)) {\n        normalizedReplacements[(0, paths_1.normalizePath)(key)] = (0, paths_1.normalizePath)(value);\n    }\n    const tryReplace = (resolvedModule) => {\n        const replacement = resolvedModule && normalizedReplacements[resolvedModule.resolvedFileName];\n        if (replacement) {\n            return {\n                resolvedFileName: replacement,\n                isExternalLibraryImport: /[/\\\\]node_modules[/\\\\]/.test(replacement),\n            };\n        }\n        else {\n            return resolvedModule;\n        }\n    };\n    augmentResolveModuleNames(host, tryReplace, moduleResolutionCache);\n}\nexports.augmentHostWithReplacements = augmentHostWithReplacements;\nfunction augmentHostWithSubstitutions(host, substitutions) {\n    const regexSubstitutions = [];\n    for (const [key, value] of Object.entries(substitutions)) {\n        regexSubstitutions.push([new RegExp(`\\\\b${key}\\\\b`, 'g'), value]);\n    }\n    if (regexSubstitutions.length === 0) {\n        return;\n    }\n    const baseReadFile = host.readFile;\n    host.readFile = function (...parameters) {\n        let file = baseReadFile.call(host, ...parameters);\n        if (file) {\n            for (const entry of regexSubstitutions) {\n                file = file.replace(entry[0], entry[1]);\n            }\n        }\n        return file;\n    };\n}\nexports.augmentHostWithSubstitutions = augmentHostWithSubstitutions;\nfunction augmentHostWithVersioning(host) {\n    const baseGetSourceFile = host.getSourceFile;\n    host.getSourceFile = function (...parameters) {\n        const file = baseGetSourceFile.call(host, ...parameters);\n        if (file && file.version === undefined) {\n            file.version = (0, crypto_1.createHash)('sha256').update(file.text).digest('hex');\n        }\n        return file;\n    };\n}\nexports.augmentHostWithVersioning = augmentHostWithVersioning;\nfunction augmentProgramWithVersioning(program) {\n    const baseGetSourceFiles = program.getSourceFiles;\n    program.getSourceFiles = function (...parameters) {\n        const files = baseGetSourceFiles(...parameters);\n        for (const file of files) {\n            if (file.version === undefined) {\n                file.version = (0, crypto_1.createHash)('sha256').update(file.text).digest('hex');\n            }\n        }\n        return files;\n    };\n}\nexports.augmentProgramWithVersioning = augmentProgramWithVersioning;\nfunction augmentHostWithCaching(host, cache) {\n    const baseGetSourceFile = host.getSourceFile;\n    host.getSourceFile = function (fileName, languageVersion, onError, shouldCreateNewSourceFile, ...parameters) {\n        if (!shouldCreateNewSourceFile && cache.has(fileName)) {\n            return cache.get(fileName);\n        }\n        const file = baseGetSourceFile.call(host, fileName, languageVersion, onError, true, ...parameters);\n        if (file) {\n            cache.set(fileName, file);\n        }\n        return file;\n    };\n}\nexports.augmentHostWithCaching = augmentHostWithCaching;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}