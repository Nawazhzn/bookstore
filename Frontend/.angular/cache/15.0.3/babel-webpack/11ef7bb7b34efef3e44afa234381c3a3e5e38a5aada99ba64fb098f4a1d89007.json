{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoveHashPlugin = void 0;\nclass RemoveHashPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n  apply(compiler) {\n    compiler.hooks.compilation.tap('remove-hash-plugin', compilation => {\n      const assetPath = (path, data) => {\n        var _a;\n        const chunkName = (_a = data.chunk) === null || _a === void 0 ? void 0 : _a.name;\n        const {\n          chunkNames,\n          hashFormat\n        } = this.options;\n        if (chunkName && (chunkNames === null || chunkNames === void 0 ? void 0 : chunkNames.includes(chunkName))) {\n          // Replace hash formats with empty strings.\n          return path.replace(hashFormat.chunk, '').replace(hashFormat.extract, '');\n        }\n        return path;\n      };\n      compilation.hooks.assetPath.tap('remove-hash-plugin', assetPath);\n    });\n  }\n}\nexports.RemoveHashPlugin = RemoveHashPlugin;","map":{"version":3,"names":["Object","defineProperty","exports","value","RemoveHashPlugin","constructor","options","apply","compiler","hooks","compilation","tap","assetPath","path","data","_a","chunkName","chunk","name","chunkNames","hashFormat","includes","replace","extract"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@angular-devkit/build-angular/src/webpack/plugins/remove-hash-plugin.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RemoveHashPlugin = void 0;\nclass RemoveHashPlugin {\n    constructor(options) {\n        this.options = options;\n    }\n    apply(compiler) {\n        compiler.hooks.compilation.tap('remove-hash-plugin', (compilation) => {\n            const assetPath = (path, data) => {\n                var _a;\n                const chunkName = (_a = data.chunk) === null || _a === void 0 ? void 0 : _a.name;\n                const { chunkNames, hashFormat } = this.options;\n                if (chunkName && (chunkNames === null || chunkNames === void 0 ? void 0 : chunkNames.includes(chunkName))) {\n                    // Replace hash formats with empty strings.\n                    return path.replace(hashFormat.chunk, '').replace(hashFormat.extract, '');\n                }\n                return path;\n            };\n            compilation.hooks.assetPath.tap('remove-hash-plugin', assetPath);\n        });\n    }\n}\nexports.RemoveHashPlugin = RemoveHashPlugin;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAG,KAAK,CAAC;AACjC,MAAMA,gBAAgB,CAAC;EACnBC,WAAW,CAACC,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACAC,KAAK,CAACC,QAAQ,EAAE;IACZA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAAC,oBAAoB,EAAGD,WAAW,IAAK;MAClE,MAAME,SAAS,GAAG,CAACC,IAAI,EAAEC,IAAI,KAAK;QAC9B,IAAIC,EAAE;QACN,MAAMC,SAAS,GAAG,CAACD,EAAE,GAAGD,IAAI,CAACG,KAAK,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACG,IAAI;QAChF,MAAM;UAAEC,UAAU;UAAEC;QAAW,CAAC,GAAG,IAAI,CAACd,OAAO;QAC/C,IAAIU,SAAS,KAAKG,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACE,QAAQ,CAACL,SAAS,CAAC,CAAC,EAAE;UACvG;UACA,OAAOH,IAAI,CAACS,OAAO,CAACF,UAAU,CAACH,KAAK,EAAE,EAAE,CAAC,CAACK,OAAO,CAACF,UAAU,CAACG,OAAO,EAAE,EAAE,CAAC;QAC7E;QACA,OAAOV,IAAI;MACf,CAAC;MACDH,WAAW,CAACD,KAAK,CAACG,SAAS,CAACD,GAAG,CAAC,oBAAoB,EAAEC,SAAS,CAAC;IACpE,CAAC,CAAC;EACN;AACJ;AACAV,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}