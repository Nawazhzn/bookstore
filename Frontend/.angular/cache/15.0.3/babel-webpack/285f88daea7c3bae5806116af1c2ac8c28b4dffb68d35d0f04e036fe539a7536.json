{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SassLegacyWorkerImplementation = void 0;\nconst path_1 = require(\"path\");\nconst worker_threads_1 = require(\"worker_threads\");\nconst environment_options_1 = require(\"../utils/environment-options\");\n/**\n * The maximum number of Workers that will be created to execute render requests.\n */\nconst MAX_RENDER_WORKERS = environment_options_1.maxWorkers;\n/**\n * A Sass renderer implementation that provides an interface that can be used by Webpack's\n * `sass-loader`. The implementation uses a Worker thread to perform the Sass rendering\n * with the `dart-sass` package.  The `dart-sass` synchronous render function is used within\n * the worker which can be up to two times faster than the asynchronous variant.\n */\nclass SassLegacyWorkerImplementation {\n  constructor() {\n    this.workers = [];\n    this.availableWorkers = [];\n    this.requests = new Map();\n    this.workerPath = (0, path_1.join)(__dirname, './worker-legacy.js');\n    this.idCounter = 1;\n    this.nextWorkerIndex = 0;\n  }\n  /**\n   * Provides information about the Sass implementation.\n   * This mimics enough of the `dart-sass` value to be used with the `sass-loader`.\n   */\n  get info() {\n    return 'dart-sass\\tworker';\n  }\n  /**\n   * The synchronous render function is not used by the `sass-loader`.\n   */\n  renderSync() {\n    throw new Error('Sass renderSync is not supported.');\n  }\n  /**\n   * Asynchronously request a Sass stylesheet to be renderered.\n   *\n   * @param options The `dart-sass` options to use when rendering the stylesheet.\n   * @param callback The function to execute when the rendering is complete.\n   */\n  render(options, callback) {\n    // The `functions`, `logger` and `importer` options are JavaScript functions that cannot be transferred.\n    // If any additional function options are added in the future, they must be excluded as well.\n    const {\n      functions,\n      importer,\n      logger,\n      ...serializableOptions\n    } = options;\n    // The CLI's configuration does not use or expose the ability to defined custom Sass functions\n    if (functions && Object.keys(functions).length > 0) {\n      throw new Error('Sass custom functions are not supported.');\n    }\n    let workerIndex = this.availableWorkers.pop();\n    if (workerIndex === undefined) {\n      if (this.workers.length < MAX_RENDER_WORKERS) {\n        workerIndex = this.workers.length;\n        this.workers.push(this.createWorker());\n      } else {\n        workerIndex = this.nextWorkerIndex++;\n        if (this.nextWorkerIndex >= this.workers.length) {\n          this.nextWorkerIndex = 0;\n        }\n      }\n    }\n    const request = this.createRequest(workerIndex, callback, importer);\n    this.requests.set(request.id, request);\n    this.workers[workerIndex].postMessage({\n      id: request.id,\n      hasImporter: !!importer,\n      options: serializableOptions\n    });\n  }\n  /**\n   * Shutdown the Sass render worker.\n   * Executing this method will stop any pending render requests.\n   */\n  close() {\n    for (const worker of this.workers) {\n      try {\n        void worker.terminate();\n      } catch {}\n    }\n    this.requests.clear();\n  }\n  createWorker() {\n    const {\n      port1: mainImporterPort,\n      port2: workerImporterPort\n    } = new worker_threads_1.MessageChannel();\n    const importerSignal = new Int32Array(new SharedArrayBuffer(4));\n    const worker = new worker_threads_1.Worker(this.workerPath, {\n      workerData: {\n        workerImporterPort,\n        importerSignal\n      },\n      transferList: [workerImporterPort]\n    });\n    worker.on('message', response => {\n      const request = this.requests.get(response.id);\n      if (!request) {\n        return;\n      }\n      this.requests.delete(response.id);\n      this.availableWorkers.push(request.workerIndex);\n      if (response.result) {\n        // The results are expected to be Node.js `Buffer` objects but will each be transferred as\n        // a Uint8Array that does not have the expected `toString` behavior of a `Buffer`.\n        const {\n          css,\n          map,\n          stats\n        } = response.result;\n        const result = {\n          // This `Buffer.from` override will use the memory directly and avoid making a copy\n          css: Buffer.from(css.buffer, css.byteOffset, css.byteLength),\n          stats\n        };\n        if (map) {\n          // This `Buffer.from` override will use the memory directly and avoid making a copy\n          result.map = Buffer.from(map.buffer, map.byteOffset, map.byteLength);\n        }\n        request.callback(undefined, result);\n      } else {\n        request.callback(response.error);\n      }\n    });\n    mainImporterPort.on('message', ({\n      id,\n      url,\n      prev,\n      fromImport\n    }) => {\n      const request = this.requests.get(id);\n      if (!(request === null || request === void 0 ? void 0 : request.importers)) {\n        mainImporterPort.postMessage(null);\n        Atomics.store(importerSignal, 0, 1);\n        Atomics.notify(importerSignal, 0);\n        return;\n      }\n      this.processImporters(request.importers, url, prev, fromImport).then(result => {\n        mainImporterPort.postMessage(result);\n      }).catch(error => {\n        mainImporterPort.postMessage(error);\n      }).finally(() => {\n        Atomics.store(importerSignal, 0, 1);\n        Atomics.notify(importerSignal, 0);\n      });\n    });\n    mainImporterPort.unref();\n    return worker;\n  }\n  processImporters(importers, url, prev, fromImport) {\n    return _asyncToGenerator(function* () {\n      let result = null;\n      for (const importer of importers) {\n        result = yield new Promise(resolve => {\n          // Importers can be both sync and async\n          const innerResult = importer.call({\n            fromImport\n          }, url, prev, resolve);\n          if (innerResult !== undefined) {\n            resolve(innerResult);\n          }\n        });\n        if (result) {\n          break;\n        }\n      }\n      return result;\n    })();\n  }\n  createRequest(workerIndex, callback, importer) {\n    return {\n      id: this.idCounter++,\n      workerIndex,\n      callback,\n      importers: !importer || Array.isArray(importer) ? importer : [importer]\n    };\n  }\n}\nexports.SassLegacyWorkerImplementation = SassLegacyWorkerImplementation;","map":{"version":3,"names":["Object","defineProperty","exports","value","SassLegacyWorkerImplementation","path_1","require","worker_threads_1","environment_options_1","MAX_RENDER_WORKERS","maxWorkers","constructor","workers","availableWorkers","requests","Map","workerPath","join","__dirname","idCounter","nextWorkerIndex","info","renderSync","Error","render","options","callback","functions","importer","logger","serializableOptions","keys","length","workerIndex","pop","undefined","push","createWorker","request","createRequest","set","id","postMessage","hasImporter","close","worker","terminate","clear","port1","mainImporterPort","port2","workerImporterPort","MessageChannel","importerSignal","Int32Array","SharedArrayBuffer","Worker","workerData","transferList","on","response","get","delete","result","css","map","stats","Buffer","from","buffer","byteOffset","byteLength","error","url","prev","fromImport","importers","Atomics","store","notify","processImporters","then","catch","finally","unref","Promise","resolve","innerResult","call","Array","isArray"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@angular-devkit/build-angular/src/sass/sass-service-legacy.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SassLegacyWorkerImplementation = void 0;\nconst path_1 = require(\"path\");\nconst worker_threads_1 = require(\"worker_threads\");\nconst environment_options_1 = require(\"../utils/environment-options\");\n/**\n * The maximum number of Workers that will be created to execute render requests.\n */\nconst MAX_RENDER_WORKERS = environment_options_1.maxWorkers;\n/**\n * A Sass renderer implementation that provides an interface that can be used by Webpack's\n * `sass-loader`. The implementation uses a Worker thread to perform the Sass rendering\n * with the `dart-sass` package.  The `dart-sass` synchronous render function is used within\n * the worker which can be up to two times faster than the asynchronous variant.\n */\nclass SassLegacyWorkerImplementation {\n    constructor() {\n        this.workers = [];\n        this.availableWorkers = [];\n        this.requests = new Map();\n        this.workerPath = (0, path_1.join)(__dirname, './worker-legacy.js');\n        this.idCounter = 1;\n        this.nextWorkerIndex = 0;\n    }\n    /**\n     * Provides information about the Sass implementation.\n     * This mimics enough of the `dart-sass` value to be used with the `sass-loader`.\n     */\n    get info() {\n        return 'dart-sass\\tworker';\n    }\n    /**\n     * The synchronous render function is not used by the `sass-loader`.\n     */\n    renderSync() {\n        throw new Error('Sass renderSync is not supported.');\n    }\n    /**\n     * Asynchronously request a Sass stylesheet to be renderered.\n     *\n     * @param options The `dart-sass` options to use when rendering the stylesheet.\n     * @param callback The function to execute when the rendering is complete.\n     */\n    render(options, callback) {\n        // The `functions`, `logger` and `importer` options are JavaScript functions that cannot be transferred.\n        // If any additional function options are added in the future, they must be excluded as well.\n        const { functions, importer, logger, ...serializableOptions } = options;\n        // The CLI's configuration does not use or expose the ability to defined custom Sass functions\n        if (functions && Object.keys(functions).length > 0) {\n            throw new Error('Sass custom functions are not supported.');\n        }\n        let workerIndex = this.availableWorkers.pop();\n        if (workerIndex === undefined) {\n            if (this.workers.length < MAX_RENDER_WORKERS) {\n                workerIndex = this.workers.length;\n                this.workers.push(this.createWorker());\n            }\n            else {\n                workerIndex = this.nextWorkerIndex++;\n                if (this.nextWorkerIndex >= this.workers.length) {\n                    this.nextWorkerIndex = 0;\n                }\n            }\n        }\n        const request = this.createRequest(workerIndex, callback, importer);\n        this.requests.set(request.id, request);\n        this.workers[workerIndex].postMessage({\n            id: request.id,\n            hasImporter: !!importer,\n            options: serializableOptions,\n        });\n    }\n    /**\n     * Shutdown the Sass render worker.\n     * Executing this method will stop any pending render requests.\n     */\n    close() {\n        for (const worker of this.workers) {\n            try {\n                void worker.terminate();\n            }\n            catch { }\n        }\n        this.requests.clear();\n    }\n    createWorker() {\n        const { port1: mainImporterPort, port2: workerImporterPort } = new worker_threads_1.MessageChannel();\n        const importerSignal = new Int32Array(new SharedArrayBuffer(4));\n        const worker = new worker_threads_1.Worker(this.workerPath, {\n            workerData: { workerImporterPort, importerSignal },\n            transferList: [workerImporterPort],\n        });\n        worker.on('message', (response) => {\n            const request = this.requests.get(response.id);\n            if (!request) {\n                return;\n            }\n            this.requests.delete(response.id);\n            this.availableWorkers.push(request.workerIndex);\n            if (response.result) {\n                // The results are expected to be Node.js `Buffer` objects but will each be transferred as\n                // a Uint8Array that does not have the expected `toString` behavior of a `Buffer`.\n                const { css, map, stats } = response.result;\n                const result = {\n                    // This `Buffer.from` override will use the memory directly and avoid making a copy\n                    css: Buffer.from(css.buffer, css.byteOffset, css.byteLength),\n                    stats,\n                };\n                if (map) {\n                    // This `Buffer.from` override will use the memory directly and avoid making a copy\n                    result.map = Buffer.from(map.buffer, map.byteOffset, map.byteLength);\n                }\n                request.callback(undefined, result);\n            }\n            else {\n                request.callback(response.error);\n            }\n        });\n        mainImporterPort.on('message', ({ id, url, prev, fromImport, }) => {\n            const request = this.requests.get(id);\n            if (!(request === null || request === void 0 ? void 0 : request.importers)) {\n                mainImporterPort.postMessage(null);\n                Atomics.store(importerSignal, 0, 1);\n                Atomics.notify(importerSignal, 0);\n                return;\n            }\n            this.processImporters(request.importers, url, prev, fromImport)\n                .then((result) => {\n                mainImporterPort.postMessage(result);\n            })\n                .catch((error) => {\n                mainImporterPort.postMessage(error);\n            })\n                .finally(() => {\n                Atomics.store(importerSignal, 0, 1);\n                Atomics.notify(importerSignal, 0);\n            });\n        });\n        mainImporterPort.unref();\n        return worker;\n    }\n    async processImporters(importers, url, prev, fromImport) {\n        let result = null;\n        for (const importer of importers) {\n            result = await new Promise((resolve) => {\n                // Importers can be both sync and async\n                const innerResult = importer.call({ fromImport }, url, prev, resolve);\n                if (innerResult !== undefined) {\n                    resolve(innerResult);\n                }\n            });\n            if (result) {\n                break;\n            }\n        }\n        return result;\n    }\n    createRequest(workerIndex, callback, importer) {\n        return {\n            id: this.idCounter++,\n            workerIndex,\n            callback,\n            importers: !importer || Array.isArray(importer) ? importer : [importer],\n        };\n    }\n}\nexports.SassLegacyWorkerImplementation = SassLegacyWorkerImplementation;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}