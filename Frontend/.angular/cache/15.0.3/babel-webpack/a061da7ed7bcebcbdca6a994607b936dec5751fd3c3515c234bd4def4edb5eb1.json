{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inlineLocales = exports.createI18nPlugins = void 0;\nconst remapping_1 = __importDefault(require(\"@ampproject/remapping\"));\nconst core_1 = require(\"@babel/core\");\nconst template_1 = __importDefault(require(\"@babel/template\"));\nconst fs = __importStar(require(\"fs/promises\"));\nconst path = __importStar(require(\"path\"));\nconst worker_threads_1 = require(\"worker_threads\");\nconst environment_options_1 = require(\"./environment-options\");\nconst error_1 = require(\"./error\");\nconst load_esm_1 = require(\"./load-esm\");\n// Lazy loaded webpack-sources object\n// Webpack is only imported if needed during the processing\nlet webpackSources;\nconst {\n  i18n\n} = worker_threads_1.workerData || {};\n/**\n * Internal flag to enable the direct usage of the `@angular/localize` translation plugins.\n * Their usage is currently several times slower than the string manipulation method.\n * Future work to optimize the plugins should enable plugin usage as the default.\n */\nconst USE_LOCALIZE_PLUGINS = false;\n/**\n * Cached instance of the `@angular/localize/tools` module.\n * This is used to remove the need to repeatedly import the module per file translation.\n */\nlet localizeToolsModule;\n/**\n * Attempts to load the `@angular/localize/tools` module containing the functionality to\n * perform the file translations.\n * This module must be dynamically loaded as it is an ESM module and this file is CommonJS.\n */\nfunction loadLocalizeTools() {\n  return _loadLocalizeTools.apply(this, arguments);\n}\nfunction _loadLocalizeTools() {\n  _loadLocalizeTools = _asyncToGenerator(function* () {\n    if (localizeToolsModule !== undefined) {\n      return localizeToolsModule;\n    }\n    // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n    // Once TypeScript provides support for keeping the dynamic import this workaround can be\n    // changed to a direct dynamic import.\n    return (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n  });\n  return _loadLocalizeTools.apply(this, arguments);\n}\nfunction createI18nPlugins(_x, _x2, _x3, _x4, _x5) {\n  return _createI18nPlugins.apply(this, arguments);\n}\nfunction _createI18nPlugins() {\n  _createI18nPlugins = _asyncToGenerator(function* (locale, translation, missingTranslation, shouldInline, localeDataContent) {\n    const {\n      Diagnostics,\n      makeEs2015TranslatePlugin,\n      makeLocalePlugin\n    } = yield loadLocalizeTools();\n    const plugins = [];\n    const diagnostics = new Diagnostics();\n    if (shouldInline) {\n      plugins.push(\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      makeEs2015TranslatePlugin(diagnostics, translation || {}, {\n        missingTranslation: translation === undefined ? 'ignore' : missingTranslation\n      }));\n    }\n    plugins.push(makeLocalePlugin(locale));\n    if (localeDataContent) {\n      plugins.push({\n        visitor: {\n          Program(path) {\n            path.unshiftContainer('body', template_1.default.ast(localeDataContent));\n          }\n        }\n      });\n    }\n    return {\n      diagnostics,\n      plugins\n    };\n  });\n  return _createI18nPlugins.apply(this, arguments);\n}\nexports.createI18nPlugins = createI18nPlugins;\nconst localizeName = '$localize';\nfunction inlineLocales(_x6) {\n  return _inlineLocales.apply(this, arguments);\n}\nfunction _inlineLocales() {\n  _inlineLocales = _asyncToGenerator(function* (options) {\n    var _a;\n    if (!i18n || i18n.inlineLocales.size === 0) {\n      return {\n        file: options.filename,\n        diagnostics: [],\n        count: 0\n      };\n    }\n    if (i18n.flatOutput && i18n.inlineLocales.size > 1) {\n      throw new Error('Flat output is only supported when inlining one locale.');\n    }\n    const hasLocalizeName = options.code.includes(localizeName);\n    if (!hasLocalizeName && !options.setLocale) {\n      return inlineCopyOnly(options);\n    }\n    yield loadLocalizeTools();\n    let ast;\n    try {\n      ast = (0, core_1.parseSync)(options.code, {\n        babelrc: false,\n        configFile: false,\n        sourceType: 'unambiguous',\n        filename: options.filename\n      });\n    } catch (error) {\n      (0, error_1.assertIsError)(error);\n      // Make the error more readable.\n      // Same errors will contain the full content of the file as the error message\n      // Which makes it hard to find the actual error message.\n      const index = error.message.indexOf(')\\n');\n      const msg = index !== -1 ? error.message.slice(0, index + 1) : error.message;\n      throw new Error(`${msg}\\nAn error occurred inlining file \"${options.filename}\"`);\n    }\n    if (!ast) {\n      throw new Error(`Unknown error occurred inlining file \"${options.filename}\"`);\n    }\n    if (!USE_LOCALIZE_PLUGINS) {\n      return inlineLocalesDirect(ast, options);\n    }\n    const diagnostics = [];\n    for (const locale of i18n.inlineLocales) {\n      const isSourceLocale = locale === i18n.sourceLocale;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const translations = isSourceLocale ? {} : i18n.locales[locale].translation || {};\n      let localeDataContent;\n      if (options.setLocale) {\n        // If locale data is provided, load it and prepend to file\n        const localeDataPath = (_a = i18n.locales[locale]) === null || _a === void 0 ? void 0 : _a.dataPath;\n        if (localeDataPath) {\n          localeDataContent = yield loadLocaleData(localeDataPath, true);\n        }\n      }\n      const {\n        diagnostics: localeDiagnostics,\n        plugins\n      } = yield createI18nPlugins(locale, translations, isSourceLocale ? 'ignore' : options.missingTranslation || 'warning', true, localeDataContent);\n      const transformResult = yield (0, core_1.transformFromAstSync)(ast, options.code, {\n        filename: options.filename,\n        // using false ensures that babel will NOT search and process sourcemap comments (large memory usage)\n        // The types do not include the false option even though it is valid\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        inputSourceMap: false,\n        babelrc: false,\n        configFile: false,\n        plugins,\n        compact: !environment_options_1.shouldBeautify,\n        sourceMaps: !!options.map\n      });\n      diagnostics.push(...localeDiagnostics.messages);\n      if (!transformResult || !transformResult.code) {\n        throw new Error(`Unknown error occurred processing bundle for \"${options.filename}\".`);\n      }\n      const outputPath = path.join(options.outputPath, i18n.flatOutput ? '' : locale, options.filename);\n      yield fs.writeFile(outputPath, transformResult.code);\n      if (options.map && transformResult.map) {\n        const outputMap = (0, remapping_1.default)([transformResult.map, options.map], () => null);\n        yield fs.writeFile(outputPath + '.map', JSON.stringify(outputMap));\n      }\n    }\n    return {\n      file: options.filename,\n      diagnostics\n    };\n  });\n  return _inlineLocales.apply(this, arguments);\n}\nexports.inlineLocales = inlineLocales;\nfunction inlineLocalesDirect(_x7, _x8) {\n  return _inlineLocalesDirect.apply(this, arguments);\n}\nfunction _inlineLocalesDirect() {\n  _inlineLocalesDirect = _asyncToGenerator(function* (ast, options) {\n    if (!i18n || i18n.inlineLocales.size === 0) {\n      return {\n        file: options.filename,\n        diagnostics: [],\n        count: 0\n      };\n    }\n    const {\n      default: generate\n    } = yield Promise.resolve().then(() => __importStar(require('@babel/generator')));\n    const localizeDiag = yield loadLocalizeTools();\n    const diagnostics = new localizeDiag.Diagnostics();\n    const positions = findLocalizePositions(ast, options, localizeDiag);\n    if (positions.length === 0 && !options.setLocale) {\n      return inlineCopyOnly(options);\n    }\n    const inputMap = !!options.map && JSON.parse(options.map);\n    // Cleanup source root otherwise it will be added to each source entry\n    const mapSourceRoot = inputMap && inputMap.sourceRoot;\n    if (inputMap) {\n      delete inputMap.sourceRoot;\n    }\n    // Load Webpack only when needed\n    if (webpackSources === undefined) {\n      webpackSources = (yield Promise.resolve().then(() => __importStar(require('webpack')))).sources;\n    }\n    const {\n      ConcatSource,\n      OriginalSource,\n      ReplaceSource,\n      SourceMapSource\n    } = webpackSources;\n    for (const locale of i18n.inlineLocales) {\n      const content = new ReplaceSource(inputMap ? new SourceMapSource(options.code, options.filename, inputMap) : new OriginalSource(options.code, options.filename));\n      const isSourceLocale = locale === i18n.sourceLocale;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const translations = isSourceLocale ? {} : i18n.locales[locale].translation || {};\n      for (const position of positions) {\n        const translated = localizeDiag.translate(diagnostics, translations, position.messageParts, position.expressions, isSourceLocale ? 'ignore' : options.missingTranslation || 'warning');\n        const expression = localizeDiag.buildLocalizeReplacement(translated[0], translated[1]);\n        const {\n          code\n        } = generate(expression);\n        content.replace(position.start, position.end - 1, code);\n      }\n      let outputSource = content;\n      if (options.setLocale) {\n        const setLocaleText = `var $localize=Object.assign(void 0===$localize?{}:$localize,{locale:\"${locale}\"});\\n`;\n        // If locale data is provided, load it and prepend to file\n        let localeDataSource;\n        const localeDataPath = i18n.locales[locale] && i18n.locales[locale].dataPath;\n        if (localeDataPath) {\n          const localeDataContent = yield loadLocaleData(localeDataPath, true);\n          localeDataSource = new OriginalSource(localeDataContent, path.basename(localeDataPath));\n        }\n        outputSource = localeDataSource ?\n        // The semicolon ensures that there is no syntax error between statements\n        new ConcatSource(setLocaleText, localeDataSource, ';\\n', content) : new ConcatSource(setLocaleText, content);\n      }\n      const {\n        source: outputCode,\n        map: outputMap\n      } = outputSource.sourceAndMap();\n      const outputPath = path.join(options.outputPath, i18n.flatOutput ? '' : locale, options.filename);\n      yield fs.writeFile(outputPath, outputCode);\n      if (inputMap && outputMap) {\n        outputMap.file = options.filename;\n        if (mapSourceRoot) {\n          outputMap.sourceRoot = mapSourceRoot;\n        }\n        yield fs.writeFile(outputPath + '.map', JSON.stringify(outputMap));\n      }\n    }\n    return {\n      file: options.filename,\n      diagnostics: diagnostics.messages,\n      count: positions.length\n    };\n  });\n  return _inlineLocalesDirect.apply(this, arguments);\n}\nfunction inlineCopyOnly(_x9) {\n  return _inlineCopyOnly.apply(this, arguments);\n}\nfunction _inlineCopyOnly() {\n  _inlineCopyOnly = _asyncToGenerator(function* (options) {\n    if (!i18n) {\n      throw new Error('i18n options are missing');\n    }\n    for (const locale of i18n.inlineLocales) {\n      const outputPath = path.join(options.outputPath, i18n.flatOutput ? '' : locale, options.filename);\n      yield fs.writeFile(outputPath, options.code);\n      if (options.map) {\n        yield fs.writeFile(outputPath + '.map', options.map);\n      }\n    }\n    return {\n      file: options.filename,\n      diagnostics: [],\n      count: 0\n    };\n  });\n  return _inlineCopyOnly.apply(this, arguments);\n}\nfunction findLocalizePositions(ast, options, utils) {\n  const positions = [];\n  // Workaround to ensure a path hub is present for traversal\n  const {\n    File\n  } = require('@babel/core');\n  const file = new File({}, {\n    code: options.code,\n    ast\n  });\n  (0, core_1.traverse)(file.ast, {\n    TaggedTemplateExpression(path) {\n      if (core_1.types.isIdentifier(path.node.tag) && path.node.tag.name === localizeName) {\n        const [messageParts, expressions] = unwrapTemplateLiteral(path, utils);\n        positions.push({\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          start: path.node.start,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          end: path.node.end,\n          messageParts,\n          expressions\n        });\n      }\n    }\n  });\n  return positions;\n}\nfunction unwrapTemplateLiteral(path, utils) {\n  const [messageParts] = utils.unwrapMessagePartsFromTemplateLiteral(path.get('quasi').get('quasis'));\n  const [expressions] = utils.unwrapExpressionsFromTemplateLiteral(path.get('quasi'));\n  return [messageParts, expressions];\n}\nfunction unwrapLocalizeCall(path, utils) {\n  const [messageParts] = utils.unwrapMessagePartsFromLocalizeCall(path);\n  const [expressions] = utils.unwrapSubstitutionsFromLocalizeCall(path);\n  return [messageParts, expressions];\n}\nfunction loadLocaleData(_x10, _x11) {\n  return _loadLocaleData.apply(this, arguments);\n}\nfunction _loadLocaleData() {\n  _loadLocaleData = _asyncToGenerator(function* (path, optimize) {\n    // The path is validated during option processing before the build starts\n    const content = yield fs.readFile(path, 'utf8');\n    // Downlevel and optimize the data\n    const transformResult = yield (0, core_1.transformAsync)(content, {\n      filename: path,\n      // The types do not include the false option even though it is valid\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      inputSourceMap: false,\n      babelrc: false,\n      configFile: false,\n      presets: [[require.resolve('@babel/preset-env'), {\n        bugfixes: true,\n        targets: {\n          esmodules: true\n        }\n      }]],\n      minified: environment_options_1.allowMinify && optimize,\n      compact: !environment_options_1.shouldBeautify && optimize,\n      comments: !optimize\n    });\n    if (!transformResult || !transformResult.code) {\n      throw new Error(`Unknown error occurred processing bundle for \"${path}\".`);\n    }\n    return transformResult.code;\n  });\n  return _loadLocaleData.apply(this, arguments);\n}","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","inlineLocales","createI18nPlugins","remapping_1","require","core_1","template_1","fs","path","worker_threads_1","environment_options_1","error_1","load_esm_1","webpackSources","i18n","workerData","USE_LOCALIZE_PLUGINS","localizeToolsModule","loadLocalizeTools","loadEsmModule","locale","translation","missingTranslation","shouldInline","localeDataContent","Diagnostics","makeEs2015TranslatePlugin","makeLocalePlugin","plugins","diagnostics","push","visitor","Program","unshiftContainer","default","ast","localizeName","options","_a","size","file","filename","count","flatOutput","Error","hasLocalizeName","code","includes","setLocale","inlineCopyOnly","parseSync","babelrc","configFile","sourceType","error","assertIsError","index","message","indexOf","msg","slice","inlineLocalesDirect","isSourceLocale","sourceLocale","translations","locales","localeDataPath","dataPath","loadLocaleData","localeDiagnostics","transformResult","transformFromAstSync","inputSourceMap","compact","shouldBeautify","sourceMaps","map","messages","outputPath","join","writeFile","outputMap","JSON","stringify","generate","Promise","resolve","then","localizeDiag","positions","findLocalizePositions","length","inputMap","parse","mapSourceRoot","sourceRoot","sources","ConcatSource","OriginalSource","ReplaceSource","SourceMapSource","content","position","translated","translate","messageParts","expressions","expression","buildLocalizeReplacement","replace","start","end","outputSource","setLocaleText","localeDataSource","basename","source","outputCode","sourceAndMap","utils","File","traverse","TaggedTemplateExpression","types","isIdentifier","node","tag","name","unwrapTemplateLiteral","unwrapMessagePartsFromTemplateLiteral","unwrapExpressionsFromTemplateLiteral","unwrapLocalizeCall","unwrapMessagePartsFromLocalizeCall","unwrapSubstitutionsFromLocalizeCall","optimize","readFile","transformAsync","presets","bugfixes","targets","esmodules","minified","allowMinify","comments"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@angular-devkit/build-angular/src/utils/process-bundle.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.inlineLocales = exports.createI18nPlugins = void 0;\nconst remapping_1 = __importDefault(require(\"@ampproject/remapping\"));\nconst core_1 = require(\"@babel/core\");\nconst template_1 = __importDefault(require(\"@babel/template\"));\nconst fs = __importStar(require(\"fs/promises\"));\nconst path = __importStar(require(\"path\"));\nconst worker_threads_1 = require(\"worker_threads\");\nconst environment_options_1 = require(\"./environment-options\");\nconst error_1 = require(\"./error\");\nconst load_esm_1 = require(\"./load-esm\");\n// Lazy loaded webpack-sources object\n// Webpack is only imported if needed during the processing\nlet webpackSources;\nconst { i18n } = (worker_threads_1.workerData || {});\n/**\n * Internal flag to enable the direct usage of the `@angular/localize` translation plugins.\n * Their usage is currently several times slower than the string manipulation method.\n * Future work to optimize the plugins should enable plugin usage as the default.\n */\nconst USE_LOCALIZE_PLUGINS = false;\n/**\n * Cached instance of the `@angular/localize/tools` module.\n * This is used to remove the need to repeatedly import the module per file translation.\n */\nlet localizeToolsModule;\n/**\n * Attempts to load the `@angular/localize/tools` module containing the functionality to\n * perform the file translations.\n * This module must be dynamically loaded as it is an ESM module and this file is CommonJS.\n */\nasync function loadLocalizeTools() {\n    if (localizeToolsModule !== undefined) {\n        return localizeToolsModule;\n    }\n    // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n    // Once TypeScript provides support for keeping the dynamic import this workaround can be\n    // changed to a direct dynamic import.\n    return (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n}\nasync function createI18nPlugins(locale, translation, missingTranslation, shouldInline, localeDataContent) {\n    const { Diagnostics, makeEs2015TranslatePlugin, makeLocalePlugin } = await loadLocalizeTools();\n    const plugins = [];\n    const diagnostics = new Diagnostics();\n    if (shouldInline) {\n        plugins.push(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        makeEs2015TranslatePlugin(diagnostics, (translation || {}), {\n            missingTranslation: translation === undefined ? 'ignore' : missingTranslation,\n        }));\n    }\n    plugins.push(makeLocalePlugin(locale));\n    if (localeDataContent) {\n        plugins.push({\n            visitor: {\n                Program(path) {\n                    path.unshiftContainer('body', template_1.default.ast(localeDataContent));\n                },\n            },\n        });\n    }\n    return { diagnostics, plugins };\n}\nexports.createI18nPlugins = createI18nPlugins;\nconst localizeName = '$localize';\nasync function inlineLocales(options) {\n    var _a;\n    if (!i18n || i18n.inlineLocales.size === 0) {\n        return { file: options.filename, diagnostics: [], count: 0 };\n    }\n    if (i18n.flatOutput && i18n.inlineLocales.size > 1) {\n        throw new Error('Flat output is only supported when inlining one locale.');\n    }\n    const hasLocalizeName = options.code.includes(localizeName);\n    if (!hasLocalizeName && !options.setLocale) {\n        return inlineCopyOnly(options);\n    }\n    await loadLocalizeTools();\n    let ast;\n    try {\n        ast = (0, core_1.parseSync)(options.code, {\n            babelrc: false,\n            configFile: false,\n            sourceType: 'unambiguous',\n            filename: options.filename,\n        });\n    }\n    catch (error) {\n        (0, error_1.assertIsError)(error);\n        // Make the error more readable.\n        // Same errors will contain the full content of the file as the error message\n        // Which makes it hard to find the actual error message.\n        const index = error.message.indexOf(')\\n');\n        const msg = index !== -1 ? error.message.slice(0, index + 1) : error.message;\n        throw new Error(`${msg}\\nAn error occurred inlining file \"${options.filename}\"`);\n    }\n    if (!ast) {\n        throw new Error(`Unknown error occurred inlining file \"${options.filename}\"`);\n    }\n    if (!USE_LOCALIZE_PLUGINS) {\n        return inlineLocalesDirect(ast, options);\n    }\n    const diagnostics = [];\n    for (const locale of i18n.inlineLocales) {\n        const isSourceLocale = locale === i18n.sourceLocale;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const translations = isSourceLocale ? {} : i18n.locales[locale].translation || {};\n        let localeDataContent;\n        if (options.setLocale) {\n            // If locale data is provided, load it and prepend to file\n            const localeDataPath = (_a = i18n.locales[locale]) === null || _a === void 0 ? void 0 : _a.dataPath;\n            if (localeDataPath) {\n                localeDataContent = await loadLocaleData(localeDataPath, true);\n            }\n        }\n        const { diagnostics: localeDiagnostics, plugins } = await createI18nPlugins(locale, translations, isSourceLocale ? 'ignore' : options.missingTranslation || 'warning', true, localeDataContent);\n        const transformResult = await (0, core_1.transformFromAstSync)(ast, options.code, {\n            filename: options.filename,\n            // using false ensures that babel will NOT search and process sourcemap comments (large memory usage)\n            // The types do not include the false option even though it is valid\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            inputSourceMap: false,\n            babelrc: false,\n            configFile: false,\n            plugins,\n            compact: !environment_options_1.shouldBeautify,\n            sourceMaps: !!options.map,\n        });\n        diagnostics.push(...localeDiagnostics.messages);\n        if (!transformResult || !transformResult.code) {\n            throw new Error(`Unknown error occurred processing bundle for \"${options.filename}\".`);\n        }\n        const outputPath = path.join(options.outputPath, i18n.flatOutput ? '' : locale, options.filename);\n        await fs.writeFile(outputPath, transformResult.code);\n        if (options.map && transformResult.map) {\n            const outputMap = (0, remapping_1.default)([transformResult.map, options.map], () => null);\n            await fs.writeFile(outputPath + '.map', JSON.stringify(outputMap));\n        }\n    }\n    return { file: options.filename, diagnostics };\n}\nexports.inlineLocales = inlineLocales;\nasync function inlineLocalesDirect(ast, options) {\n    if (!i18n || i18n.inlineLocales.size === 0) {\n        return { file: options.filename, diagnostics: [], count: 0 };\n    }\n    const { default: generate } = await Promise.resolve().then(() => __importStar(require('@babel/generator')));\n    const localizeDiag = await loadLocalizeTools();\n    const diagnostics = new localizeDiag.Diagnostics();\n    const positions = findLocalizePositions(ast, options, localizeDiag);\n    if (positions.length === 0 && !options.setLocale) {\n        return inlineCopyOnly(options);\n    }\n    const inputMap = !!options.map && JSON.parse(options.map);\n    // Cleanup source root otherwise it will be added to each source entry\n    const mapSourceRoot = inputMap && inputMap.sourceRoot;\n    if (inputMap) {\n        delete inputMap.sourceRoot;\n    }\n    // Load Webpack only when needed\n    if (webpackSources === undefined) {\n        webpackSources = (await Promise.resolve().then(() => __importStar(require('webpack')))).sources;\n    }\n    const { ConcatSource, OriginalSource, ReplaceSource, SourceMapSource } = webpackSources;\n    for (const locale of i18n.inlineLocales) {\n        const content = new ReplaceSource(inputMap\n            ? new SourceMapSource(options.code, options.filename, inputMap)\n            : new OriginalSource(options.code, options.filename));\n        const isSourceLocale = locale === i18n.sourceLocale;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const translations = isSourceLocale ? {} : i18n.locales[locale].translation || {};\n        for (const position of positions) {\n            const translated = localizeDiag.translate(diagnostics, translations, position.messageParts, position.expressions, isSourceLocale ? 'ignore' : options.missingTranslation || 'warning');\n            const expression = localizeDiag.buildLocalizeReplacement(translated[0], translated[1]);\n            const { code } = generate(expression);\n            content.replace(position.start, position.end - 1, code);\n        }\n        let outputSource = content;\n        if (options.setLocale) {\n            const setLocaleText = `var $localize=Object.assign(void 0===$localize?{}:$localize,{locale:\"${locale}\"});\\n`;\n            // If locale data is provided, load it and prepend to file\n            let localeDataSource;\n            const localeDataPath = i18n.locales[locale] && i18n.locales[locale].dataPath;\n            if (localeDataPath) {\n                const localeDataContent = await loadLocaleData(localeDataPath, true);\n                localeDataSource = new OriginalSource(localeDataContent, path.basename(localeDataPath));\n            }\n            outputSource = localeDataSource\n                ? // The semicolon ensures that there is no syntax error between statements\n                    new ConcatSource(setLocaleText, localeDataSource, ';\\n', content)\n                : new ConcatSource(setLocaleText, content);\n        }\n        const { source: outputCode, map: outputMap } = outputSource.sourceAndMap();\n        const outputPath = path.join(options.outputPath, i18n.flatOutput ? '' : locale, options.filename);\n        await fs.writeFile(outputPath, outputCode);\n        if (inputMap && outputMap) {\n            outputMap.file = options.filename;\n            if (mapSourceRoot) {\n                outputMap.sourceRoot = mapSourceRoot;\n            }\n            await fs.writeFile(outputPath + '.map', JSON.stringify(outputMap));\n        }\n    }\n    return { file: options.filename, diagnostics: diagnostics.messages, count: positions.length };\n}\nasync function inlineCopyOnly(options) {\n    if (!i18n) {\n        throw new Error('i18n options are missing');\n    }\n    for (const locale of i18n.inlineLocales) {\n        const outputPath = path.join(options.outputPath, i18n.flatOutput ? '' : locale, options.filename);\n        await fs.writeFile(outputPath, options.code);\n        if (options.map) {\n            await fs.writeFile(outputPath + '.map', options.map);\n        }\n    }\n    return { file: options.filename, diagnostics: [], count: 0 };\n}\nfunction findLocalizePositions(ast, options, utils) {\n    const positions = [];\n    // Workaround to ensure a path hub is present for traversal\n    const { File } = require('@babel/core');\n    const file = new File({}, { code: options.code, ast });\n    (0, core_1.traverse)(file.ast, {\n        TaggedTemplateExpression(path) {\n            if (core_1.types.isIdentifier(path.node.tag) && path.node.tag.name === localizeName) {\n                const [messageParts, expressions] = unwrapTemplateLiteral(path, utils);\n                positions.push({\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    start: path.node.start,\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    end: path.node.end,\n                    messageParts,\n                    expressions,\n                });\n            }\n        },\n    });\n    return positions;\n}\nfunction unwrapTemplateLiteral(path, utils) {\n    const [messageParts] = utils.unwrapMessagePartsFromTemplateLiteral(path.get('quasi').get('quasis'));\n    const [expressions] = utils.unwrapExpressionsFromTemplateLiteral(path.get('quasi'));\n    return [messageParts, expressions];\n}\nfunction unwrapLocalizeCall(path, utils) {\n    const [messageParts] = utils.unwrapMessagePartsFromLocalizeCall(path);\n    const [expressions] = utils.unwrapSubstitutionsFromLocalizeCall(path);\n    return [messageParts, expressions];\n}\nasync function loadLocaleData(path, optimize) {\n    // The path is validated during option processing before the build starts\n    const content = await fs.readFile(path, 'utf8');\n    // Downlevel and optimize the data\n    const transformResult = await (0, core_1.transformAsync)(content, {\n        filename: path,\n        // The types do not include the false option even though it is valid\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        inputSourceMap: false,\n        babelrc: false,\n        configFile: false,\n        presets: [\n            [\n                require.resolve('@babel/preset-env'),\n                {\n                    bugfixes: true,\n                    targets: { esmodules: true },\n                },\n            ],\n        ],\n        minified: environment_options_1.allowMinify && optimize,\n        compact: !environment_options_1.shouldBeautify && optimize,\n        comments: !optimize,\n    });\n    if (!transformResult || !transformResult.code) {\n        throw new Error(`Unknown error occurred processing bundle for \"${path}\".`);\n    }\n    return transformResult.code;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}