{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SassWorkerImplementation = void 0;\nconst node_path_1 = require(\"node:path\");\nconst node_url_1 = require(\"node:url\");\nconst node_worker_threads_1 = require(\"node:worker_threads\");\nconst environment_options_1 = require(\"../utils/environment-options\");\n/**\n * The maximum number of Workers that will be created to execute render requests.\n */\nconst MAX_RENDER_WORKERS = environment_options_1.maxWorkers;\n/**\n * A Sass renderer implementation that provides an interface that can be used by Webpack's\n * `sass-loader`. The implementation uses a Worker thread to perform the Sass rendering\n * with the `dart-sass` package.  The `dart-sass` synchronous render function is used within\n * the worker which can be up to two times faster than the asynchronous variant.\n */\nclass SassWorkerImplementation {\n  constructor(rebase = false) {\n    this.rebase = rebase;\n    this.workers = [];\n    this.availableWorkers = [];\n    this.requests = new Map();\n    this.workerPath = (0, node_path_1.join)(__dirname, './worker.js');\n    this.idCounter = 1;\n    this.nextWorkerIndex = 0;\n  }\n  /**\n   * Provides information about the Sass implementation.\n   * This mimics enough of the `dart-sass` value to be used with the `sass-loader`.\n   */\n  get info() {\n    return 'dart-sass\\tworker';\n  }\n  /**\n   * The synchronous render function is not used by the `sass-loader`.\n   */\n  compileString() {\n    throw new Error('Sass compileString is not supported.');\n  }\n  /**\n   * Asynchronously request a Sass stylesheet to be renderered.\n   *\n   * @param source The contents to compile.\n   * @param options The `dart-sass` options to use when rendering the stylesheet.\n   */\n  compileStringAsync(source, options) {\n    // The `functions`, `logger` and `importer` options are JavaScript functions that cannot be transferred.\n    // If any additional function options are added in the future, they must be excluded as well.\n    const {\n      functions,\n      importers,\n      url,\n      logger,\n      ...serializableOptions\n    } = options;\n    // The CLI's configuration does not use or expose the ability to defined custom Sass functions\n    if (functions && Object.keys(functions).length > 0) {\n      throw new Error('Sass custom functions are not supported.');\n    }\n    return new Promise((resolve, reject) => {\n      let workerIndex = this.availableWorkers.pop();\n      if (workerIndex === undefined) {\n        if (this.workers.length < MAX_RENDER_WORKERS) {\n          workerIndex = this.workers.length;\n          this.workers.push(this.createWorker());\n        } else {\n          workerIndex = this.nextWorkerIndex++;\n          if (this.nextWorkerIndex >= this.workers.length) {\n            this.nextWorkerIndex = 0;\n          }\n        }\n      }\n      const callback = (error, result) => {\n        var _a;\n        if (error) {\n          const url = (_a = error.span) === null || _a === void 0 ? void 0 : _a.url;\n          if (url) {\n            error.span.url = (0, node_url_1.pathToFileURL)(url);\n          }\n          reject(error);\n          return;\n        }\n        if (!result) {\n          reject(new Error('No result.'));\n          return;\n        }\n        resolve(result);\n      };\n      const request = this.createRequest(workerIndex, callback, logger, importers);\n      this.requests.set(request.id, request);\n      this.workers[workerIndex].postMessage({\n        id: request.id,\n        source,\n        hasImporter: !!(importers === null || importers === void 0 ? void 0 : importers.length),\n        hasLogger: !!logger,\n        rebase: this.rebase,\n        options: {\n          ...serializableOptions,\n          // URL is not serializable so to convert to string here and back to URL in the worker.\n          url: url ? (0, node_url_1.fileURLToPath)(url) : undefined\n        }\n      });\n    });\n  }\n  /**\n   * Shutdown the Sass render worker.\n   * Executing this method will stop any pending render requests.\n   */\n  close() {\n    for (const worker of this.workers) {\n      try {\n        void worker.terminate();\n      } catch {}\n    }\n    this.requests.clear();\n  }\n  createWorker() {\n    const {\n      port1: mainImporterPort,\n      port2: workerImporterPort\n    } = new node_worker_threads_1.MessageChannel();\n    const importerSignal = new Int32Array(new SharedArrayBuffer(4));\n    const worker = new node_worker_threads_1.Worker(this.workerPath, {\n      workerData: {\n        workerImporterPort,\n        importerSignal\n      },\n      transferList: [workerImporterPort]\n    });\n    worker.on('message', response => {\n      var _a;\n      const request = this.requests.get(response.id);\n      if (!request) {\n        return;\n      }\n      this.requests.delete(response.id);\n      this.availableWorkers.push(request.workerIndex);\n      if (response.warnings && ((_a = request.logger) === null || _a === void 0 ? void 0 : _a.warn)) {\n        for (const {\n          message,\n          span,\n          ...options\n        } of response.warnings) {\n          request.logger.warn(message, {\n            ...options,\n            span: span && {\n              ...span,\n              url: span.url ? (0, node_url_1.pathToFileURL)(span.url) : undefined\n            }\n          });\n        }\n      }\n      if (response.result) {\n        request.callback(undefined, {\n          ...response.result,\n          // URL is not serializable so in the worker we convert to string and here back to URL.\n          loadedUrls: response.result.loadedUrls.map(p => (0, node_url_1.pathToFileURL)(p))\n        });\n      } else {\n        request.callback(response.error);\n      }\n    });\n    mainImporterPort.on('message', ({\n      id,\n      url,\n      options\n    }) => {\n      const request = this.requests.get(id);\n      if (!(request === null || request === void 0 ? void 0 : request.importers)) {\n        mainImporterPort.postMessage(null);\n        Atomics.store(importerSignal, 0, 1);\n        Atomics.notify(importerSignal, 0);\n        return;\n      }\n      this.processImporters(request.importers, url, {\n        ...options,\n        previousResolvedModules: request.previousResolvedModules\n      }).then(result => {\n        var _a;\n        if (result) {\n          (_a = request.previousResolvedModules) !== null && _a !== void 0 ? _a : request.previousResolvedModules = new Set();\n          request.previousResolvedModules.add((0, node_path_1.dirname)(result));\n        }\n        mainImporterPort.postMessage(result);\n      }).catch(error => {\n        mainImporterPort.postMessage(error);\n      }).finally(() => {\n        Atomics.store(importerSignal, 0, 1);\n        Atomics.notify(importerSignal, 0);\n      });\n    });\n    mainImporterPort.unref();\n    return worker;\n  }\n  processImporters(importers, url, options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      for (const importer of importers) {\n        if (_this.isImporter(importer)) {\n          // Importer\n          throw new Error('Only File Importers are supported.');\n        }\n        // File importer (Can be sync or aync).\n        const result = yield importer.findFileUrl(url, options);\n        if (result) {\n          return (0, node_url_1.fileURLToPath)(result);\n        }\n      }\n      return null;\n    })();\n  }\n  createRequest(workerIndex, callback, logger, importers) {\n    return {\n      id: this.idCounter++,\n      workerIndex,\n      callback,\n      logger,\n      importers\n    };\n  }\n  isImporter(value) {\n    return 'canonicalize' in value && 'load' in value;\n  }\n}\nexports.SassWorkerImplementation = SassWorkerImplementation;","map":{"version":3,"names":["Object","defineProperty","exports","value","SassWorkerImplementation","node_path_1","require","node_url_1","node_worker_threads_1","environment_options_1","MAX_RENDER_WORKERS","maxWorkers","constructor","rebase","workers","availableWorkers","requests","Map","workerPath","join","__dirname","idCounter","nextWorkerIndex","info","compileString","Error","compileStringAsync","source","options","functions","importers","url","logger","serializableOptions","keys","length","Promise","resolve","reject","workerIndex","pop","undefined","push","createWorker","callback","error","result","_a","span","pathToFileURL","request","createRequest","set","id","postMessage","hasImporter","hasLogger","fileURLToPath","close","worker","terminate","clear","port1","mainImporterPort","port2","workerImporterPort","MessageChannel","importerSignal","Int32Array","SharedArrayBuffer","Worker","workerData","transferList","on","response","get","delete","warnings","warn","message","loadedUrls","map","p","Atomics","store","notify","processImporters","previousResolvedModules","then","Set","add","dirname","catch","finally","unref","importer","isImporter","findFileUrl"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@angular-devkit/build-angular/src/sass/sass-service.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SassWorkerImplementation = void 0;\nconst node_path_1 = require(\"node:path\");\nconst node_url_1 = require(\"node:url\");\nconst node_worker_threads_1 = require(\"node:worker_threads\");\nconst environment_options_1 = require(\"../utils/environment-options\");\n/**\n * The maximum number of Workers that will be created to execute render requests.\n */\nconst MAX_RENDER_WORKERS = environment_options_1.maxWorkers;\n/**\n * A Sass renderer implementation that provides an interface that can be used by Webpack's\n * `sass-loader`. The implementation uses a Worker thread to perform the Sass rendering\n * with the `dart-sass` package.  The `dart-sass` synchronous render function is used within\n * the worker which can be up to two times faster than the asynchronous variant.\n */\nclass SassWorkerImplementation {\n    constructor(rebase = false) {\n        this.rebase = rebase;\n        this.workers = [];\n        this.availableWorkers = [];\n        this.requests = new Map();\n        this.workerPath = (0, node_path_1.join)(__dirname, './worker.js');\n        this.idCounter = 1;\n        this.nextWorkerIndex = 0;\n    }\n    /**\n     * Provides information about the Sass implementation.\n     * This mimics enough of the `dart-sass` value to be used with the `sass-loader`.\n     */\n    get info() {\n        return 'dart-sass\\tworker';\n    }\n    /**\n     * The synchronous render function is not used by the `sass-loader`.\n     */\n    compileString() {\n        throw new Error('Sass compileString is not supported.');\n    }\n    /**\n     * Asynchronously request a Sass stylesheet to be renderered.\n     *\n     * @param source The contents to compile.\n     * @param options The `dart-sass` options to use when rendering the stylesheet.\n     */\n    compileStringAsync(source, options) {\n        // The `functions`, `logger` and `importer` options are JavaScript functions that cannot be transferred.\n        // If any additional function options are added in the future, they must be excluded as well.\n        const { functions, importers, url, logger, ...serializableOptions } = options;\n        // The CLI's configuration does not use or expose the ability to defined custom Sass functions\n        if (functions && Object.keys(functions).length > 0) {\n            throw new Error('Sass custom functions are not supported.');\n        }\n        return new Promise((resolve, reject) => {\n            let workerIndex = this.availableWorkers.pop();\n            if (workerIndex === undefined) {\n                if (this.workers.length < MAX_RENDER_WORKERS) {\n                    workerIndex = this.workers.length;\n                    this.workers.push(this.createWorker());\n                }\n                else {\n                    workerIndex = this.nextWorkerIndex++;\n                    if (this.nextWorkerIndex >= this.workers.length) {\n                        this.nextWorkerIndex = 0;\n                    }\n                }\n            }\n            const callback = (error, result) => {\n                var _a;\n                if (error) {\n                    const url = (_a = error.span) === null || _a === void 0 ? void 0 : _a.url;\n                    if (url) {\n                        error.span.url = (0, node_url_1.pathToFileURL)(url);\n                    }\n                    reject(error);\n                    return;\n                }\n                if (!result) {\n                    reject(new Error('No result.'));\n                    return;\n                }\n                resolve(result);\n            };\n            const request = this.createRequest(workerIndex, callback, logger, importers);\n            this.requests.set(request.id, request);\n            this.workers[workerIndex].postMessage({\n                id: request.id,\n                source,\n                hasImporter: !!(importers === null || importers === void 0 ? void 0 : importers.length),\n                hasLogger: !!logger,\n                rebase: this.rebase,\n                options: {\n                    ...serializableOptions,\n                    // URL is not serializable so to convert to string here and back to URL in the worker.\n                    url: url ? (0, node_url_1.fileURLToPath)(url) : undefined,\n                },\n            });\n        });\n    }\n    /**\n     * Shutdown the Sass render worker.\n     * Executing this method will stop any pending render requests.\n     */\n    close() {\n        for (const worker of this.workers) {\n            try {\n                void worker.terminate();\n            }\n            catch { }\n        }\n        this.requests.clear();\n    }\n    createWorker() {\n        const { port1: mainImporterPort, port2: workerImporterPort } = new node_worker_threads_1.MessageChannel();\n        const importerSignal = new Int32Array(new SharedArrayBuffer(4));\n        const worker = new node_worker_threads_1.Worker(this.workerPath, {\n            workerData: { workerImporterPort, importerSignal },\n            transferList: [workerImporterPort],\n        });\n        worker.on('message', (response) => {\n            var _a;\n            const request = this.requests.get(response.id);\n            if (!request) {\n                return;\n            }\n            this.requests.delete(response.id);\n            this.availableWorkers.push(request.workerIndex);\n            if (response.warnings && ((_a = request.logger) === null || _a === void 0 ? void 0 : _a.warn)) {\n                for (const { message, span, ...options } of response.warnings) {\n                    request.logger.warn(message, {\n                        ...options,\n                        span: span && {\n                            ...span,\n                            url: span.url ? (0, node_url_1.pathToFileURL)(span.url) : undefined,\n                        },\n                    });\n                }\n            }\n            if (response.result) {\n                request.callback(undefined, {\n                    ...response.result,\n                    // URL is not serializable so in the worker we convert to string and here back to URL.\n                    loadedUrls: response.result.loadedUrls.map((p) => (0, node_url_1.pathToFileURL)(p)),\n                });\n            }\n            else {\n                request.callback(response.error);\n            }\n        });\n        mainImporterPort.on('message', ({ id, url, options }) => {\n            const request = this.requests.get(id);\n            if (!(request === null || request === void 0 ? void 0 : request.importers)) {\n                mainImporterPort.postMessage(null);\n                Atomics.store(importerSignal, 0, 1);\n                Atomics.notify(importerSignal, 0);\n                return;\n            }\n            this.processImporters(request.importers, url, {\n                ...options,\n                previousResolvedModules: request.previousResolvedModules,\n            })\n                .then((result) => {\n                var _a;\n                if (result) {\n                    (_a = request.previousResolvedModules) !== null && _a !== void 0 ? _a : (request.previousResolvedModules = new Set());\n                    request.previousResolvedModules.add((0, node_path_1.dirname)(result));\n                }\n                mainImporterPort.postMessage(result);\n            })\n                .catch((error) => {\n                mainImporterPort.postMessage(error);\n            })\n                .finally(() => {\n                Atomics.store(importerSignal, 0, 1);\n                Atomics.notify(importerSignal, 0);\n            });\n        });\n        mainImporterPort.unref();\n        return worker;\n    }\n    async processImporters(importers, url, options) {\n        for (const importer of importers) {\n            if (this.isImporter(importer)) {\n                // Importer\n                throw new Error('Only File Importers are supported.');\n            }\n            // File importer (Can be sync or aync).\n            const result = await importer.findFileUrl(url, options);\n            if (result) {\n                return (0, node_url_1.fileURLToPath)(result);\n            }\n        }\n        return null;\n    }\n    createRequest(workerIndex, callback, logger, importers) {\n        return {\n            id: this.idCounter++,\n            workerIndex,\n            callback,\n            logger,\n            importers,\n        };\n    }\n    isImporter(value) {\n        return 'canonicalize' in value && 'load' in value;\n    }\n}\nexports.SassWorkerImplementation = SassWorkerImplementation;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}