{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@jridgewell/sourcemap-codec'), require('@jridgewell/resolve-uri')) : typeof define === 'function' && define.amd ? define(['exports', '@jridgewell/sourcemap-codec', '@jridgewell/resolve-uri'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.traceMapping = {}, global.sourcemapCodec, global.resolveURI));\n})(this, function (exports, sourcemapCodec, resolveUri) {\n  'use strict';\n\n  function _interopDefaultLegacy(e) {\n    return e && typeof e === 'object' && 'default' in e ? e : {\n      'default': e\n    };\n  }\n  var resolveUri__default = /*#__PURE__*/_interopDefaultLegacy(resolveUri);\n  function resolve(input, base) {\n    // The base is always treated as a directory, if it's not empty.\n    // https://github.com/mozilla/source-map/blob/8cb3ee57/lib/util.js#L327\n    // https://github.com/chromium/chromium/blob/da4adbb3/third_party/blink/renderer/devtools/front_end/sdk/SourceMap.js#L400-L401\n    if (base && !base.endsWith('/')) base += '/';\n    return resolveUri__default[\"default\"](input, base);\n  }\n\n  /**\n   * Removes everything after the last \"/\", but leaves the slash.\n   */\n  function stripFilename(path) {\n    if (!path) return '';\n    const index = path.lastIndexOf('/');\n    return path.slice(0, index + 1);\n  }\n  const COLUMN = 0;\n  const SOURCES_INDEX = 1;\n  const SOURCE_LINE = 2;\n  const SOURCE_COLUMN = 3;\n  const NAMES_INDEX = 4;\n  const REV_GENERATED_LINE = 1;\n  const REV_GENERATED_COLUMN = 2;\n  function maybeSort(mappings, owned) {\n    const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);\n    if (unsortedIndex === mappings.length) return mappings;\n    // If we own the array (meaning we parsed it from JSON), then we're free to directly mutate it. If\n    // not, we do not want to modify the consumer's input array.\n    if (!owned) mappings = mappings.slice();\n    for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {\n      mappings[i] = sortSegments(mappings[i], owned);\n    }\n    return mappings;\n  }\n  function nextUnsortedSegmentLine(mappings, start) {\n    for (let i = start; i < mappings.length; i++) {\n      if (!isSorted(mappings[i])) return i;\n    }\n    return mappings.length;\n  }\n  function isSorted(line) {\n    for (let j = 1; j < line.length; j++) {\n      if (line[j][COLUMN] < line[j - 1][COLUMN]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function sortSegments(line, owned) {\n    if (!owned) line = line.slice();\n    return line.sort(sortComparator);\n  }\n  function sortComparator(a, b) {\n    return a[COLUMN] - b[COLUMN];\n  }\n  let found = false;\n  /**\n   * A binary search implementation that returns the index if a match is found.\n   * If no match is found, then the left-index (the index associated with the item that comes just\n   * before the desired index) is returned. To maintain proper sort order, a splice would happen at\n   * the next index:\n   *\n   * ```js\n   * const array = [1, 3];\n   * const needle = 2;\n   * const index = binarySearch(array, needle, (item, needle) => item - needle);\n   *\n   * assert.equal(index, 0);\n   * array.splice(index + 1, 0, needle);\n   * assert.deepEqual(array, [1, 2, 3]);\n   * ```\n   */\n  function binarySearch(haystack, needle, low, high) {\n    while (low <= high) {\n      const mid = low + (high - low >> 1);\n      const cmp = haystack[mid][COLUMN] - needle;\n      if (cmp === 0) {\n        found = true;\n        return mid;\n      }\n      if (cmp < 0) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n    found = false;\n    return low - 1;\n  }\n  function upperBound(haystack, needle, index) {\n    for (let i = index + 1; i < haystack.length; index = i++) {\n      if (haystack[i][COLUMN] !== needle) break;\n    }\n    return index;\n  }\n  function lowerBound(haystack, needle, index) {\n    for (let i = index - 1; i >= 0; index = i--) {\n      if (haystack[i][COLUMN] !== needle) break;\n    }\n    return index;\n  }\n  function memoizedState() {\n    return {\n      lastKey: -1,\n      lastNeedle: -1,\n      lastIndex: -1\n    };\n  }\n  /**\n   * This overly complicated beast is just to record the last tested line/column and the resulting\n   * index, allowing us to skip a few tests if mappings are monotonically increasing.\n   */\n  function memoizedBinarySearch(haystack, needle, state, key) {\n    const {\n      lastKey,\n      lastNeedle,\n      lastIndex\n    } = state;\n    let low = 0;\n    let high = haystack.length - 1;\n    if (key === lastKey) {\n      if (needle === lastNeedle) {\n        found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle;\n        return lastIndex;\n      }\n      if (needle >= lastNeedle) {\n        // lastIndex may be -1 if the previous needle was not found.\n        low = lastIndex === -1 ? 0 : lastIndex;\n      } else {\n        high = lastIndex;\n      }\n    }\n    state.lastKey = key;\n    state.lastNeedle = needle;\n    return state.lastIndex = binarySearch(haystack, needle, low, high);\n  }\n\n  // Rebuilds the original source files, with mappings that are ordered by source line/column instead\n  // of generated line/column.\n  function buildBySources(decoded, memos) {\n    const sources = memos.map(buildNullArray);\n    for (let i = 0; i < decoded.length; i++) {\n      const line = decoded[i];\n      for (let j = 0; j < line.length; j++) {\n        const seg = line[j];\n        if (seg.length === 1) continue;\n        const sourceIndex = seg[SOURCES_INDEX];\n        const sourceLine = seg[SOURCE_LINE];\n        const sourceColumn = seg[SOURCE_COLUMN];\n        const originalSource = sources[sourceIndex];\n        const originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []);\n        const memo = memos[sourceIndex];\n        // The binary search either found a match, or it found the left-index just before where the\n        // segment should go. Either way, we want to insert after that. And there may be multiple\n        // generated segments associated with an original location, so there may need to move several\n        // indexes before we find where we need to insert.\n        const index = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));\n        insert(originalLine, memo.lastIndex = index + 1, [sourceColumn, i, seg[COLUMN]]);\n      }\n    }\n    return sources;\n  }\n  function insert(array, index, value) {\n    for (let i = array.length; i > index; i--) {\n      array[i] = array[i - 1];\n    }\n    array[index] = value;\n  }\n  // Null arrays allow us to use ordered index keys without actually allocating contiguous memory like\n  // a real array. We use a null-prototype object to avoid prototype pollution and deoptimizations.\n  // Numeric properties on objects are magically sorted in ascending order by the engine regardless of\n  // the insertion order. So, by setting any numeric keys, even out of order, we'll get ascending\n  // order when iterating with for-in.\n  function buildNullArray() {\n    return {\n      __proto__: null\n    };\n  }\n  const AnyMap = function (map, mapUrl) {\n    const parsed = typeof map === 'string' ? JSON.parse(map) : map;\n    if (!('sections' in parsed)) return new TraceMap(parsed, mapUrl);\n    const mappings = [];\n    const sources = [];\n    const sourcesContent = [];\n    const names = [];\n    recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, 0, 0, Infinity, Infinity);\n    const joined = {\n      version: 3,\n      file: parsed.file,\n      names,\n      sources,\n      sourcesContent,\n      mappings\n    };\n    return exports.presortedDecodedMap(joined);\n  };\n  function recurse(input, mapUrl, mappings, sources, sourcesContent, names, lineOffset, columnOffset, stopLine, stopColumn) {\n    const {\n      sections\n    } = input;\n    for (let i = 0; i < sections.length; i++) {\n      const {\n        map,\n        offset\n      } = sections[i];\n      let sl = stopLine;\n      let sc = stopColumn;\n      if (i + 1 < sections.length) {\n        const nextOffset = sections[i + 1].offset;\n        sl = Math.min(stopLine, lineOffset + nextOffset.line);\n        if (sl === stopLine) {\n          sc = Math.min(stopColumn, columnOffset + nextOffset.column);\n        } else if (sl < stopLine) {\n          sc = columnOffset + nextOffset.column;\n        }\n      }\n      addSection(map, mapUrl, mappings, sources, sourcesContent, names, lineOffset + offset.line, columnOffset + offset.column, sl, sc);\n    }\n  }\n  function addSection(input, mapUrl, mappings, sources, sourcesContent, names, lineOffset, columnOffset, stopLine, stopColumn) {\n    if ('sections' in input) return recurse(...arguments);\n    const map = new TraceMap(input, mapUrl);\n    const sourcesOffset = sources.length;\n    const namesOffset = names.length;\n    const decoded = exports.decodedMappings(map);\n    const {\n      resolvedSources,\n      sourcesContent: contents\n    } = map;\n    append(sources, resolvedSources);\n    append(names, map.names);\n    if (contents) append(sourcesContent, contents);else for (let i = 0; i < resolvedSources.length; i++) sourcesContent.push(null);\n    for (let i = 0; i < decoded.length; i++) {\n      const lineI = lineOffset + i;\n      // We can only add so many lines before we step into the range that the next section's map\n      // controls. When we get to the last line, then we'll start checking the segments to see if\n      // they've crossed into the column range. But it may not have any columns that overstep, so we\n      // still need to check that we don't overstep lines, too.\n      if (lineI > stopLine) return;\n      // The out line may already exist in mappings (if we're continuing the line started by a\n      // previous section). Or, we may have jumped ahead several lines to start this section.\n      const out = getLine(mappings, lineI);\n      // On the 0th loop, the section's column offset shifts us forward. On all other lines (since the\n      // map can be multiple lines), it doesn't.\n      const cOffset = i === 0 ? columnOffset : 0;\n      const line = decoded[i];\n      for (let j = 0; j < line.length; j++) {\n        const seg = line[j];\n        const column = cOffset + seg[COLUMN];\n        // If this segment steps into the column range that the next section's map controls, we need\n        // to stop early.\n        if (lineI === stopLine && column >= stopColumn) return;\n        if (seg.length === 1) {\n          out.push([column]);\n          continue;\n        }\n        const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX];\n        const sourceLine = seg[SOURCE_LINE];\n        const sourceColumn = seg[SOURCE_COLUMN];\n        out.push(seg.length === 4 ? [column, sourcesIndex, sourceLine, sourceColumn] : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]);\n      }\n    }\n  }\n  function append(arr, other) {\n    for (let i = 0; i < other.length; i++) arr.push(other[i]);\n  }\n  function getLine(arr, index) {\n    for (let i = arr.length; i <= index; i++) arr[i] = [];\n    return arr[index];\n  }\n  const LINE_GTR_ZERO = '`line` must be greater than 0 (lines start at line 1)';\n  const COL_GTR_EQ_ZERO = '`column` must be greater than or equal to 0 (columns start at column 0)';\n  const LEAST_UPPER_BOUND = -1;\n  const GREATEST_LOWER_BOUND = 1;\n  /**\n   * Returns the encoded (VLQ string) form of the SourceMap's mappings field.\n   */\n  exports.encodedMappings = void 0;\n  /**\n   * Returns the decoded (array of lines of segments) form of the SourceMap's mappings field.\n   */\n  exports.decodedMappings = void 0;\n  /**\n   * A low-level API to find the segment associated with a generated line/column (think, from a\n   * stack trace). Line and column here are 0-based, unlike `originalPositionFor`.\n   */\n  exports.traceSegment = void 0;\n  /**\n   * A higher-level API to find the source/line/column associated with a generated line/column\n   * (think, from a stack trace). Line is 1-based, but column is 0-based, due to legacy behavior in\n   * `source-map` library.\n   */\n  exports.originalPositionFor = void 0;\n  /**\n   * Finds the generated line/column position of the provided source/line/column source position.\n   */\n  exports.generatedPositionFor = void 0;\n  /**\n   * Finds all generated line/column positions of the provided source/line/column source position.\n   */\n  exports.allGeneratedPositionsFor = void 0;\n  /**\n   * Iterates each mapping in generated position order.\n   */\n  exports.eachMapping = void 0;\n  /**\n   * Retrieves the source content for a particular source, if its found. Returns null if not.\n   */\n  exports.sourceContentFor = void 0;\n  /**\n   * A helper that skips sorting of the input map's mappings array, which can be expensive for larger\n   * maps.\n   */\n  exports.presortedDecodedMap = void 0;\n  /**\n   * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n   * a sourcemap, or to JSON.stringify.\n   */\n  exports.decodedMap = void 0;\n  /**\n   * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n   * a sourcemap, or to JSON.stringify.\n   */\n  exports.encodedMap = void 0;\n  class TraceMap {\n    constructor(map, mapUrl) {\n      const isString = typeof map === 'string';\n      if (!isString && map._decodedMemo) return map;\n      const parsed = isString ? JSON.parse(map) : map;\n      const {\n        version,\n        file,\n        names,\n        sourceRoot,\n        sources,\n        sourcesContent\n      } = parsed;\n      this.version = version;\n      this.file = file;\n      this.names = names;\n      this.sourceRoot = sourceRoot;\n      this.sources = sources;\n      this.sourcesContent = sourcesContent;\n      const from = resolve(sourceRoot || '', stripFilename(mapUrl));\n      this.resolvedSources = sources.map(s => resolve(s || '', from));\n      const {\n        mappings\n      } = parsed;\n      if (typeof mappings === 'string') {\n        this._encoded = mappings;\n        this._decoded = undefined;\n      } else {\n        this._encoded = undefined;\n        this._decoded = maybeSort(mappings, isString);\n      }\n      this._decodedMemo = memoizedState();\n      this._bySources = undefined;\n      this._bySourceMemos = undefined;\n    }\n  }\n  (() => {\n    exports.encodedMappings = map => {\n      var _a;\n      return (_a = map._encoded) !== null && _a !== void 0 ? _a : map._encoded = sourcemapCodec.encode(map._decoded);\n    };\n    exports.decodedMappings = map => {\n      return map._decoded || (map._decoded = sourcemapCodec.decode(map._encoded));\n    };\n    exports.traceSegment = (map, line, column) => {\n      const decoded = exports.decodedMappings(map);\n      // It's common for parent source maps to have pointers to lines that have no\n      // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n      if (line >= decoded.length) return null;\n      const segments = decoded[line];\n      const index = traceSegmentInternal(segments, map._decodedMemo, line, column, GREATEST_LOWER_BOUND);\n      return index === -1 ? null : segments[index];\n    };\n    exports.originalPositionFor = (map, {\n      line,\n      column,\n      bias\n    }) => {\n      line--;\n      if (line < 0) throw new Error(LINE_GTR_ZERO);\n      if (column < 0) throw new Error(COL_GTR_EQ_ZERO);\n      const decoded = exports.decodedMappings(map);\n      // It's common for parent source maps to have pointers to lines that have no\n      // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n      if (line >= decoded.length) return OMapping(null, null, null, null);\n      const segments = decoded[line];\n      const index = traceSegmentInternal(segments, map._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);\n      if (index === -1) return OMapping(null, null, null, null);\n      const segment = segments[index];\n      if (segment.length === 1) return OMapping(null, null, null, null);\n      const {\n        names,\n        resolvedSources\n      } = map;\n      return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], segment.length === 5 ? names[segment[NAMES_INDEX]] : null);\n    };\n    exports.allGeneratedPositionsFor = (map, {\n      source,\n      line,\n      column,\n      bias\n    }) => {\n      // SourceMapConsumer uses LEAST_UPPER_BOUND for some reason, so we follow suit.\n      return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);\n    };\n    exports.generatedPositionFor = (map, {\n      source,\n      line,\n      column,\n      bias\n    }) => {\n      return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);\n    };\n    exports.eachMapping = (map, cb) => {\n      const decoded = exports.decodedMappings(map);\n      const {\n        names,\n        resolvedSources\n      } = map;\n      for (let i = 0; i < decoded.length; i++) {\n        const line = decoded[i];\n        for (let j = 0; j < line.length; j++) {\n          const seg = line[j];\n          const generatedLine = i + 1;\n          const generatedColumn = seg[0];\n          let source = null;\n          let originalLine = null;\n          let originalColumn = null;\n          let name = null;\n          if (seg.length !== 1) {\n            source = resolvedSources[seg[1]];\n            originalLine = seg[2] + 1;\n            originalColumn = seg[3];\n          }\n          if (seg.length === 5) name = names[seg[4]];\n          cb({\n            generatedLine,\n            generatedColumn,\n            source,\n            originalLine,\n            originalColumn,\n            name\n          });\n        }\n      }\n    };\n    exports.sourceContentFor = (map, source) => {\n      const {\n        sources,\n        resolvedSources,\n        sourcesContent\n      } = map;\n      if (sourcesContent == null) return null;\n      let index = sources.indexOf(source);\n      if (index === -1) index = resolvedSources.indexOf(source);\n      return index === -1 ? null : sourcesContent[index];\n    };\n    exports.presortedDecodedMap = (map, mapUrl) => {\n      const tracer = new TraceMap(clone(map, []), mapUrl);\n      tracer._decoded = map.mappings;\n      return tracer;\n    };\n    exports.decodedMap = map => {\n      return clone(map, exports.decodedMappings(map));\n    };\n    exports.encodedMap = map => {\n      return clone(map, exports.encodedMappings(map));\n    };\n    function generatedPosition(map, source, line, column, bias, all) {\n      line--;\n      if (line < 0) throw new Error(LINE_GTR_ZERO);\n      if (column < 0) throw new Error(COL_GTR_EQ_ZERO);\n      const {\n        sources,\n        resolvedSources\n      } = map;\n      let sourceIndex = sources.indexOf(source);\n      if (sourceIndex === -1) sourceIndex = resolvedSources.indexOf(source);\n      if (sourceIndex === -1) return all ? [] : GMapping(null, null);\n      const generated = map._bySources || (map._bySources = buildBySources(exports.decodedMappings(map), map._bySourceMemos = sources.map(memoizedState)));\n      const segments = generated[sourceIndex][line];\n      if (segments == null) return all ? [] : GMapping(null, null);\n      const memo = map._bySourceMemos[sourceIndex];\n      if (all) return sliceGeneratedPositions(segments, memo, line, column, bias);\n      const index = traceSegmentInternal(segments, memo, line, column, bias);\n      if (index === -1) return GMapping(null, null);\n      const segment = segments[index];\n      return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);\n    }\n  })();\n  function clone(map, mappings) {\n    return {\n      version: map.version,\n      file: map.file,\n      names: map.names,\n      sourceRoot: map.sourceRoot,\n      sources: map.sources,\n      sourcesContent: map.sourcesContent,\n      mappings\n    };\n  }\n  function OMapping(source, line, column, name) {\n    return {\n      source,\n      line,\n      column,\n      name\n    };\n  }\n  function GMapping(line, column) {\n    return {\n      line,\n      column\n    };\n  }\n  function traceSegmentInternal(segments, memo, line, column, bias) {\n    let index = memoizedBinarySearch(segments, column, memo, line);\n    if (found) {\n      index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index);\n    } else if (bias === LEAST_UPPER_BOUND) index++;\n    if (index === -1 || index === segments.length) return -1;\n    return index;\n  }\n  function sliceGeneratedPositions(segments, memo, line, column, bias) {\n    let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);\n    // We ignored the bias when tracing the segment so that we're guarnateed to find the first (in\n    // insertion order) segment that matched. Even if we did respect the bias when tracing, we would\n    // still need to call `lowerBound()` to find the first segment, which is slower than just looking\n    // for the GREATEST_LOWER_BOUND to begin with. The only difference that matters for us is when the\n    // binary search didn't match, in which case GREATEST_LOWER_BOUND just needs to increment to\n    // match LEAST_UPPER_BOUND.\n    if (!found && bias === LEAST_UPPER_BOUND) min++;\n    if (min === -1 || min === segments.length) return [];\n    // We may have found the segment that started at an earlier column. If this is the case, then we\n    // need to slice all generated segments that match _that_ column, because all such segments span\n    // to our desired column.\n    const matchedColumn = found ? column : segments[min][COLUMN];\n    // The binary search is not guaranteed to find the lower bound when a match wasn't found.\n    if (!found) min = lowerBound(segments, matchedColumn, min);\n    const max = upperBound(segments, matchedColumn, min);\n    const result = [];\n    for (; min <= max; min++) {\n      const segment = segments[min];\n      result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));\n    }\n    return result;\n  }\n  exports.AnyMap = AnyMap;\n  exports.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND;\n  exports.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND;\n  exports.TraceMap = TraceMap;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"names":["global","factory","exports","module","require","define","amd","globalThis","self","traceMapping","sourcemapCodec","resolveURI","resolveUri","_interopDefaultLegacy","e","resolveUri__default","resolve","input","base","endsWith","stripFilename","path","index","lastIndexOf","slice","COLUMN","SOURCES_INDEX","SOURCE_LINE","SOURCE_COLUMN","NAMES_INDEX","REV_GENERATED_LINE","REV_GENERATED_COLUMN","maybeSort","mappings","owned","unsortedIndex","nextUnsortedSegmentLine","length","i","sortSegments","start","isSorted","line","j","sort","sortComparator","a","b","found","binarySearch","haystack","needle","low","high","mid","cmp","upperBound","lowerBound","memoizedState","lastKey","lastNeedle","lastIndex","memoizedBinarySearch","state","key","buildBySources","decoded","memos","sources","map","buildNullArray","seg","sourceIndex","sourceLine","sourceColumn","originalSource","originalLine","memo","insert","array","value","__proto__","AnyMap","mapUrl","parsed","JSON","parse","TraceMap","sourcesContent","names","recurse","Infinity","joined","version","file","presortedDecodedMap","lineOffset","columnOffset","stopLine","stopColumn","sections","offset","sl","sc","nextOffset","Math","min","column","addSection","arguments","sourcesOffset","namesOffset","decodedMappings","resolvedSources","contents","append","push","lineI","out","getLine","cOffset","sourcesIndex","arr","other","LINE_GTR_ZERO","COL_GTR_EQ_ZERO","LEAST_UPPER_BOUND","GREATEST_LOWER_BOUND","encodedMappings","traceSegment","originalPositionFor","generatedPositionFor","allGeneratedPositionsFor","eachMapping","sourceContentFor","decodedMap","encodedMap","constructor","isString","_decodedMemo","sourceRoot","from","s","_encoded","_decoded","undefined","_bySources","_bySourceMemos","_a","encode","decode","segments","traceSegmentInternal","bias","Error","OMapping","segment","source","generatedPosition","cb","generatedLine","generatedColumn","originalColumn","name","indexOf","tracer","clone","all","GMapping","generated","sliceGeneratedPositions","matchedColumn","max","result","Object","defineProperty"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@jridgewell/sourcemap-codec'), require('@jridgewell/resolve-uri')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@jridgewell/sourcemap-codec', '@jridgewell/resolve-uri'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.traceMapping = {}, global.sourcemapCodec, global.resolveURI));\n})(this, (function (exports, sourcemapCodec, resolveUri) { 'use strict';\n\n    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n    var resolveUri__default = /*#__PURE__*/_interopDefaultLegacy(resolveUri);\n\n    function resolve(input, base) {\n        // The base is always treated as a directory, if it's not empty.\n        // https://github.com/mozilla/source-map/blob/8cb3ee57/lib/util.js#L327\n        // https://github.com/chromium/chromium/blob/da4adbb3/third_party/blink/renderer/devtools/front_end/sdk/SourceMap.js#L400-L401\n        if (base && !base.endsWith('/'))\n            base += '/';\n        return resolveUri__default[\"default\"](input, base);\n    }\n\n    /**\n     * Removes everything after the last \"/\", but leaves the slash.\n     */\n    function stripFilename(path) {\n        if (!path)\n            return '';\n        const index = path.lastIndexOf('/');\n        return path.slice(0, index + 1);\n    }\n\n    const COLUMN = 0;\n    const SOURCES_INDEX = 1;\n    const SOURCE_LINE = 2;\n    const SOURCE_COLUMN = 3;\n    const NAMES_INDEX = 4;\n    const REV_GENERATED_LINE = 1;\n    const REV_GENERATED_COLUMN = 2;\n\n    function maybeSort(mappings, owned) {\n        const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);\n        if (unsortedIndex === mappings.length)\n            return mappings;\n        // If we own the array (meaning we parsed it from JSON), then we're free to directly mutate it. If\n        // not, we do not want to modify the consumer's input array.\n        if (!owned)\n            mappings = mappings.slice();\n        for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {\n            mappings[i] = sortSegments(mappings[i], owned);\n        }\n        return mappings;\n    }\n    function nextUnsortedSegmentLine(mappings, start) {\n        for (let i = start; i < mappings.length; i++) {\n            if (!isSorted(mappings[i]))\n                return i;\n        }\n        return mappings.length;\n    }\n    function isSorted(line) {\n        for (let j = 1; j < line.length; j++) {\n            if (line[j][COLUMN] < line[j - 1][COLUMN]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function sortSegments(line, owned) {\n        if (!owned)\n            line = line.slice();\n        return line.sort(sortComparator);\n    }\n    function sortComparator(a, b) {\n        return a[COLUMN] - b[COLUMN];\n    }\n\n    let found = false;\n    /**\n     * A binary search implementation that returns the index if a match is found.\n     * If no match is found, then the left-index (the index associated with the item that comes just\n     * before the desired index) is returned. To maintain proper sort order, a splice would happen at\n     * the next index:\n     *\n     * ```js\n     * const array = [1, 3];\n     * const needle = 2;\n     * const index = binarySearch(array, needle, (item, needle) => item - needle);\n     *\n     * assert.equal(index, 0);\n     * array.splice(index + 1, 0, needle);\n     * assert.deepEqual(array, [1, 2, 3]);\n     * ```\n     */\n    function binarySearch(haystack, needle, low, high) {\n        while (low <= high) {\n            const mid = low + ((high - low) >> 1);\n            const cmp = haystack[mid][COLUMN] - needle;\n            if (cmp === 0) {\n                found = true;\n                return mid;\n            }\n            if (cmp < 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        found = false;\n        return low - 1;\n    }\n    function upperBound(haystack, needle, index) {\n        for (let i = index + 1; i < haystack.length; index = i++) {\n            if (haystack[i][COLUMN] !== needle)\n                break;\n        }\n        return index;\n    }\n    function lowerBound(haystack, needle, index) {\n        for (let i = index - 1; i >= 0; index = i--) {\n            if (haystack[i][COLUMN] !== needle)\n                break;\n        }\n        return index;\n    }\n    function memoizedState() {\n        return {\n            lastKey: -1,\n            lastNeedle: -1,\n            lastIndex: -1,\n        };\n    }\n    /**\n     * This overly complicated beast is just to record the last tested line/column and the resulting\n     * index, allowing us to skip a few tests if mappings are monotonically increasing.\n     */\n    function memoizedBinarySearch(haystack, needle, state, key) {\n        const { lastKey, lastNeedle, lastIndex } = state;\n        let low = 0;\n        let high = haystack.length - 1;\n        if (key === lastKey) {\n            if (needle === lastNeedle) {\n                found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle;\n                return lastIndex;\n            }\n            if (needle >= lastNeedle) {\n                // lastIndex may be -1 if the previous needle was not found.\n                low = lastIndex === -1 ? 0 : lastIndex;\n            }\n            else {\n                high = lastIndex;\n            }\n        }\n        state.lastKey = key;\n        state.lastNeedle = needle;\n        return (state.lastIndex = binarySearch(haystack, needle, low, high));\n    }\n\n    // Rebuilds the original source files, with mappings that are ordered by source line/column instead\n    // of generated line/column.\n    function buildBySources(decoded, memos) {\n        const sources = memos.map(buildNullArray);\n        for (let i = 0; i < decoded.length; i++) {\n            const line = decoded[i];\n            for (let j = 0; j < line.length; j++) {\n                const seg = line[j];\n                if (seg.length === 1)\n                    continue;\n                const sourceIndex = seg[SOURCES_INDEX];\n                const sourceLine = seg[SOURCE_LINE];\n                const sourceColumn = seg[SOURCE_COLUMN];\n                const originalSource = sources[sourceIndex];\n                const originalLine = (originalSource[sourceLine] || (originalSource[sourceLine] = []));\n                const memo = memos[sourceIndex];\n                // The binary search either found a match, or it found the left-index just before where the\n                // segment should go. Either way, we want to insert after that. And there may be multiple\n                // generated segments associated with an original location, so there may need to move several\n                // indexes before we find where we need to insert.\n                const index = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));\n                insert(originalLine, (memo.lastIndex = index + 1), [sourceColumn, i, seg[COLUMN]]);\n            }\n        }\n        return sources;\n    }\n    function insert(array, index, value) {\n        for (let i = array.length; i > index; i--) {\n            array[i] = array[i - 1];\n        }\n        array[index] = value;\n    }\n    // Null arrays allow us to use ordered index keys without actually allocating contiguous memory like\n    // a real array. We use a null-prototype object to avoid prototype pollution and deoptimizations.\n    // Numeric properties on objects are magically sorted in ascending order by the engine regardless of\n    // the insertion order. So, by setting any numeric keys, even out of order, we'll get ascending\n    // order when iterating with for-in.\n    function buildNullArray() {\n        return { __proto__: null };\n    }\n\n    const AnyMap = function (map, mapUrl) {\n        const parsed = typeof map === 'string' ? JSON.parse(map) : map;\n        if (!('sections' in parsed))\n            return new TraceMap(parsed, mapUrl);\n        const mappings = [];\n        const sources = [];\n        const sourcesContent = [];\n        const names = [];\n        recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, 0, 0, Infinity, Infinity);\n        const joined = {\n            version: 3,\n            file: parsed.file,\n            names,\n            sources,\n            sourcesContent,\n            mappings,\n        };\n        return exports.presortedDecodedMap(joined);\n    };\n    function recurse(input, mapUrl, mappings, sources, sourcesContent, names, lineOffset, columnOffset, stopLine, stopColumn) {\n        const { sections } = input;\n        for (let i = 0; i < sections.length; i++) {\n            const { map, offset } = sections[i];\n            let sl = stopLine;\n            let sc = stopColumn;\n            if (i + 1 < sections.length) {\n                const nextOffset = sections[i + 1].offset;\n                sl = Math.min(stopLine, lineOffset + nextOffset.line);\n                if (sl === stopLine) {\n                    sc = Math.min(stopColumn, columnOffset + nextOffset.column);\n                }\n                else if (sl < stopLine) {\n                    sc = columnOffset + nextOffset.column;\n                }\n            }\n            addSection(map, mapUrl, mappings, sources, sourcesContent, names, lineOffset + offset.line, columnOffset + offset.column, sl, sc);\n        }\n    }\n    function addSection(input, mapUrl, mappings, sources, sourcesContent, names, lineOffset, columnOffset, stopLine, stopColumn) {\n        if ('sections' in input)\n            return recurse(...arguments);\n        const map = new TraceMap(input, mapUrl);\n        const sourcesOffset = sources.length;\n        const namesOffset = names.length;\n        const decoded = exports.decodedMappings(map);\n        const { resolvedSources, sourcesContent: contents } = map;\n        append(sources, resolvedSources);\n        append(names, map.names);\n        if (contents)\n            append(sourcesContent, contents);\n        else\n            for (let i = 0; i < resolvedSources.length; i++)\n                sourcesContent.push(null);\n        for (let i = 0; i < decoded.length; i++) {\n            const lineI = lineOffset + i;\n            // We can only add so many lines before we step into the range that the next section's map\n            // controls. When we get to the last line, then we'll start checking the segments to see if\n            // they've crossed into the column range. But it may not have any columns that overstep, so we\n            // still need to check that we don't overstep lines, too.\n            if (lineI > stopLine)\n                return;\n            // The out line may already exist in mappings (if we're continuing the line started by a\n            // previous section). Or, we may have jumped ahead several lines to start this section.\n            const out = getLine(mappings, lineI);\n            // On the 0th loop, the section's column offset shifts us forward. On all other lines (since the\n            // map can be multiple lines), it doesn't.\n            const cOffset = i === 0 ? columnOffset : 0;\n            const line = decoded[i];\n            for (let j = 0; j < line.length; j++) {\n                const seg = line[j];\n                const column = cOffset + seg[COLUMN];\n                // If this segment steps into the column range that the next section's map controls, we need\n                // to stop early.\n                if (lineI === stopLine && column >= stopColumn)\n                    return;\n                if (seg.length === 1) {\n                    out.push([column]);\n                    continue;\n                }\n                const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX];\n                const sourceLine = seg[SOURCE_LINE];\n                const sourceColumn = seg[SOURCE_COLUMN];\n                out.push(seg.length === 4\n                    ? [column, sourcesIndex, sourceLine, sourceColumn]\n                    : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]);\n            }\n        }\n    }\n    function append(arr, other) {\n        for (let i = 0; i < other.length; i++)\n            arr.push(other[i]);\n    }\n    function getLine(arr, index) {\n        for (let i = arr.length; i <= index; i++)\n            arr[i] = [];\n        return arr[index];\n    }\n\n    const LINE_GTR_ZERO = '`line` must be greater than 0 (lines start at line 1)';\n    const COL_GTR_EQ_ZERO = '`column` must be greater than or equal to 0 (columns start at column 0)';\n    const LEAST_UPPER_BOUND = -1;\n    const GREATEST_LOWER_BOUND = 1;\n    /**\n     * Returns the encoded (VLQ string) form of the SourceMap's mappings field.\n     */\n    exports.encodedMappings = void 0;\n    /**\n     * Returns the decoded (array of lines of segments) form of the SourceMap's mappings field.\n     */\n    exports.decodedMappings = void 0;\n    /**\n     * A low-level API to find the segment associated with a generated line/column (think, from a\n     * stack trace). Line and column here are 0-based, unlike `originalPositionFor`.\n     */\n    exports.traceSegment = void 0;\n    /**\n     * A higher-level API to find the source/line/column associated with a generated line/column\n     * (think, from a stack trace). Line is 1-based, but column is 0-based, due to legacy behavior in\n     * `source-map` library.\n     */\n    exports.originalPositionFor = void 0;\n    /**\n     * Finds the generated line/column position of the provided source/line/column source position.\n     */\n    exports.generatedPositionFor = void 0;\n    /**\n     * Finds all generated line/column positions of the provided source/line/column source position.\n     */\n    exports.allGeneratedPositionsFor = void 0;\n    /**\n     * Iterates each mapping in generated position order.\n     */\n    exports.eachMapping = void 0;\n    /**\n     * Retrieves the source content for a particular source, if its found. Returns null if not.\n     */\n    exports.sourceContentFor = void 0;\n    /**\n     * A helper that skips sorting of the input map's mappings array, which can be expensive for larger\n     * maps.\n     */\n    exports.presortedDecodedMap = void 0;\n    /**\n     * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n     * a sourcemap, or to JSON.stringify.\n     */\n    exports.decodedMap = void 0;\n    /**\n     * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n     * a sourcemap, or to JSON.stringify.\n     */\n    exports.encodedMap = void 0;\n    class TraceMap {\n        constructor(map, mapUrl) {\n            const isString = typeof map === 'string';\n            if (!isString && map._decodedMemo)\n                return map;\n            const parsed = (isString ? JSON.parse(map) : map);\n            const { version, file, names, sourceRoot, sources, sourcesContent } = parsed;\n            this.version = version;\n            this.file = file;\n            this.names = names;\n            this.sourceRoot = sourceRoot;\n            this.sources = sources;\n            this.sourcesContent = sourcesContent;\n            const from = resolve(sourceRoot || '', stripFilename(mapUrl));\n            this.resolvedSources = sources.map((s) => resolve(s || '', from));\n            const { mappings } = parsed;\n            if (typeof mappings === 'string') {\n                this._encoded = mappings;\n                this._decoded = undefined;\n            }\n            else {\n                this._encoded = undefined;\n                this._decoded = maybeSort(mappings, isString);\n            }\n            this._decodedMemo = memoizedState();\n            this._bySources = undefined;\n            this._bySourceMemos = undefined;\n        }\n    }\n    (() => {\n        exports.encodedMappings = (map) => {\n            var _a;\n            return ((_a = map._encoded) !== null && _a !== void 0 ? _a : (map._encoded = sourcemapCodec.encode(map._decoded)));\n        };\n        exports.decodedMappings = (map) => {\n            return (map._decoded || (map._decoded = sourcemapCodec.decode(map._encoded)));\n        };\n        exports.traceSegment = (map, line, column) => {\n            const decoded = exports.decodedMappings(map);\n            // It's common for parent source maps to have pointers to lines that have no\n            // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n            if (line >= decoded.length)\n                return null;\n            const segments = decoded[line];\n            const index = traceSegmentInternal(segments, map._decodedMemo, line, column, GREATEST_LOWER_BOUND);\n            return index === -1 ? null : segments[index];\n        };\n        exports.originalPositionFor = (map, { line, column, bias }) => {\n            line--;\n            if (line < 0)\n                throw new Error(LINE_GTR_ZERO);\n            if (column < 0)\n                throw new Error(COL_GTR_EQ_ZERO);\n            const decoded = exports.decodedMappings(map);\n            // It's common for parent source maps to have pointers to lines that have no\n            // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n            if (line >= decoded.length)\n                return OMapping(null, null, null, null);\n            const segments = decoded[line];\n            const index = traceSegmentInternal(segments, map._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);\n            if (index === -1)\n                return OMapping(null, null, null, null);\n            const segment = segments[index];\n            if (segment.length === 1)\n                return OMapping(null, null, null, null);\n            const { names, resolvedSources } = map;\n            return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], segment.length === 5 ? names[segment[NAMES_INDEX]] : null);\n        };\n        exports.allGeneratedPositionsFor = (map, { source, line, column, bias }) => {\n            // SourceMapConsumer uses LEAST_UPPER_BOUND for some reason, so we follow suit.\n            return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);\n        };\n        exports.generatedPositionFor = (map, { source, line, column, bias }) => {\n            return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);\n        };\n        exports.eachMapping = (map, cb) => {\n            const decoded = exports.decodedMappings(map);\n            const { names, resolvedSources } = map;\n            for (let i = 0; i < decoded.length; i++) {\n                const line = decoded[i];\n                for (let j = 0; j < line.length; j++) {\n                    const seg = line[j];\n                    const generatedLine = i + 1;\n                    const generatedColumn = seg[0];\n                    let source = null;\n                    let originalLine = null;\n                    let originalColumn = null;\n                    let name = null;\n                    if (seg.length !== 1) {\n                        source = resolvedSources[seg[1]];\n                        originalLine = seg[2] + 1;\n                        originalColumn = seg[3];\n                    }\n                    if (seg.length === 5)\n                        name = names[seg[4]];\n                    cb({\n                        generatedLine,\n                        generatedColumn,\n                        source,\n                        originalLine,\n                        originalColumn,\n                        name,\n                    });\n                }\n            }\n        };\n        exports.sourceContentFor = (map, source) => {\n            const { sources, resolvedSources, sourcesContent } = map;\n            if (sourcesContent == null)\n                return null;\n            let index = sources.indexOf(source);\n            if (index === -1)\n                index = resolvedSources.indexOf(source);\n            return index === -1 ? null : sourcesContent[index];\n        };\n        exports.presortedDecodedMap = (map, mapUrl) => {\n            const tracer = new TraceMap(clone(map, []), mapUrl);\n            tracer._decoded = map.mappings;\n            return tracer;\n        };\n        exports.decodedMap = (map) => {\n            return clone(map, exports.decodedMappings(map));\n        };\n        exports.encodedMap = (map) => {\n            return clone(map, exports.encodedMappings(map));\n        };\n        function generatedPosition(map, source, line, column, bias, all) {\n            line--;\n            if (line < 0)\n                throw new Error(LINE_GTR_ZERO);\n            if (column < 0)\n                throw new Error(COL_GTR_EQ_ZERO);\n            const { sources, resolvedSources } = map;\n            let sourceIndex = sources.indexOf(source);\n            if (sourceIndex === -1)\n                sourceIndex = resolvedSources.indexOf(source);\n            if (sourceIndex === -1)\n                return all ? [] : GMapping(null, null);\n            const generated = (map._bySources || (map._bySources = buildBySources(exports.decodedMappings(map), (map._bySourceMemos = sources.map(memoizedState)))));\n            const segments = generated[sourceIndex][line];\n            if (segments == null)\n                return all ? [] : GMapping(null, null);\n            const memo = map._bySourceMemos[sourceIndex];\n            if (all)\n                return sliceGeneratedPositions(segments, memo, line, column, bias);\n            const index = traceSegmentInternal(segments, memo, line, column, bias);\n            if (index === -1)\n                return GMapping(null, null);\n            const segment = segments[index];\n            return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);\n        }\n    })();\n    function clone(map, mappings) {\n        return {\n            version: map.version,\n            file: map.file,\n            names: map.names,\n            sourceRoot: map.sourceRoot,\n            sources: map.sources,\n            sourcesContent: map.sourcesContent,\n            mappings,\n        };\n    }\n    function OMapping(source, line, column, name) {\n        return { source, line, column, name };\n    }\n    function GMapping(line, column) {\n        return { line, column };\n    }\n    function traceSegmentInternal(segments, memo, line, column, bias) {\n        let index = memoizedBinarySearch(segments, column, memo, line);\n        if (found) {\n            index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index);\n        }\n        else if (bias === LEAST_UPPER_BOUND)\n            index++;\n        if (index === -1 || index === segments.length)\n            return -1;\n        return index;\n    }\n    function sliceGeneratedPositions(segments, memo, line, column, bias) {\n        let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);\n        // We ignored the bias when tracing the segment so that we're guarnateed to find the first (in\n        // insertion order) segment that matched. Even if we did respect the bias when tracing, we would\n        // still need to call `lowerBound()` to find the first segment, which is slower than just looking\n        // for the GREATEST_LOWER_BOUND to begin with. The only difference that matters for us is when the\n        // binary search didn't match, in which case GREATEST_LOWER_BOUND just needs to increment to\n        // match LEAST_UPPER_BOUND.\n        if (!found && bias === LEAST_UPPER_BOUND)\n            min++;\n        if (min === -1 || min === segments.length)\n            return [];\n        // We may have found the segment that started at an earlier column. If this is the case, then we\n        // need to slice all generated segments that match _that_ column, because all such segments span\n        // to our desired column.\n        const matchedColumn = found ? column : segments[min][COLUMN];\n        // The binary search is not guaranteed to find the lower bound when a match wasn't found.\n        if (!found)\n            min = lowerBound(segments, matchedColumn, min);\n        const max = upperBound(segments, matchedColumn, min);\n        const result = [];\n        for (; min <= max; min++) {\n            const segment = segments[min];\n            result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));\n        }\n        return result;\n    }\n\n    exports.AnyMap = AnyMap;\n    exports.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND;\n    exports.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND;\n    exports.TraceMap = TraceMap;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}