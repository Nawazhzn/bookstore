{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/auth.service\";\nimport * as i2 from \"../_services/storage.service\";\nimport * as i3 from \"@angular/forms\";\nexport class LoginComponent {\n  constructor(authService, storageService) {\n    this.authService = authService;\n    this.storageService = storageService;\n    this.form = {\n      username: null,\n      password: null\n    };\n    this.isLoggedIn = false;\n    this.isLoginFailed = false;\n    this.errorMessage = '';\n    this.roles = [];\n  }\n  ngOnInit() {\n    if (this.storageService.isLoggedIn()) {\n      this.isLoggedIn = true;\n      this.roles = this.storageService.getUser().roles;\n    }\n  }\n  onSubmit() {\n    const {\n      username,\n      password\n    } = this.form;\n    this.authService.login(username, password).subscribe({\n      next: data => {\n        this.storageService.saveUser(data);\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.storageService.getUser().roles;\n        this.reloadPage();\n      },\n      error: err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    });\n  }\n  reloadPage() {\n    window.location.reload();\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.StorageService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 21,\n  vars: 0,\n  consts: [[1, \"fullcontent\"], [1, \"headings\"], [1, \"formbox\"], [\"id\", \"form\", \"action\", \"\", \"method\", \"post\"], [\"for\", \"\"], [\"type\", \"text\", \"name\", \"username\", 1, \"asd\"], [\"type\", \"password\", \"id\", \"\", \"name\", \"password\", 1, \"asd\"], [\"id\", \"btn\", \"type\", \"submit\", \"name\", \"submit\", \"value\", \"Log In\", 1, \"mainbox\"], [\"href\", \"register.html\", 1, \"mainbox\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\");\n      i0.ɵɵtext(3, \"The Engineering Book Store\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"h2\");\n      i0.ɵɵtext(5, \"Welcome to the engineering book store.Here you can find all the books related to engineering.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"div\", 2)(7, \"h3\");\n      i0.ɵɵtext(8, \"Log In\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"form\", 3)(10, \"label\", 4);\n      i0.ɵɵtext(11, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 5);\n      i0.ɵɵelementStart(13, \"label\", 4);\n      i0.ɵɵtext(14, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"input\", 6)(16, \"input\", 7);\n      i0.ɵɵelementStart(17, \"label\", 4);\n      i0.ɵɵtext(18, \"New customer?\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"a\", 8);\n      i0.ɵɵtext(20, \"Register Now\");\n      i0.ɵɵelementEnd()()()();\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.NgForm],\n  styles: [\"var[_ngcontent-%COMP%]   resource[_ngcontent-%COMP%];\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\tvar __webpack_modules__ = ({\\n\\n 49:\\n\\n (() => {\\n\\nthrow new Error(\\\"Module build failed (from ./node_modules/postcss-loader/dist/cjs.js):\\\\nSyntaxError\\\\n\\\\n(76:5) C:\\\\\\\\Users\\\\\\\\Nawaz\\\\\\\\Downloads\\\\\\\\mean-stack-authentication-authorization-master\\\\\\\\mean-stack-authentication-authorization-master\\\\\\\\frontend\\\\\\\\src\\\\\\\\app\\\\\\\\login\\\\\\\\login.component.css Unknown word\\\\n\\\\n \\\\u001b[90m 74 | \\\\u001b[39m    \\\\u001b[90m\\\\u001b[39m\\\\n \\\\u001b[90m 75 | \\\\u001b[39m    */\\\\n\\\\u001b[1m\\\\u001b[31m>\\\\u001b[39m\\\\u001b[22m\\\\u001b[90m 76 | \\\\u001b[39m    display\\\\u001b[33m:\\\\u001b[39m cover\\\\u001b[33m;\\\\u001b[39m\\\\n \\\\u001b[90m    | \\\\u001b[39m    \\\\u001b[1m\\\\u001b[31m^\\\\u001b[39m\\\\u001b[22m\\\\n \\\\u001b[90m 77 | \\\\u001b[39m    background-position\\\\u001b[33m:\\\\u001b[39m 50% 50%\\\\u001b[33m;\\\\u001b[39m\\\\n \\\\u001b[90m 78 | \\\\u001b[39m    display\\\\u001b[33m:\\\\u001b[39m flex\\\\u001b[33m;\\\\u001b[39m\\\\n\\\");\\n\\n })\\n\\n \\t});\\n\\n \\t\\n \\t// startup\\n \\t// Load entry module and return exports\\n \\t// This entry module doesn't tell about it's top-level declarations so it can't be inlined\\n \\tvar __webpack_exports__ = {};\\n \\t__webpack_modules__[49]();\\n \\tresource = __webpack_exports__;\\n \\t\\n })()\\n;\\n/*# sourceMappingURL=login.component.css.map*/\"]\n});","map":{"version":3,"mappings":";;;;AASA,OAAM,MAAOA,cAAc;EAUzBC,YAAoBC,WAAwB,EAAUC,cAA8B;IAAhE,gBAAW,GAAXD,WAAW;IAAuB,mBAAc,GAAdC,cAAc;IATpE,SAAI,GAAQ;MACVC,QAAQ,EAAE,IAAI;MACdC,QAAQ,EAAE;KACX;IACD,eAAU,GAAG,KAAK;IAClB,kBAAa,GAAG,KAAK;IACrB,iBAAY,GAAG,EAAE;IACjB,UAAK,GAAa,EAAE;EAEoE;EAExFC,QAAQ;IACN,IAAI,IAAI,CAACH,cAAc,CAACI,UAAU,EAAE,EAAE;MACpC,IAAI,CAACA,UAAU,GAAG,IAAI;MACtB,IAAI,CAACC,KAAK,GAAG,IAAI,CAACL,cAAc,CAACM,OAAO,EAAE,CAACD,KAAK;;EAEpD;EAEAE,QAAQ;IACN,MAAM;MAAEN,QAAQ;MAAEC;IAAQ,CAAE,GAAG,IAAI,CAACM,IAAI;IAExC,IAAI,CAACT,WAAW,CAACU,KAAK,CAACR,QAAQ,EAAEC,QAAQ,CAAC,CAACQ,SAAS,CAAC;MACnDC,IAAI,EAAEC,IAAI,IAAG;QACX,IAAI,CAACZ,cAAc,CAACa,QAAQ,CAACD,IAAI,CAAC;QAElC,IAAI,CAACE,aAAa,GAAG,KAAK;QAC1B,IAAI,CAACV,UAAU,GAAG,IAAI;QACtB,IAAI,CAACC,KAAK,GAAG,IAAI,CAACL,cAAc,CAACM,OAAO,EAAE,CAACD,KAAK;QAChD,IAAI,CAACU,UAAU,EAAE;MACnB,CAAC;MACDC,KAAK,EAAEC,GAAG,IAAG;QACX,IAAI,CAACC,YAAY,GAAGD,GAAG,CAACD,KAAK,CAACG,OAAO;QACrC,IAAI,CAACL,aAAa,GAAG,IAAI;MAC3B;KACD,CAAC;EACJ;EAEAC,UAAU;IACRK,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;EAC1B;;;mBAxCWzB,cAAc;AAAA;;QAAdA,cAAc;EAAA0B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCP3BC,8BAAyB;MAEfA,0CAA0B;MAAAA,iBAAK;MACnCA,0BAAI;MAAAA,6GAA+F;MAAAA,iBAAK;MAE5GA,8BAAqB;MACbA,sBAAM;MAAAA,iBAAK;MACfA,+BAAwC;MACtBA,yBAAQ;MAAAA,iBAAQ;MAC9BA,4BAAgD;MAChDA,iCAAc;MAAAA,yBAAQ;MAAAA,iBAAQ;MAC9BA,4BAA0D;MAE1DA,iCAAc;MAAAA,8BAAa;MAAAA,iBAAQ;MACnCA,6BAAwC;MAAAA,6BAAY;MAAAA,iBAAI","names":["LoginComponent","constructor","authService","storageService","username","password","ngOnInit","isLoggedIn","roles","getUser","onSubmit","form","login","subscribe","next","data","saveUser","isLoginFailed","reloadPage","error","err","errorMessage","message","window","location","reload","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\Nawaz\\Downloads\\mean-stack-authentication-authorization-master\\mean-stack-authentication-authorization-master\\frontend\\src\\app\\login\\login.component.ts","C:\\Users\\Nawaz\\Downloads\\mean-stack-authentication-authorization-master\\mean-stack-authentication-authorization-master\\frontend\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\nimport { StorageService } from '../_services/storage.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  form: any = {\n    username: null,\n    password: null\n  };\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  roles: string[] = [];\n\n  constructor(private authService: AuthService, private storageService: StorageService) { }\n\n  ngOnInit(): void {\n    if (this.storageService.isLoggedIn()) {\n      this.isLoggedIn = true;\n      this.roles = this.storageService.getUser().roles;\n    }\n  }\n\n  onSubmit(): void {\n    const { username, password } = this.form;\n\n    this.authService.login(username, password).subscribe({\n      next: data => {\n        this.storageService.saveUser(data);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.storageService.getUser().roles;\n        this.reloadPage();\n      },\n      error: err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    });\n  }\n\n  reloadPage(): void {\n    window.location.reload();\n  }\n}\n","\n\n<div class=\"fullcontent\">\n  <div class=\"headings\">\n      <h1>The Engineering Book Store</h1>\n      <h2>Welcome to the engineering book store.Here you  can find  all the books related to engineering.</h2>\n  </div>\n  <div class=\"formbox\">\n      <h3>Log In</h3>\n      <form id=\"form\" action=\"\" method=\"post\">\n          <label for=\"\">Username</label>\n          <input type=\"text\" name=\"username\" class=\"asd\"/>\n          <label for=\"\">Password</label>\n          <input type=\"password\" id=\"\" name=\"password\" class=\"asd\"/>\n          <input id=\"btn\" type=\"submit\" name=\"submit\" value=\"Log In\" class=\"mainbox\">\n          <label for=\"\">New customer?</label>\n          <a href=\"register.html\" class=\"mainbox\">Register Now</a>\n      </form>\n  </div>\n</div>\n\n\n\n\n\n\n\n\n<!--\n<body>\n        <div class=\"containermain\">\n\n          <div class=\"col-md-12\">\n            <div class=\"card card-container\">\n              <img\n                id=\"profile-img\"\n                src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                class=\"profile-img-card\"\n              />\n              <form\n                *ngIf=\"!isLoggedIn\"\n                name=\"form\"\n                (ngSubmit)=\"f.form.valid && onSubmit()\"\n                #f=\"ngForm\"\n                novalidate\n              >\n                <div class=\"form-group\">\n                  <label for=\"username\">Username</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    name=\"username\"\n                    [(ngModel)]=\"form.username\"\n                    required\n                    #username=\"ngModel\"\n                    [ngClass]=\"{ 'is-invalid': f.submitted && username.errors }\"\n                  />\n                  <div *ngIf=\"username.errors && f.submitted\" class=\"invalid-feedback\">\n                    Username is required!\n                  </div>\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"password\">Password</label>\n                  <input\n                    type=\"password\"\n                    class=\"form-control\"\n                    name=\"password\"\n                    [(ngModel)]=\"form.password\"\n                    required\n                    minlength=\"6\"\n                    #password=\"ngModel\"\n                    [ngClass]=\"{ 'is-invalid': f.submitted && password.errors }\"\n                  />\n                  <div *ngIf=\"password.errors && f.submitted\" class=\"invalid-feedback\">\n                    <div *ngIf=\"password.errors['required']\">Password is required</div>\n                    <div *ngIf=\"password.errors['minlength']\">\n                      Password must be at least 6 characters\n                    </div>\n                  </div>\n                </div>\n                <div class=\"form-group\">\n                  <button class=\"btn btn-primary btn-block\">\n                    Login\n                  </button>\n                </div>\n                <div class=\"form-group\">\n                  <div *ngIf=\"f.submitted && isLoginFailed\" class=\"alert alert-danger\" role=\"alert\">\n                    Login failed: {{ errorMessage }}\n                  </div>\n                </div>\n              </form>\n\n              <div class=\"alert alert-success\" *ngIf=\"isLoggedIn\">\n                Logged in as {{ roles }}.\n              </div>\n            </div>\n          </div>\n          </div>\n</body> -->\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}