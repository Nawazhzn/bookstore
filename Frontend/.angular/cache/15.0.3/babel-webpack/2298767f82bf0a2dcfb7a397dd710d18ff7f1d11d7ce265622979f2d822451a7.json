{"ast":null,"code":"'use strict';\n\nconst path = require('path');\nconst assert = require('assert');\nconst logger = require('./logger');\nconst log = logger.create('config');\nconst helper = require('./helper');\nconst constant = require('./constants');\nconst _ = require('lodash');\nlet COFFEE_SCRIPT_AVAILABLE = false;\nlet LIVE_SCRIPT_AVAILABLE = false;\nlet TYPE_SCRIPT_AVAILABLE = false;\ntry {\n  require('coffeescript').register();\n  COFFEE_SCRIPT_AVAILABLE = true;\n} catch {}\n\n// LiveScript is required here to enable config files written in LiveScript.\n// It's not directly used in this file.\ntry {\n  require('LiveScript');\n  LIVE_SCRIPT_AVAILABLE = true;\n} catch {}\ntry {\n  require('ts-node');\n  TYPE_SCRIPT_AVAILABLE = true;\n} catch {}\nclass Pattern {\n  constructor(pattern, served, included, watched, nocache, type, isBinary, integrity) {\n    this.pattern = pattern;\n    this.served = helper.isDefined(served) ? served : true;\n    this.included = helper.isDefined(included) ? included : true;\n    this.watched = helper.isDefined(watched) ? watched : true;\n    this.nocache = helper.isDefined(nocache) ? nocache : false;\n    this.weight = helper.mmPatternWeight(pattern);\n    this.type = type;\n    this.isBinary = isBinary;\n    this.integrity = integrity;\n  }\n  compare(other) {\n    return helper.mmComparePatternWeights(this.weight, other.weight);\n  }\n}\nclass UrlPattern extends Pattern {\n  constructor(url, type, integrity) {\n    super(url, false, true, false, false, type, undefined, integrity);\n  }\n}\nfunction createPatternObject(pattern) {\n  if (pattern && helper.isString(pattern)) {\n    return helper.isUrlAbsolute(pattern) ? new UrlPattern(pattern) : new Pattern(pattern);\n  } else if (helper.isObject(pattern) && pattern.pattern && helper.isString(pattern.pattern)) {\n    return helper.isUrlAbsolute(pattern.pattern) ? new UrlPattern(pattern.pattern, pattern.type, pattern.integrity) : new Pattern(pattern.pattern, pattern.served, pattern.included, pattern.watched, pattern.nocache, pattern.type);\n  } else {\n    log.warn(`Invalid pattern ${pattern}!\\n\\tExpected string or object with \"pattern\" property.`);\n    return new Pattern(null, false, false, false, false);\n  }\n}\nfunction normalizeUrl(url) {\n  if (!url.startsWith('/')) {\n    url = `/${url}`;\n  }\n  if (!url.endsWith('/')) {\n    url = url + '/';\n  }\n  return url;\n}\nfunction normalizeUrlRoot(urlRoot) {\n  const normalizedUrlRoot = normalizeUrl(urlRoot);\n  if (normalizedUrlRoot !== urlRoot) {\n    log.warn(`urlRoot normalized to \"${normalizedUrlRoot}\"`);\n  }\n  return normalizedUrlRoot;\n}\nfunction normalizeProxyPath(proxyPath) {\n  const normalizedProxyPath = normalizeUrl(proxyPath);\n  if (normalizedProxyPath !== proxyPath) {\n    log.warn(`proxyPath normalized to \"${normalizedProxyPath}\"`);\n  }\n  return normalizedProxyPath;\n}\nfunction normalizeConfig(config, configFilePath) {\n  function basePathResolve(relativePath) {\n    if (helper.isUrlAbsolute(relativePath)) {\n      return relativePath;\n    } else if (helper.isDefined(config.basePath) && helper.isDefined(relativePath)) {\n      return path.resolve(config.basePath, relativePath);\n    } else {\n      return '';\n    }\n  }\n  function createPatternMapper(resolve) {\n    return objectPattern => Object.assign(objectPattern, {\n      pattern: resolve(objectPattern.pattern)\n    });\n  }\n  if (helper.isString(configFilePath)) {\n    config.basePath = path.resolve(path.dirname(configFilePath), config.basePath); // resolve basePath\n    config.exclude.push(configFilePath); // always ignore the config file itself\n  } else {\n    config.basePath = path.resolve(config.basePath || '.');\n  }\n  config.files = config.files.map(createPatternObject).map(createPatternMapper(basePathResolve));\n  config.exclude = config.exclude.map(basePathResolve);\n  config.customContextFile = config.customContextFile && basePathResolve(config.customContextFile);\n  config.customDebugFile = config.customDebugFile && basePathResolve(config.customDebugFile);\n  config.customClientContextFile = config.customClientContextFile && basePathResolve(config.customClientContextFile);\n\n  // normalize paths on windows\n  config.basePath = helper.normalizeWinPath(config.basePath);\n  config.files = config.files.map(createPatternMapper(helper.normalizeWinPath));\n  config.exclude = config.exclude.map(helper.normalizeWinPath);\n  config.customContextFile = helper.normalizeWinPath(config.customContextFile);\n  config.customDebugFile = helper.normalizeWinPath(config.customDebugFile);\n  config.customClientContextFile = helper.normalizeWinPath(config.customClientContextFile);\n\n  // normalize urlRoot\n  config.urlRoot = normalizeUrlRoot(config.urlRoot);\n\n  // normalize and default upstream proxy settings if given\n  if (config.upstreamProxy) {\n    const proxy = config.upstreamProxy;\n    proxy.path = helper.isDefined(proxy.path) ? normalizeProxyPath(proxy.path) : '/';\n    proxy.hostname = helper.isDefined(proxy.hostname) ? proxy.hostname : 'localhost';\n    proxy.port = helper.isDefined(proxy.port) ? proxy.port : 9875;\n\n    // force protocol to end with ':'\n    proxy.protocol = (proxy.protocol || 'http').split(':')[0] + ':';\n    if (proxy.protocol.match(/https?:/) === null) {\n      log.warn(`\"${proxy.protocol}\" is not a supported upstream proxy protocol, defaulting to \"http:\"`);\n      proxy.protocol = 'http:';\n    }\n  }\n\n  // force protocol to end with ':'\n  config.protocol = (config.protocol || 'http').split(':')[0] + ':';\n  if (config.protocol.match(/https?:/) === null) {\n    log.warn(`\"${config.protocol}\" is not a supported protocol, defaulting to \"http:\"`);\n    config.protocol = 'http:';\n  }\n  if (config.proxies && Object.prototype.hasOwnProperty.call(config.proxies, config.urlRoot)) {\n    log.warn(`\"${config.urlRoot}\" is proxied, you should probably change urlRoot to avoid conflicts`);\n  }\n  if (config.singleRun && config.autoWatch) {\n    log.debug('autoWatch set to false, because of singleRun');\n    config.autoWatch = false;\n  }\n  if (config.runInParent) {\n    log.debug('useIframe set to false, because using runInParent');\n    config.useIframe = false;\n  }\n  if (!config.singleRun && !config.useIframe && config.runInParent) {\n    log.debug('singleRun set to true, because using runInParent');\n    config.singleRun = true;\n  }\n  if (helper.isString(config.reporters)) {\n    config.reporters = config.reporters.split(',');\n  }\n  if (config.client && config.client.args) {\n    assert(Array.isArray(config.client.args), 'Invalid configuration: client.args must be an array of strings');\n  }\n  if (config.browsers) {\n    assert(Array.isArray(config.browsers), 'Invalid configuration: browsers option must be an array');\n  }\n  if (config.formatError) {\n    assert(helper.isFunction(config.formatError), 'Invalid configuration: formatError option must be a function.');\n  }\n  if (config.processKillTimeout) {\n    assert(helper.isNumber(config.processKillTimeout), 'Invalid configuration: processKillTimeout option must be a number.');\n  }\n  if (config.browserSocketTimeout) {\n    assert(helper.isNumber(config.browserSocketTimeout), 'Invalid configuration: browserSocketTimeout option must be a number.');\n  }\n  if (config.pingTimeout) {\n    assert(helper.isNumber(config.pingTimeout), 'Invalid configuration: pingTimeout option must be a number.');\n  }\n  const defaultClient = config.defaultClient || {};\n  Object.keys(defaultClient).forEach(function (key) {\n    const option = config.client[key];\n    config.client[key] = helper.isDefined(option) ? option : defaultClient[key];\n  });\n\n  // normalize preprocessors\n  const preprocessors = config.preprocessors || {};\n  const normalizedPreprocessors = config.preprocessors = Object.create(null);\n  Object.keys(preprocessors).forEach(function (pattern) {\n    const normalizedPattern = helper.normalizeWinPath(basePathResolve(pattern));\n    normalizedPreprocessors[normalizedPattern] = helper.isString(preprocessors[pattern]) ? [preprocessors[pattern]] : preprocessors[pattern];\n  });\n\n  // define custom launchers/preprocessors/reporters - create a new plugin\n  const module = Object.create(null);\n  let hasSomeInlinedPlugin = false;\n  const types = ['launcher', 'preprocessor', 'reporter'];\n  types.forEach(function (type) {\n    const definitions = config[`custom${helper.ucFirst(type)}s`] || {};\n    Object.keys(definitions).forEach(function (name) {\n      const definition = definitions[name];\n      if (!helper.isObject(definition)) {\n        return log.warn(`Can not define ${type} ${name}. Definition has to be an object.`);\n      }\n      if (!helper.isString(definition.base)) {\n        return log.warn(`Can not define ${type} ${name}. Missing base ${type}.`);\n      }\n      const token = type + ':' + definition.base;\n      const locals = {\n        args: ['value', definition]\n      };\n      module[type + ':' + name] = ['factory', function (injector) {\n        const plugin = injector.createChild([locals], [token]).get(token);\n        if (type === 'launcher' && helper.isDefined(definition.displayName)) {\n          plugin.displayName = definition.displayName;\n        }\n        return plugin;\n      }];\n      hasSomeInlinedPlugin = true;\n    });\n  });\n  if (hasSomeInlinedPlugin) {\n    config.plugins.push(module);\n  }\n  return config;\n}\n\n/**\n * @class\n */\nclass Config {\n  constructor() {\n    this.LOG_DISABLE = constant.LOG_DISABLE;\n    this.LOG_ERROR = constant.LOG_ERROR;\n    this.LOG_WARN = constant.LOG_WARN;\n    this.LOG_INFO = constant.LOG_INFO;\n    this.LOG_DEBUG = constant.LOG_DEBUG;\n\n    // DEFAULT CONFIG\n    this.frameworks = [];\n    this.protocol = 'http:';\n    this.port = constant.DEFAULT_PORT;\n    this.listenAddress = constant.DEFAULT_LISTEN_ADDR;\n    this.hostname = constant.DEFAULT_HOSTNAME;\n    this.httpsServerConfig = {};\n    this.basePath = '';\n    this.files = [];\n    this.browserConsoleLogOptions = {\n      level: 'debug',\n      format: '%b %T: %m',\n      terminal: true\n    };\n    this.customContextFile = null;\n    this.customDebugFile = null;\n    this.customClientContextFile = null;\n    this.exclude = [];\n    this.logLevel = constant.LOG_INFO;\n    this.colors = true;\n    this.autoWatch = true;\n    this.autoWatchBatchDelay = 250;\n    this.restartOnFileChange = false;\n    this.usePolling = process.platform === 'linux';\n    this.reporters = ['progress'];\n    this.singleRun = false;\n    this.browsers = [];\n    this.captureTimeout = 60000;\n    this.pingTimeout = 5000;\n    this.proxies = {};\n    this.proxyValidateSSL = true;\n    this.preprocessors = {};\n    this.preprocessor_priority = {};\n    this.urlRoot = '/';\n    this.upstreamProxy = undefined;\n    this.reportSlowerThan = 0;\n    this.loggers = [constant.CONSOLE_APPENDER];\n    this.transports = ['polling', 'websocket'];\n    this.forceJSONP = false;\n    this.plugins = ['karma-*'];\n    this.defaultClient = this.client = {\n      args: [],\n      useIframe: true,\n      runInParent: false,\n      captureConsole: true,\n      clearContext: true,\n      allowedReturnUrlPatterns: ['^https?://']\n    };\n    this.browserDisconnectTimeout = 2000;\n    this.browserDisconnectTolerance = 0;\n    this.browserNoActivityTimeout = 30000;\n    this.processKillTimeout = 2000;\n    this.concurrency = Infinity;\n    this.failOnEmptyTestSuite = true;\n    this.retryLimit = 2;\n    this.detached = false;\n    this.crossOriginAttribute = true;\n    this.browserSocketTimeout = 20000;\n  }\n  set(newConfig) {\n    _.mergeWith(this, newConfig, (obj, src) => {\n      // Overwrite arrays to keep consistent with #283\n      if (Array.isArray(src)) {\n        return src;\n      }\n    });\n  }\n}\nconst CONFIG_SYNTAX_HELP = '  module.exports = function(config) {\\n' + '    config.set({\\n' + '      // your config\\n' + '    });\\n' + '  };\\n';\n\n/**\n * Retrieve a parsed and finalized Karma `Config` instance. This `karmaConfig`\n * object may be used to configure public API methods such a `Server`,\n * `runner.run`, and `stopper.stop`.\n *\n * @param {?string} [configFilePath=null]\n *     A string representing a file system path pointing to the config file\n *     whose default export is a function that will be used to set Karma\n *     configuration options. This function will be passed an instance of the\n *     `Config` class as its first argument. If this option is not provided,\n *     then only the options provided by the `cliOptions` argument will be\n *     set.\n * @param {Object} cliOptions\n *     An object whose values will take priority over options set in the\n *     config file. The config object passed to function exported by the\n *     config file will already have these options applied. Any changes the\n *     config file makes to these options will effectively be ignored in the\n *     final configuration.\n *\n *     `cliOptions` all the same options as the config file and is applied\n *     using the same `config.set()` method.\n * @param {Object} parseOptions\n * @param {boolean} [parseOptions.promiseConfig=false]\n *     When `true`, a promise that resolves to a `Config` object will be\n *     returned. This also allows the function exported by config files (if\n *     provided) to be asynchronous by returning a promise. Resolving this\n *     promise indicates that all async activity has completed. The resolution\n *     value itself is ignored, all configuration must be done with\n *     `config.set`.\n * @param {boolean} [parseOptions.throwErrors=false]\n *     When `true`, process exiting on critical failures will be disabled. In\n *     The error will be thrown as an exception. If\n *     `parseOptions.promiseConfig` is also `true`, then the error will\n *     instead be used as the promise's reject reason.\n * @returns {Config|Promise<Config>}\n */\nfunction parseConfig(configFilePath, cliOptions, parseOptions) {\n  const promiseConfig = parseOptions && parseOptions.promiseConfig === true;\n  const throwErrors = parseOptions && parseOptions.throwErrors === true;\n  const shouldSetupLoggerEarly = promiseConfig;\n  if (shouldSetupLoggerEarly) {\n    // `setupFromConfig` provides defaults for `colors` and `logLevel`.\n    // `setup` provides defaults for `appenders`\n    // The first argument MUST BE an object\n    logger.setupFromConfig({});\n  }\n  function fail() {\n    log.error(...arguments);\n    if (throwErrors) {\n      const errorMessage = Array.from(arguments).join(' ');\n      const err = new Error(errorMessage);\n      if (promiseConfig) {\n        return Promise.reject(err);\n      }\n      throw err;\n    } else {\n      const warningMessage = 'The `parseConfig()` function historically called `process.exit(1)`' + ' when it failed. This behavior is now deprecated and function will' + ' throw an error in the next major release. To suppress this warning' + ' pass `throwErrors: true` as a third argument to opt-in into the new' + ' behavior and adjust your code to respond to the exception' + ' accordingly.' + ' Example: `parseConfig(path, cliOptions, { throwErrors: true })`';\n      log.warn(warningMessage);\n      process.exit(1);\n    }\n  }\n  let configModule;\n  if (configFilePath) {\n    try {\n      if (path.extname(configFilePath) === '.ts' && TYPE_SCRIPT_AVAILABLE) {\n        require('ts-node').register();\n      }\n      configModule = require(configFilePath);\n      if (typeof configModule === 'object' && typeof configModule.default !== 'undefined') {\n        configModule = configModule.default;\n      }\n    } catch (e) {\n      const extension = path.extname(configFilePath);\n      if (extension === '.coffee' && !COFFEE_SCRIPT_AVAILABLE) {\n        log.error('You need to install CoffeeScript.\\n  npm install coffeescript --save-dev');\n      } else if (extension === '.ls' && !LIVE_SCRIPT_AVAILABLE) {\n        log.error('You need to install LiveScript.\\n  npm install LiveScript --save-dev');\n      } else if (extension === '.ts' && !TYPE_SCRIPT_AVAILABLE) {\n        log.error('You need to install TypeScript.\\n  npm install typescript ts-node --save-dev');\n      }\n      return fail('Error in config file!\\n  ' + e.stack || e);\n    }\n    if (!helper.isFunction(configModule)) {\n      return fail('Config file must export a function!\\n' + CONFIG_SYNTAX_HELP);\n    }\n  } else {\n    configModule = () => {}; // if no config file path is passed, we define a dummy config module.\n  }\n\n  const config = new Config();\n\n  // save and reset hostname and listenAddress so we can detect if the user\n  // changed them\n  const defaultHostname = config.hostname;\n  config.hostname = null;\n  const defaultListenAddress = config.listenAddress;\n  config.listenAddress = null;\n\n  // add the user's configuration in\n  config.set(cliOptions);\n  let configModuleReturn;\n  try {\n    configModuleReturn = configModule(config);\n  } catch (e) {\n    return fail('Error in config file!\\n', e);\n  }\n  function finalizeConfig(config) {\n    // merge the config from config file and cliOptions (precedence)\n    config.set(cliOptions);\n\n    // if the user changed listenAddress, but didn't set a hostname, warn them\n    if (config.hostname === null && config.listenAddress !== null) {\n      log.warn(`ListenAddress was set to ${config.listenAddress} but hostname was left as the default: ` + `${defaultHostname}. If your browsers fail to connect, consider changing the hostname option.`);\n    }\n    // restore values that weren't overwritten by the user\n    if (config.hostname === null) {\n      config.hostname = defaultHostname;\n    }\n    if (config.listenAddress === null) {\n      config.listenAddress = defaultListenAddress;\n    }\n\n    // configure the logger as soon as we can\n    logger.setup(config.logLevel, config.colors, config.loggers);\n    log.debug(configFilePath ? `Loading config ${configFilePath}` : 'No config file specified.');\n    return normalizeConfig(config, configFilePath);\n  }\n\n  /**\n   * Return value is a function or (non-null) object that has a `then` method.\n   *\n   * @type {boolean}\n   * @see {@link https://promisesaplus.com/}\n   */\n  const returnIsThenable = (configModuleReturn != null && typeof configModuleReturn === 'object' || typeof configModuleReturn === 'function') && typeof configModuleReturn.then === 'function';\n  if (returnIsThenable) {\n    if (promiseConfig !== true) {\n      const errorMessage = 'The `parseOptions.promiseConfig` option must be set to `true` to ' + 'enable promise return values from configuration files. ' + 'Example: `parseConfig(path, cliOptions, { promiseConfig: true })`';\n      return fail(errorMessage);\n    }\n    return configModuleReturn.then(function onKarmaConfigModuleFulfilled( /* ignoredResolutionValue */\n    ) {\n      return finalizeConfig(config);\n    }, function onKarmaConfigModuleRejected(reason) {\n      return fail('Error in config file!\\n', reason);\n    });\n  } else {\n    if (promiseConfig) {\n      try {\n        return Promise.resolve(finalizeConfig(config));\n      } catch (exception) {\n        return Promise.reject(exception);\n      }\n    } else {\n      return finalizeConfig(config);\n    }\n  }\n}\n\n// PUBLIC API\nexports.parseConfig = parseConfig;\nexports.Pattern = Pattern;\nexports.createPatternObject = createPatternObject;\nexports.Config = Config;","map":{"version":3,"names":["path","require","assert","logger","log","create","helper","constant","_","COFFEE_SCRIPT_AVAILABLE","LIVE_SCRIPT_AVAILABLE","TYPE_SCRIPT_AVAILABLE","register","Pattern","constructor","pattern","served","included","watched","nocache","type","isBinary","integrity","isDefined","weight","mmPatternWeight","compare","other","mmComparePatternWeights","UrlPattern","url","undefined","createPatternObject","isString","isUrlAbsolute","isObject","warn","normalizeUrl","startsWith","endsWith","normalizeUrlRoot","urlRoot","normalizedUrlRoot","normalizeProxyPath","proxyPath","normalizedProxyPath","normalizeConfig","config","configFilePath","basePathResolve","relativePath","basePath","resolve","createPatternMapper","objectPattern","Object","assign","dirname","exclude","push","files","map","customContextFile","customDebugFile","customClientContextFile","normalizeWinPath","upstreamProxy","proxy","hostname","port","protocol","split","match","proxies","prototype","hasOwnProperty","call","singleRun","autoWatch","debug","runInParent","useIframe","reporters","client","args","Array","isArray","browsers","formatError","isFunction","processKillTimeout","isNumber","browserSocketTimeout","pingTimeout","defaultClient","keys","forEach","key","option","preprocessors","normalizedPreprocessors","normalizedPattern","module","hasSomeInlinedPlugin","types","definitions","ucFirst","name","definition","base","token","locals","injector","plugin","createChild","get","displayName","plugins","Config","LOG_DISABLE","LOG_ERROR","LOG_WARN","LOG_INFO","LOG_DEBUG","frameworks","DEFAULT_PORT","listenAddress","DEFAULT_LISTEN_ADDR","DEFAULT_HOSTNAME","httpsServerConfig","browserConsoleLogOptions","level","format","terminal","logLevel","colors","autoWatchBatchDelay","restartOnFileChange","usePolling","process","platform","captureTimeout","proxyValidateSSL","preprocessor_priority","reportSlowerThan","loggers","CONSOLE_APPENDER","transports","forceJSONP","captureConsole","clearContext","allowedReturnUrlPatterns","browserDisconnectTimeout","browserDisconnectTolerance","browserNoActivityTimeout","concurrency","Infinity","failOnEmptyTestSuite","retryLimit","detached","crossOriginAttribute","set","newConfig","mergeWith","obj","src","CONFIG_SYNTAX_HELP","parseConfig","cliOptions","parseOptions","promiseConfig","throwErrors","shouldSetupLoggerEarly","setupFromConfig","fail","error","arguments","errorMessage","from","join","err","Error","Promise","reject","warningMessage","exit","configModule","extname","default","e","extension","stack","defaultHostname","defaultListenAddress","configModuleReturn","finalizeConfig","setup","returnIsThenable","then","onKarmaConfigModuleFulfilled","onKarmaConfigModuleRejected","reason","exception","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/karma/lib/config.js"],"sourcesContent":["'use strict'\n\nconst path = require('path')\nconst assert = require('assert')\n\nconst logger = require('./logger')\nconst log = logger.create('config')\nconst helper = require('./helper')\nconst constant = require('./constants')\n\nconst _ = require('lodash')\n\nlet COFFEE_SCRIPT_AVAILABLE = false\nlet LIVE_SCRIPT_AVAILABLE = false\nlet TYPE_SCRIPT_AVAILABLE = false\n\ntry {\n  require('coffeescript').register()\n  COFFEE_SCRIPT_AVAILABLE = true\n} catch {}\n\n// LiveScript is required here to enable config files written in LiveScript.\n// It's not directly used in this file.\ntry {\n  require('LiveScript')\n  LIVE_SCRIPT_AVAILABLE = true\n} catch {}\n\ntry {\n  require('ts-node')\n  TYPE_SCRIPT_AVAILABLE = true\n} catch {}\n\nclass Pattern {\n  constructor (pattern, served, included, watched, nocache, type, isBinary, integrity) {\n    this.pattern = pattern\n    this.served = helper.isDefined(served) ? served : true\n    this.included = helper.isDefined(included) ? included : true\n    this.watched = helper.isDefined(watched) ? watched : true\n    this.nocache = helper.isDefined(nocache) ? nocache : false\n    this.weight = helper.mmPatternWeight(pattern)\n    this.type = type\n    this.isBinary = isBinary\n    this.integrity = integrity\n  }\n\n  compare (other) {\n    return helper.mmComparePatternWeights(this.weight, other.weight)\n  }\n}\n\nclass UrlPattern extends Pattern {\n  constructor (url, type, integrity) {\n    super(url, false, true, false, false, type, undefined, integrity)\n  }\n}\n\nfunction createPatternObject (pattern) {\n  if (pattern && helper.isString(pattern)) {\n    return helper.isUrlAbsolute(pattern)\n      ? new UrlPattern(pattern)\n      : new Pattern(pattern)\n  } else if (helper.isObject(pattern) && pattern.pattern && helper.isString(pattern.pattern)) {\n    return helper.isUrlAbsolute(pattern.pattern)\n      ? new UrlPattern(pattern.pattern, pattern.type, pattern.integrity)\n      : new Pattern(pattern.pattern, pattern.served, pattern.included, pattern.watched, pattern.nocache, pattern.type)\n  } else {\n    log.warn(`Invalid pattern ${pattern}!\\n\\tExpected string or object with \"pattern\" property.`)\n    return new Pattern(null, false, false, false, false)\n  }\n}\n\nfunction normalizeUrl (url) {\n  if (!url.startsWith('/')) {\n    url = `/${url}`\n  }\n\n  if (!url.endsWith('/')) {\n    url = url + '/'\n  }\n\n  return url\n}\n\nfunction normalizeUrlRoot (urlRoot) {\n  const normalizedUrlRoot = normalizeUrl(urlRoot)\n\n  if (normalizedUrlRoot !== urlRoot) {\n    log.warn(`urlRoot normalized to \"${normalizedUrlRoot}\"`)\n  }\n\n  return normalizedUrlRoot\n}\n\nfunction normalizeProxyPath (proxyPath) {\n  const normalizedProxyPath = normalizeUrl(proxyPath)\n\n  if (normalizedProxyPath !== proxyPath) {\n    log.warn(`proxyPath normalized to \"${normalizedProxyPath}\"`)\n  }\n\n  return normalizedProxyPath\n}\n\nfunction normalizeConfig (config, configFilePath) {\n  function basePathResolve (relativePath) {\n    if (helper.isUrlAbsolute(relativePath)) {\n      return relativePath\n    } else if (helper.isDefined(config.basePath) && helper.isDefined(relativePath)) {\n      return path.resolve(config.basePath, relativePath)\n    } else {\n      return ''\n    }\n  }\n\n  function createPatternMapper (resolve) {\n    return (objectPattern) => Object.assign(objectPattern, { pattern: resolve(objectPattern.pattern) })\n  }\n\n  if (helper.isString(configFilePath)) {\n    config.basePath = path.resolve(path.dirname(configFilePath), config.basePath) // resolve basePath\n    config.exclude.push(configFilePath) // always ignore the config file itself\n  } else {\n    config.basePath = path.resolve(config.basePath || '.')\n  }\n\n  config.files = config.files.map(createPatternObject).map(createPatternMapper(basePathResolve))\n  config.exclude = config.exclude.map(basePathResolve)\n  config.customContextFile = config.customContextFile && basePathResolve(config.customContextFile)\n  config.customDebugFile = config.customDebugFile && basePathResolve(config.customDebugFile)\n  config.customClientContextFile = config.customClientContextFile && basePathResolve(config.customClientContextFile)\n\n  // normalize paths on windows\n  config.basePath = helper.normalizeWinPath(config.basePath)\n  config.files = config.files.map(createPatternMapper(helper.normalizeWinPath))\n  config.exclude = config.exclude.map(helper.normalizeWinPath)\n  config.customContextFile = helper.normalizeWinPath(config.customContextFile)\n  config.customDebugFile = helper.normalizeWinPath(config.customDebugFile)\n  config.customClientContextFile = helper.normalizeWinPath(config.customClientContextFile)\n\n  // normalize urlRoot\n  config.urlRoot = normalizeUrlRoot(config.urlRoot)\n\n  // normalize and default upstream proxy settings if given\n  if (config.upstreamProxy) {\n    const proxy = config.upstreamProxy\n    proxy.path = helper.isDefined(proxy.path) ? normalizeProxyPath(proxy.path) : '/'\n    proxy.hostname = helper.isDefined(proxy.hostname) ? proxy.hostname : 'localhost'\n    proxy.port = helper.isDefined(proxy.port) ? proxy.port : 9875\n\n    // force protocol to end with ':'\n    proxy.protocol = (proxy.protocol || 'http').split(':')[0] + ':'\n    if (proxy.protocol.match(/https?:/) === null) {\n      log.warn(`\"${proxy.protocol}\" is not a supported upstream proxy protocol, defaulting to \"http:\"`)\n      proxy.protocol = 'http:'\n    }\n  }\n\n  // force protocol to end with ':'\n  config.protocol = (config.protocol || 'http').split(':')[0] + ':'\n  if (config.protocol.match(/https?:/) === null) {\n    log.warn(`\"${config.protocol}\" is not a supported protocol, defaulting to \"http:\"`)\n    config.protocol = 'http:'\n  }\n\n  if (config.proxies && Object.prototype.hasOwnProperty.call(config.proxies, config.urlRoot)) {\n    log.warn(`\"${config.urlRoot}\" is proxied, you should probably change urlRoot to avoid conflicts`)\n  }\n\n  if (config.singleRun && config.autoWatch) {\n    log.debug('autoWatch set to false, because of singleRun')\n    config.autoWatch = false\n  }\n\n  if (config.runInParent) {\n    log.debug('useIframe set to false, because using runInParent')\n    config.useIframe = false\n  }\n\n  if (!config.singleRun && !config.useIframe && config.runInParent) {\n    log.debug('singleRun set to true, because using runInParent')\n    config.singleRun = true\n  }\n\n  if (helper.isString(config.reporters)) {\n    config.reporters = config.reporters.split(',')\n  }\n\n  if (config.client && config.client.args) {\n    assert(Array.isArray(config.client.args), 'Invalid configuration: client.args must be an array of strings')\n  }\n\n  if (config.browsers) {\n    assert(Array.isArray(config.browsers), 'Invalid configuration: browsers option must be an array')\n  }\n\n  if (config.formatError) {\n    assert(helper.isFunction(config.formatError), 'Invalid configuration: formatError option must be a function.')\n  }\n\n  if (config.processKillTimeout) {\n    assert(helper.isNumber(config.processKillTimeout), 'Invalid configuration: processKillTimeout option must be a number.')\n  }\n\n  if (config.browserSocketTimeout) {\n    assert(helper.isNumber(config.browserSocketTimeout), 'Invalid configuration: browserSocketTimeout option must be a number.')\n  }\n\n  if (config.pingTimeout) {\n    assert(helper.isNumber(config.pingTimeout), 'Invalid configuration: pingTimeout option must be a number.')\n  }\n\n  const defaultClient = config.defaultClient || {}\n  Object.keys(defaultClient).forEach(function (key) {\n    const option = config.client[key]\n    config.client[key] = helper.isDefined(option) ? option : defaultClient[key]\n  })\n\n  // normalize preprocessors\n  const preprocessors = config.preprocessors || {}\n  const normalizedPreprocessors = config.preprocessors = Object.create(null)\n\n  Object.keys(preprocessors).forEach(function (pattern) {\n    const normalizedPattern = helper.normalizeWinPath(basePathResolve(pattern))\n\n    normalizedPreprocessors[normalizedPattern] = helper.isString(preprocessors[pattern])\n      ? [preprocessors[pattern]] : preprocessors[pattern]\n  })\n\n  // define custom launchers/preprocessors/reporters - create a new plugin\n  const module = Object.create(null)\n  let hasSomeInlinedPlugin = false\n  const types = ['launcher', 'preprocessor', 'reporter']\n\n  types.forEach(function (type) {\n    const definitions = config[`custom${helper.ucFirst(type)}s`] || {}\n\n    Object.keys(definitions).forEach(function (name) {\n      const definition = definitions[name]\n\n      if (!helper.isObject(definition)) {\n        return log.warn(`Can not define ${type} ${name}. Definition has to be an object.`)\n      }\n\n      if (!helper.isString(definition.base)) {\n        return log.warn(`Can not define ${type} ${name}. Missing base ${type}.`)\n      }\n\n      const token = type + ':' + definition.base\n      const locals = {\n        args: ['value', definition]\n      }\n\n      module[type + ':' + name] = ['factory', function (injector) {\n        const plugin = injector.createChild([locals], [token]).get(token)\n        if (type === 'launcher' && helper.isDefined(definition.displayName)) {\n          plugin.displayName = definition.displayName\n        }\n        return plugin\n      }]\n      hasSomeInlinedPlugin = true\n    })\n  })\n\n  if (hasSomeInlinedPlugin) {\n    config.plugins.push(module)\n  }\n\n  return config\n}\n\n/**\n * @class\n */\nclass Config {\n  constructor () {\n    this.LOG_DISABLE = constant.LOG_DISABLE\n    this.LOG_ERROR = constant.LOG_ERROR\n    this.LOG_WARN = constant.LOG_WARN\n    this.LOG_INFO = constant.LOG_INFO\n    this.LOG_DEBUG = constant.LOG_DEBUG\n\n    // DEFAULT CONFIG\n    this.frameworks = []\n    this.protocol = 'http:'\n    this.port = constant.DEFAULT_PORT\n    this.listenAddress = constant.DEFAULT_LISTEN_ADDR\n    this.hostname = constant.DEFAULT_HOSTNAME\n    this.httpsServerConfig = {}\n    this.basePath = ''\n    this.files = []\n    this.browserConsoleLogOptions = {\n      level: 'debug',\n      format: '%b %T: %m',\n      terminal: true\n    }\n    this.customContextFile = null\n    this.customDebugFile = null\n    this.customClientContextFile = null\n    this.exclude = []\n    this.logLevel = constant.LOG_INFO\n    this.colors = true\n    this.autoWatch = true\n    this.autoWatchBatchDelay = 250\n    this.restartOnFileChange = false\n    this.usePolling = process.platform === 'linux'\n    this.reporters = ['progress']\n    this.singleRun = false\n    this.browsers = []\n    this.captureTimeout = 60000\n    this.pingTimeout = 5000\n    this.proxies = {}\n    this.proxyValidateSSL = true\n    this.preprocessors = {}\n    this.preprocessor_priority = {}\n    this.urlRoot = '/'\n    this.upstreamProxy = undefined\n    this.reportSlowerThan = 0\n    this.loggers = [constant.CONSOLE_APPENDER]\n    this.transports = ['polling', 'websocket']\n    this.forceJSONP = false\n    this.plugins = ['karma-*']\n    this.defaultClient = this.client = {\n      args: [],\n      useIframe: true,\n      runInParent: false,\n      captureConsole: true,\n      clearContext: true,\n      allowedReturnUrlPatterns: ['^https?://']\n    }\n    this.browserDisconnectTimeout = 2000\n    this.browserDisconnectTolerance = 0\n    this.browserNoActivityTimeout = 30000\n    this.processKillTimeout = 2000\n    this.concurrency = Infinity\n    this.failOnEmptyTestSuite = true\n    this.retryLimit = 2\n    this.detached = false\n    this.crossOriginAttribute = true\n    this.browserSocketTimeout = 20000\n  }\n\n  set (newConfig) {\n    _.mergeWith(this, newConfig, (obj, src) => {\n      // Overwrite arrays to keep consistent with #283\n      if (Array.isArray(src)) {\n        return src\n      }\n    })\n  }\n}\n\nconst CONFIG_SYNTAX_HELP = '  module.exports = function(config) {\\n' +\n  '    config.set({\\n' +\n  '      // your config\\n' +\n  '    });\\n' +\n  '  };\\n'\n\n/**\n * Retrieve a parsed and finalized Karma `Config` instance. This `karmaConfig`\n * object may be used to configure public API methods such a `Server`,\n * `runner.run`, and `stopper.stop`.\n *\n * @param {?string} [configFilePath=null]\n *     A string representing a file system path pointing to the config file\n *     whose default export is a function that will be used to set Karma\n *     configuration options. This function will be passed an instance of the\n *     `Config` class as its first argument. If this option is not provided,\n *     then only the options provided by the `cliOptions` argument will be\n *     set.\n * @param {Object} cliOptions\n *     An object whose values will take priority over options set in the\n *     config file. The config object passed to function exported by the\n *     config file will already have these options applied. Any changes the\n *     config file makes to these options will effectively be ignored in the\n *     final configuration.\n *\n *     `cliOptions` all the same options as the config file and is applied\n *     using the same `config.set()` method.\n * @param {Object} parseOptions\n * @param {boolean} [parseOptions.promiseConfig=false]\n *     When `true`, a promise that resolves to a `Config` object will be\n *     returned. This also allows the function exported by config files (if\n *     provided) to be asynchronous by returning a promise. Resolving this\n *     promise indicates that all async activity has completed. The resolution\n *     value itself is ignored, all configuration must be done with\n *     `config.set`.\n * @param {boolean} [parseOptions.throwErrors=false]\n *     When `true`, process exiting on critical failures will be disabled. In\n *     The error will be thrown as an exception. If\n *     `parseOptions.promiseConfig` is also `true`, then the error will\n *     instead be used as the promise's reject reason.\n * @returns {Config|Promise<Config>}\n */\nfunction parseConfig (configFilePath, cliOptions, parseOptions) {\n  const promiseConfig = parseOptions && parseOptions.promiseConfig === true\n  const throwErrors = parseOptions && parseOptions.throwErrors === true\n  const shouldSetupLoggerEarly = promiseConfig\n  if (shouldSetupLoggerEarly) {\n    // `setupFromConfig` provides defaults for `colors` and `logLevel`.\n    // `setup` provides defaults for `appenders`\n    // The first argument MUST BE an object\n    logger.setupFromConfig({})\n  }\n  function fail () {\n    log.error(...arguments)\n    if (throwErrors) {\n      const errorMessage = Array.from(arguments).join(' ')\n      const err = new Error(errorMessage)\n      if (promiseConfig) {\n        return Promise.reject(err)\n      }\n      throw err\n    } else {\n      const warningMessage =\n        'The `parseConfig()` function historically called `process.exit(1)`' +\n        ' when it failed. This behavior is now deprecated and function will' +\n        ' throw an error in the next major release. To suppress this warning' +\n        ' pass `throwErrors: true` as a third argument to opt-in into the new' +\n        ' behavior and adjust your code to respond to the exception' +\n        ' accordingly.' +\n        ' Example: `parseConfig(path, cliOptions, { throwErrors: true })`'\n      log.warn(warningMessage)\n      process.exit(1)\n    }\n  }\n\n  let configModule\n  if (configFilePath) {\n    try {\n      if (path.extname(configFilePath) === '.ts' && TYPE_SCRIPT_AVAILABLE) {\n        require('ts-node').register()\n      }\n      configModule = require(configFilePath)\n      if (typeof configModule === 'object' && typeof configModule.default !== 'undefined') {\n        configModule = configModule.default\n      }\n    } catch (e) {\n      const extension = path.extname(configFilePath)\n      if (extension === '.coffee' && !COFFEE_SCRIPT_AVAILABLE) {\n        log.error('You need to install CoffeeScript.\\n  npm install coffeescript --save-dev')\n      } else if (extension === '.ls' && !LIVE_SCRIPT_AVAILABLE) {\n        log.error('You need to install LiveScript.\\n  npm install LiveScript --save-dev')\n      } else if (extension === '.ts' && !TYPE_SCRIPT_AVAILABLE) {\n        log.error('You need to install TypeScript.\\n  npm install typescript ts-node --save-dev')\n      }\n      return fail('Error in config file!\\n  ' + e.stack || e)\n    }\n    if (!helper.isFunction(configModule)) {\n      return fail('Config file must export a function!\\n' + CONFIG_SYNTAX_HELP)\n    }\n  } else {\n    configModule = () => {} // if no config file path is passed, we define a dummy config module.\n  }\n\n  const config = new Config()\n\n  // save and reset hostname and listenAddress so we can detect if the user\n  // changed them\n  const defaultHostname = config.hostname\n  config.hostname = null\n  const defaultListenAddress = config.listenAddress\n  config.listenAddress = null\n\n  // add the user's configuration in\n  config.set(cliOptions)\n\n  let configModuleReturn\n  try {\n    configModuleReturn = configModule(config)\n  } catch (e) {\n    return fail('Error in config file!\\n', e)\n  }\n  function finalizeConfig (config) {\n    // merge the config from config file and cliOptions (precedence)\n    config.set(cliOptions)\n\n    // if the user changed listenAddress, but didn't set a hostname, warn them\n    if (config.hostname === null && config.listenAddress !== null) {\n      log.warn(`ListenAddress was set to ${config.listenAddress} but hostname was left as the default: ` +\n      `${defaultHostname}. If your browsers fail to connect, consider changing the hostname option.`)\n    }\n    // restore values that weren't overwritten by the user\n    if (config.hostname === null) {\n      config.hostname = defaultHostname\n    }\n    if (config.listenAddress === null) {\n      config.listenAddress = defaultListenAddress\n    }\n\n    // configure the logger as soon as we can\n    logger.setup(config.logLevel, config.colors, config.loggers)\n\n    log.debug(configFilePath ? `Loading config ${configFilePath}` : 'No config file specified.')\n\n    return normalizeConfig(config, configFilePath)\n  }\n\n  /**\n   * Return value is a function or (non-null) object that has a `then` method.\n   *\n   * @type {boolean}\n   * @see {@link https://promisesaplus.com/}\n   */\n  const returnIsThenable = (\n    (\n      (configModuleReturn != null && typeof configModuleReturn === 'object') ||\n      typeof configModuleReturn === 'function'\n    ) && typeof configModuleReturn.then === 'function'\n  )\n  if (returnIsThenable) {\n    if (promiseConfig !== true) {\n      const errorMessage =\n        'The `parseOptions.promiseConfig` option must be set to `true` to ' +\n        'enable promise return values from configuration files. ' +\n        'Example: `parseConfig(path, cliOptions, { promiseConfig: true })`'\n      return fail(errorMessage)\n    }\n    return configModuleReturn.then(\n      function onKarmaConfigModuleFulfilled (/* ignoredResolutionValue */) {\n        return finalizeConfig(config)\n      },\n      function onKarmaConfigModuleRejected (reason) {\n        return fail('Error in config file!\\n', reason)\n      }\n    )\n  } else {\n    if (promiseConfig) {\n      try {\n        return Promise.resolve(finalizeConfig(config))\n      } catch (exception) {\n        return Promise.reject(exception)\n      }\n    } else {\n      return finalizeConfig(config)\n    }\n  }\n}\n\n// PUBLIC API\nexports.parseConfig = parseConfig\nexports.Pattern = Pattern\nexports.createPatternObject = createPatternObject\nexports.Config = Config\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}