{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\nconst http = require('http');\nconst https = require('https');\nconst path = require('path');\nconst connect = require('connect');\nconst mimeType = require('mime');\nconst common = require('./middleware/common');\nconst runnerMiddleware = require('./middleware/runner');\nconst stopperMiddleware = require('./middleware/stopper');\nconst karmaMiddleware = require('./middleware/karma');\nconst sourceFilesMiddleware = require('./middleware/source_files');\nconst proxyMiddleware = require('./middleware/proxy');\nconst log = require('./logger').create('web-server');\nfunction createCustomHandler(customFileHandlers, config) {\n  let warningDone = false;\n  return function (request, response, next) {\n    const handler = customFileHandlers.find(handler => handler.urlRegex.test(request.url));\n    if (customFileHandlers.length > 0 && !warningDone) {\n      warningDone = true;\n      log.warn('The `customFileHandlers` is deprecated and will be removed in Karma 7. Please upgrade plugins relying on this provider.');\n    }\n    return handler ? handler.handler(request, response, 'fake/static', 'fake/adapter', config.basePath, 'fake/root') : next();\n  };\n}\ncreateCustomHandler.$inject = ['customFileHandlers', 'config'];\nfunction createFilesPromise(emitter, fileList) {\n  // Set an empty list of files to avoid race issues with\n  // file_list_modified not having been emitted yet\n  let files = fileList.files;\n  emitter.on('file_list_modified', filesParam => {\n    files = filesParam;\n  });\n  return {\n    then(...args) {\n      return Promise.resolve(files).then(...args);\n    }\n  };\n}\nfunction createServeStaticFile(config) {\n  return common.createServeFile(fs, path.normalize(path.join(__dirname, '/../static')), config);\n}\ncreateServeStaticFile.$inject = ['config'];\nfunction createServeFile(config) {\n  return common.createServeFile(fs, null, config);\n}\ncreateServeFile.$inject = ['config'];\nfunction createWebServer(injector, config) {\n  const {\n    mime = {}\n  } = config;\n  mimeType.define({\n    ...mime\n  }, true);\n  const proxyMiddlewareInstance = injector.invoke(proxyMiddleware.create);\n  log.debug('Instantiating middleware');\n  const handler = connect();\n  if (config.beforeMiddleware) {\n    config.beforeMiddleware.forEach(middleware => handler.use(injector.get('middleware:' + middleware)));\n  }\n  handler.use(injector.invoke(runnerMiddleware.create));\n  handler.use(injector.invoke(stopperMiddleware.create));\n  handler.use(injector.invoke(karmaMiddleware.create));\n  handler.use(injector.invoke(sourceFilesMiddleware.create));\n  // TODO(vojta): extract the proxy into a plugin\n  handler.use(proxyMiddlewareInstance);\n  // TODO: Deprecated. Remove in the next major\n  handler.use(injector.invoke(createCustomHandler));\n  if (config.middleware) {\n    config.middleware.forEach(middleware => handler.use(injector.get('middleware:' + middleware)));\n  }\n  handler.use((request, response) => common.serve404(response, request.url));\n  let serverClass = http;\n  const serverArguments = [handler];\n  if (config.protocol === 'https:') {\n    serverClass = https;\n    serverArguments.unshift(config.httpsServerOptions || {});\n  }\n  if (config.httpModule) {\n    serverClass = config.httpModule;\n  }\n  const server = serverClass.createServer.apply(null, serverArguments);\n  server.on('upgrade', function (req, socket, head) {\n    log.debug(`upgrade ${req.url}`);\n    proxyMiddlewareInstance.upgrade(req, socket, head);\n  });\n  return server;\n}\ncreateWebServer.$inject = ['injector', 'config'];\nmodule.exports = {\n  createWebServer,\n  createServeFile,\n  createServeStaticFile,\n  createFilesPromise\n};","map":{"version":3,"names":["fs","require","http","https","path","connect","mimeType","common","runnerMiddleware","stopperMiddleware","karmaMiddleware","sourceFilesMiddleware","proxyMiddleware","log","create","createCustomHandler","customFileHandlers","config","warningDone","request","response","next","handler","find","urlRegex","test","url","length","warn","basePath","$inject","createFilesPromise","emitter","fileList","files","on","filesParam","then","args","Promise","resolve","createServeStaticFile","createServeFile","normalize","join","__dirname","createWebServer","injector","mime","define","proxyMiddlewareInstance","invoke","debug","beforeMiddleware","forEach","middleware","use","get","serve404","serverClass","serverArguments","protocol","unshift","httpsServerOptions","httpModule","server","createServer","apply","req","socket","head","upgrade","module","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/karma/lib/web-server.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst http = require('http')\nconst https = require('https')\nconst path = require('path')\nconst connect = require('connect')\nconst mimeType = require('mime')\n\nconst common = require('./middleware/common')\nconst runnerMiddleware = require('./middleware/runner')\nconst stopperMiddleware = require('./middleware/stopper')\nconst karmaMiddleware = require('./middleware/karma')\nconst sourceFilesMiddleware = require('./middleware/source_files')\nconst proxyMiddleware = require('./middleware/proxy')\n\nconst log = require('./logger').create('web-server')\n\nfunction createCustomHandler (customFileHandlers, config) {\n  let warningDone = false\n\n  return function (request, response, next) {\n    const handler = customFileHandlers.find((handler) => handler.urlRegex.test(request.url))\n\n    if (customFileHandlers.length > 0 && !warningDone) {\n      warningDone = true\n      log.warn('The `customFileHandlers` is deprecated and will be removed in Karma 7. Please upgrade plugins relying on this provider.')\n    }\n\n    return handler\n      ? handler.handler(request, response, 'fake/static', 'fake/adapter', config.basePath, 'fake/root')\n      : next()\n  }\n}\n\ncreateCustomHandler.$inject = ['customFileHandlers', 'config']\n\nfunction createFilesPromise (emitter, fileList) {\n  // Set an empty list of files to avoid race issues with\n  // file_list_modified not having been emitted yet\n  let files = fileList.files\n  emitter.on('file_list_modified', (filesParam) => { files = filesParam })\n\n  return {\n    then (...args) {\n      return Promise.resolve(files).then(...args)\n    }\n  }\n}\n\nfunction createServeStaticFile (config) {\n  return common.createServeFile(fs, path.normalize(path.join(__dirname, '/../static')), config)\n}\ncreateServeStaticFile.$inject = ['config']\n\nfunction createServeFile (config) {\n  return common.createServeFile(fs, null, config)\n}\ncreateServeFile.$inject = ['config']\n\nfunction createWebServer (injector, config) {\n  const { mime = {} } = config\n  mimeType.define({ ...mime }, true)\n\n  const proxyMiddlewareInstance = injector.invoke(proxyMiddleware.create)\n\n  log.debug('Instantiating middleware')\n  const handler = connect()\n\n  if (config.beforeMiddleware) {\n    config.beforeMiddleware.forEach((middleware) => handler.use(injector.get('middleware:' + middleware)))\n  }\n\n  handler.use(injector.invoke(runnerMiddleware.create))\n  handler.use(injector.invoke(stopperMiddleware.create))\n  handler.use(injector.invoke(karmaMiddleware.create))\n  handler.use(injector.invoke(sourceFilesMiddleware.create))\n  // TODO(vojta): extract the proxy into a plugin\n  handler.use(proxyMiddlewareInstance)\n  // TODO: Deprecated. Remove in the next major\n  handler.use(injector.invoke(createCustomHandler))\n\n  if (config.middleware) {\n    config.middleware.forEach((middleware) => handler.use(injector.get('middleware:' + middleware)))\n  }\n\n  handler.use((request, response) => common.serve404(response, request.url))\n\n  let serverClass = http\n  const serverArguments = [handler]\n\n  if (config.protocol === 'https:') {\n    serverClass = https\n    serverArguments.unshift(config.httpsServerOptions || {})\n  }\n\n  if (config.httpModule) {\n    serverClass = config.httpModule\n  }\n\n  const server = serverClass.createServer.apply(null, serverArguments)\n\n  server.on('upgrade', function (req, socket, head) {\n    log.debug(`upgrade ${req.url}`)\n    proxyMiddlewareInstance.upgrade(req, socket, head)\n  })\n\n  return server\n}\n\ncreateWebServer.$inject = ['injector', 'config']\n\nmodule.exports = {\n  createWebServer,\n  createServeFile,\n  createServeStaticFile,\n  createFilesPromise\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAa,CAAC;AACjC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMI,OAAO,GAAGJ,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMK,QAAQ,GAAGL,OAAO,CAAC,MAAM,CAAC;AAEhC,MAAMM,MAAM,GAAGN,OAAO,CAAC,qBAAqB,CAAC;AAC7C,MAAMO,gBAAgB,GAAGP,OAAO,CAAC,qBAAqB,CAAC;AACvD,MAAMQ,iBAAiB,GAAGR,OAAO,CAAC,sBAAsB,CAAC;AACzD,MAAMS,eAAe,GAAGT,OAAO,CAAC,oBAAoB,CAAC;AACrD,MAAMU,qBAAqB,GAAGV,OAAO,CAAC,2BAA2B,CAAC;AAClE,MAAMW,eAAe,GAAGX,OAAO,CAAC,oBAAoB,CAAC;AAErD,MAAMY,GAAG,GAAGZ,OAAO,CAAC,UAAU,CAAC,CAACa,MAAM,CAAC,YAAY,CAAC;AAEpD,SAASC,mBAAmB,CAAEC,kBAAkB,EAAEC,MAAM,EAAE;EACxD,IAAIC,WAAW,GAAG,KAAK;EAEvB,OAAO,UAAUC,OAAO,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IACxC,MAAMC,OAAO,GAAGN,kBAAkB,CAACO,IAAI,CAAED,OAAO,IAAKA,OAAO,CAACE,QAAQ,CAACC,IAAI,CAACN,OAAO,CAACO,GAAG,CAAC,CAAC;IAExF,IAAIV,kBAAkB,CAACW,MAAM,GAAG,CAAC,IAAI,CAACT,WAAW,EAAE;MACjDA,WAAW,GAAG,IAAI;MAClBL,GAAG,CAACe,IAAI,CAAC,yHAAyH,CAAC;IACrI;IAEA,OAAON,OAAO,GACVA,OAAO,CAACA,OAAO,CAACH,OAAO,EAAEC,QAAQ,EAAE,aAAa,EAAE,cAAc,EAAEH,MAAM,CAACY,QAAQ,EAAE,WAAW,CAAC,GAC/FR,IAAI,EAAE;EACZ,CAAC;AACH;AAEAN,mBAAmB,CAACe,OAAO,GAAG,CAAC,oBAAoB,EAAE,QAAQ,CAAC;AAE9D,SAASC,kBAAkB,CAAEC,OAAO,EAAEC,QAAQ,EAAE;EAC9C;EACA;EACA,IAAIC,KAAK,GAAGD,QAAQ,CAACC,KAAK;EAC1BF,OAAO,CAACG,EAAE,CAAC,oBAAoB,EAAGC,UAAU,IAAK;IAAEF,KAAK,GAAGE,UAAU;EAAC,CAAC,CAAC;EAExE,OAAO;IACLC,IAAI,CAAE,GAAGC,IAAI,EAAE;MACb,OAAOC,OAAO,CAACC,OAAO,CAACN,KAAK,CAAC,CAACG,IAAI,CAAC,GAAGC,IAAI,CAAC;IAC7C;EACF,CAAC;AACH;AAEA,SAASG,qBAAqB,CAAExB,MAAM,EAAE;EACtC,OAAOV,MAAM,CAACmC,eAAe,CAAC1C,EAAE,EAAEI,IAAI,CAACuC,SAAS,CAACvC,IAAI,CAACwC,IAAI,CAACC,SAAS,EAAE,YAAY,CAAC,CAAC,EAAE5B,MAAM,CAAC;AAC/F;AACAwB,qBAAqB,CAACX,OAAO,GAAG,CAAC,QAAQ,CAAC;AAE1C,SAASY,eAAe,CAAEzB,MAAM,EAAE;EAChC,OAAOV,MAAM,CAACmC,eAAe,CAAC1C,EAAE,EAAE,IAAI,EAAEiB,MAAM,CAAC;AACjD;AACAyB,eAAe,CAACZ,OAAO,GAAG,CAAC,QAAQ,CAAC;AAEpC,SAASgB,eAAe,CAAEC,QAAQ,EAAE9B,MAAM,EAAE;EAC1C,MAAM;IAAE+B,IAAI,GAAG,CAAC;EAAE,CAAC,GAAG/B,MAAM;EAC5BX,QAAQ,CAAC2C,MAAM,CAAC;IAAE,GAAGD;EAAK,CAAC,EAAE,IAAI,CAAC;EAElC,MAAME,uBAAuB,GAAGH,QAAQ,CAACI,MAAM,CAACvC,eAAe,CAACE,MAAM,CAAC;EAEvED,GAAG,CAACuC,KAAK,CAAC,0BAA0B,CAAC;EACrC,MAAM9B,OAAO,GAAGjB,OAAO,EAAE;EAEzB,IAAIY,MAAM,CAACoC,gBAAgB,EAAE;IAC3BpC,MAAM,CAACoC,gBAAgB,CAACC,OAAO,CAAEC,UAAU,IAAKjC,OAAO,CAACkC,GAAG,CAACT,QAAQ,CAACU,GAAG,CAAC,aAAa,GAAGF,UAAU,CAAC,CAAC,CAAC;EACxG;EAEAjC,OAAO,CAACkC,GAAG,CAACT,QAAQ,CAACI,MAAM,CAAC3C,gBAAgB,CAACM,MAAM,CAAC,CAAC;EACrDQ,OAAO,CAACkC,GAAG,CAACT,QAAQ,CAACI,MAAM,CAAC1C,iBAAiB,CAACK,MAAM,CAAC,CAAC;EACtDQ,OAAO,CAACkC,GAAG,CAACT,QAAQ,CAACI,MAAM,CAACzC,eAAe,CAACI,MAAM,CAAC,CAAC;EACpDQ,OAAO,CAACkC,GAAG,CAACT,QAAQ,CAACI,MAAM,CAACxC,qBAAqB,CAACG,MAAM,CAAC,CAAC;EAC1D;EACAQ,OAAO,CAACkC,GAAG,CAACN,uBAAuB,CAAC;EACpC;EACA5B,OAAO,CAACkC,GAAG,CAACT,QAAQ,CAACI,MAAM,CAACpC,mBAAmB,CAAC,CAAC;EAEjD,IAAIE,MAAM,CAACsC,UAAU,EAAE;IACrBtC,MAAM,CAACsC,UAAU,CAACD,OAAO,CAAEC,UAAU,IAAKjC,OAAO,CAACkC,GAAG,CAACT,QAAQ,CAACU,GAAG,CAAC,aAAa,GAAGF,UAAU,CAAC,CAAC,CAAC;EAClG;EAEAjC,OAAO,CAACkC,GAAG,CAAC,CAACrC,OAAO,EAAEC,QAAQ,KAAKb,MAAM,CAACmD,QAAQ,CAACtC,QAAQ,EAAED,OAAO,CAACO,GAAG,CAAC,CAAC;EAE1E,IAAIiC,WAAW,GAAGzD,IAAI;EACtB,MAAM0D,eAAe,GAAG,CAACtC,OAAO,CAAC;EAEjC,IAAIL,MAAM,CAAC4C,QAAQ,KAAK,QAAQ,EAAE;IAChCF,WAAW,GAAGxD,KAAK;IACnByD,eAAe,CAACE,OAAO,CAAC7C,MAAM,CAAC8C,kBAAkB,IAAI,CAAC,CAAC,CAAC;EAC1D;EAEA,IAAI9C,MAAM,CAAC+C,UAAU,EAAE;IACrBL,WAAW,GAAG1C,MAAM,CAAC+C,UAAU;EACjC;EAEA,MAAMC,MAAM,GAAGN,WAAW,CAACO,YAAY,CAACC,KAAK,CAAC,IAAI,EAAEP,eAAe,CAAC;EAEpEK,MAAM,CAAC9B,EAAE,CAAC,SAAS,EAAE,UAAUiC,GAAG,EAAEC,MAAM,EAAEC,IAAI,EAAE;IAChDzD,GAAG,CAACuC,KAAK,CAAE,WAAUgB,GAAG,CAAC1C,GAAI,EAAC,CAAC;IAC/BwB,uBAAuB,CAACqB,OAAO,CAACH,GAAG,EAAEC,MAAM,EAAEC,IAAI,CAAC;EACpD,CAAC,CAAC;EAEF,OAAOL,MAAM;AACf;AAEAnB,eAAe,CAAChB,OAAO,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC;AAEhD0C,MAAM,CAACC,OAAO,GAAG;EACf3B,eAAe;EACfJ,eAAe;EACfD,qBAAqB;EACrBV;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}