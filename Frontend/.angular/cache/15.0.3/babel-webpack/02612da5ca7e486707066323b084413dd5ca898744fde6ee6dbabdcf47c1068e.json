{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\nconst path = require('path');\nconst helper = require('./helper');\nconst log = require('./logger').create('plugin');\nconst IGNORED_PACKAGES = ['karma-cli', 'karma-runner.github.com'];\nfunction resolve(plugins, emitter) {\n  const modules = [];\n  function requirePlugin(name) {\n    log.debug(`Loading plugin ${name}.`);\n    try {\n      modules.push(require(name));\n    } catch (e) {\n      if (e.code === 'MODULE_NOT_FOUND' && e.message.includes(name)) {\n        log.error(`Cannot find plugin \"${name}\".\\n  Did you forget to install it?\\n  npm install ${name} --save-dev`);\n      } else {\n        log.error(`Error during loading \"${name}\" plugin:\\n  ${e.message}`);\n      }\n      emitter.emit('load_error', 'plug_in', name);\n    }\n  }\n  plugins.forEach(function (plugin) {\n    if (helper.isString(plugin)) {\n      if (!plugin.includes('*')) {\n        requirePlugin(plugin);\n        return;\n      }\n      const pluginDirectory = path.normalize(path.join(__dirname, '/../..'));\n      const regexp = new RegExp(`^${plugin.replace(/\\*/g, '.*').replace(/\\//g, '[/\\\\\\\\]')}`);\n      log.debug(`Loading ${plugin} from ${pluginDirectory}`);\n      fs.readdirSync(pluginDirectory).map(e => {\n        const modulePath = path.join(pluginDirectory, e);\n        if (e[0] === '@') {\n          return fs.readdirSync(modulePath).map(e => path.join(modulePath, e));\n        }\n        return modulePath;\n      }).reduce((a, x) => a.concat(x), []).map(modulePath => path.relative(pluginDirectory, modulePath)).filter(moduleName => !IGNORED_PACKAGES.includes(moduleName) && regexp.test(moduleName)).forEach(pluginName => requirePlugin(path.join(pluginDirectory, pluginName)));\n    } else if (helper.isObject(plugin)) {\n      log.debug(`Loading inline plugin defining ${Object.keys(plugin).join(', ')}.`);\n      modules.push(plugin);\n    } else {\n      log.error(`Invalid plugin ${plugin}`);\n      emitter.emit('load_error', 'plug_in', plugin);\n    }\n  });\n  return modules;\n}\n\n/**\n  Create a function to handle errors in plugin loading.\n  @param {Object} injector, the dict of dependency injection objects.\n  @return function closed over injector, which reports errors.\n*/\nfunction createInstantiatePlugin(injector) {\n  const emitter = injector.get('emitter');\n  // Cache to avoid report errors multiple times per plugin.\n  const pluginInstances = new Map();\n  return function instantiatePlugin(kind, name) {\n    if (pluginInstances.has(name)) {\n      return pluginInstances.get(name);\n    }\n    let p;\n    try {\n      p = injector.get(`${kind}:${name}`);\n      if (!p) {\n        log.error(`Failed to instantiate ${kind} ${name}`);\n        emitter.emit('load_error', kind, name);\n      }\n    } catch (e) {\n      if (e.message.includes(`No provider for \"${kind}:${name}\"`)) {\n        log.error(`Cannot load \"${name}\", it is not registered!\\n  Perhaps you are missing some plugin?`);\n      } else {\n        log.error(`Cannot load \"${name}\"!\\n  ` + e.stack);\n      }\n      emitter.emit('load_error', kind, name);\n    }\n    pluginInstances.set(name, p, `${kind}:${name}`);\n    return p;\n  };\n}\ncreateInstantiatePlugin.$inject = ['injector'];\nmodule.exports = {\n  resolve,\n  createInstantiatePlugin\n};","map":{"version":3,"names":["fs","require","path","helper","log","create","IGNORED_PACKAGES","resolve","plugins","emitter","modules","requirePlugin","name","debug","push","e","code","message","includes","error","emit","forEach","plugin","isString","pluginDirectory","normalize","join","__dirname","regexp","RegExp","replace","readdirSync","map","modulePath","reduce","a","x","concat","relative","filter","moduleName","test","pluginName","isObject","Object","keys","createInstantiatePlugin","injector","get","pluginInstances","Map","instantiatePlugin","kind","has","p","stack","set","$inject","module","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/karma/lib/plugin.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst helper = require('./helper')\n\nconst log = require('./logger').create('plugin')\n\nconst IGNORED_PACKAGES = ['karma-cli', 'karma-runner.github.com']\n\nfunction resolve (plugins, emitter) {\n  const modules = []\n\n  function requirePlugin (name) {\n    log.debug(`Loading plugin ${name}.`)\n    try {\n      modules.push(require(name))\n    } catch (e) {\n      if (e.code === 'MODULE_NOT_FOUND' && e.message.includes(name)) {\n        log.error(`Cannot find plugin \"${name}\".\\n  Did you forget to install it?\\n  npm install ${name} --save-dev`)\n      } else {\n        log.error(`Error during loading \"${name}\" plugin:\\n  ${e.message}`)\n      }\n      emitter.emit('load_error', 'plug_in', name)\n    }\n  }\n\n  plugins.forEach(function (plugin) {\n    if (helper.isString(plugin)) {\n      if (!plugin.includes('*')) {\n        requirePlugin(plugin)\n        return\n      }\n      const pluginDirectory = path.normalize(path.join(__dirname, '/../..'))\n      const regexp = new RegExp(`^${plugin.replace(/\\*/g, '.*').replace(/\\//g, '[/\\\\\\\\]')}`)\n\n      log.debug(`Loading ${plugin} from ${pluginDirectory}`)\n      fs.readdirSync(pluginDirectory)\n        .map((e) => {\n          const modulePath = path.join(pluginDirectory, e)\n          if (e[0] === '@') {\n            return fs.readdirSync(modulePath).map((e) => path.join(modulePath, e))\n          }\n          return modulePath\n        })\n        .reduce((a, x) => a.concat(x), [])\n        .map((modulePath) => path.relative(pluginDirectory, modulePath))\n        .filter((moduleName) => !IGNORED_PACKAGES.includes(moduleName) && regexp.test(moduleName))\n        .forEach((pluginName) => requirePlugin(path.join(pluginDirectory, pluginName)))\n    } else if (helper.isObject(plugin)) {\n      log.debug(`Loading inline plugin defining ${Object.keys(plugin).join(', ')}.`)\n      modules.push(plugin)\n    } else {\n      log.error(`Invalid plugin ${plugin}`)\n      emitter.emit('load_error', 'plug_in', plugin)\n    }\n  })\n\n  return modules\n}\n\n/**\n  Create a function to handle errors in plugin loading.\n  @param {Object} injector, the dict of dependency injection objects.\n  @return function closed over injector, which reports errors.\n*/\nfunction createInstantiatePlugin (injector) {\n  const emitter = injector.get('emitter')\n  // Cache to avoid report errors multiple times per plugin.\n  const pluginInstances = new Map()\n  return function instantiatePlugin (kind, name) {\n    if (pluginInstances.has(name)) {\n      return pluginInstances.get(name)\n    }\n\n    let p\n    try {\n      p = injector.get(`${kind}:${name}`)\n      if (!p) {\n        log.error(`Failed to instantiate ${kind} ${name}`)\n        emitter.emit('load_error', kind, name)\n      }\n    } catch (e) {\n      if (e.message.includes(`No provider for \"${kind}:${name}\"`)) {\n        log.error(`Cannot load \"${name}\", it is not registered!\\n  Perhaps you are missing some plugin?`)\n      } else {\n        log.error(`Cannot load \"${name}\"!\\n  ` + e.stack)\n      }\n      emitter.emit('load_error', kind, name)\n    }\n    pluginInstances.set(name, p, `${kind}:${name}`)\n    return p\n  }\n}\n\ncreateInstantiatePlugin.$inject = ['injector']\n\nmodule.exports = { resolve, createInstantiatePlugin }\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAa,CAAC;AACjC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAU,CAAC;AAElC,MAAMG,GAAG,GAAGH,OAAO,CAAC,UAAU,CAAC,CAACI,MAAM,CAAC,QAAQ,CAAC;AAEhD,MAAMC,gBAAgB,GAAG,CAAC,WAAW,EAAE,yBAAyB,CAAC;AAEjE,SAASC,OAAO,CAAEC,OAAO,EAAEC,OAAO,EAAE;EAClC,MAAMC,OAAO,GAAG,EAAE;EAElB,SAASC,aAAa,CAAEC,IAAI,EAAE;IAC5BR,GAAG,CAACS,KAAK,CAAE,kBAAiBD,IAAK,GAAE,CAAC;IACpC,IAAI;MACFF,OAAO,CAACI,IAAI,CAACb,OAAO,CAACW,IAAI,CAAC,CAAC;IAC7B,CAAC,CAAC,OAAOG,CAAC,EAAE;MACV,IAAIA,CAAC,CAACC,IAAI,KAAK,kBAAkB,IAAID,CAAC,CAACE,OAAO,CAACC,QAAQ,CAACN,IAAI,CAAC,EAAE;QAC7DR,GAAG,CAACe,KAAK,CAAE,uBAAsBP,IAAK,sDAAqDA,IAAK,aAAY,CAAC;MAC/G,CAAC,MAAM;QACLR,GAAG,CAACe,KAAK,CAAE,yBAAwBP,IAAK,gBAAeG,CAAC,CAACE,OAAQ,EAAC,CAAC;MACrE;MACAR,OAAO,CAACW,IAAI,CAAC,YAAY,EAAE,SAAS,EAAER,IAAI,CAAC;IAC7C;EACF;EAEAJ,OAAO,CAACa,OAAO,CAAC,UAAUC,MAAM,EAAE;IAChC,IAAInB,MAAM,CAACoB,QAAQ,CAACD,MAAM,CAAC,EAAE;MAC3B,IAAI,CAACA,MAAM,CAACJ,QAAQ,CAAC,GAAG,CAAC,EAAE;QACzBP,aAAa,CAACW,MAAM,CAAC;QACrB;MACF;MACA,MAAME,eAAe,GAAGtB,IAAI,CAACuB,SAAS,CAACvB,IAAI,CAACwB,IAAI,CAACC,SAAS,EAAE,QAAQ,CAAC,CAAC;MACtE,MAAMC,MAAM,GAAG,IAAIC,MAAM,CAAE,IAAGP,MAAM,CAACQ,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,SAAS,CAAE,EAAC,CAAC;MAEtF1B,GAAG,CAACS,KAAK,CAAE,WAAUS,MAAO,SAAQE,eAAgB,EAAC,CAAC;MACtDxB,EAAE,CAAC+B,WAAW,CAACP,eAAe,CAAC,CAC5BQ,GAAG,CAAEjB,CAAC,IAAK;QACV,MAAMkB,UAAU,GAAG/B,IAAI,CAACwB,IAAI,CAACF,eAAe,EAAET,CAAC,CAAC;QAChD,IAAIA,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;UAChB,OAAOf,EAAE,CAAC+B,WAAW,CAACE,UAAU,CAAC,CAACD,GAAG,CAAEjB,CAAC,IAAKb,IAAI,CAACwB,IAAI,CAACO,UAAU,EAAElB,CAAC,CAAC,CAAC;QACxE;QACA,OAAOkB,UAAU;MACnB,CAAC,CAAC,CACDC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC,EAAE,EAAE,CAAC,CACjCJ,GAAG,CAAEC,UAAU,IAAK/B,IAAI,CAACoC,QAAQ,CAACd,eAAe,EAAES,UAAU,CAAC,CAAC,CAC/DM,MAAM,CAAEC,UAAU,IAAK,CAAClC,gBAAgB,CAACY,QAAQ,CAACsB,UAAU,CAAC,IAAIZ,MAAM,CAACa,IAAI,CAACD,UAAU,CAAC,CAAC,CACzFnB,OAAO,CAAEqB,UAAU,IAAK/B,aAAa,CAACT,IAAI,CAACwB,IAAI,CAACF,eAAe,EAAEkB,UAAU,CAAC,CAAC,CAAC;IACnF,CAAC,MAAM,IAAIvC,MAAM,CAACwC,QAAQ,CAACrB,MAAM,CAAC,EAAE;MAClClB,GAAG,CAACS,KAAK,CAAE,kCAAiC+B,MAAM,CAACC,IAAI,CAACvB,MAAM,CAAC,CAACI,IAAI,CAAC,IAAI,CAAE,GAAE,CAAC;MAC9EhB,OAAO,CAACI,IAAI,CAACQ,MAAM,CAAC;IACtB,CAAC,MAAM;MACLlB,GAAG,CAACe,KAAK,CAAE,kBAAiBG,MAAO,EAAC,CAAC;MACrCb,OAAO,CAACW,IAAI,CAAC,YAAY,EAAE,SAAS,EAAEE,MAAM,CAAC;IAC/C;EACF,CAAC,CAAC;EAEF,OAAOZ,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASoC,uBAAuB,CAAEC,QAAQ,EAAE;EAC1C,MAAMtC,OAAO,GAAGsC,QAAQ,CAACC,GAAG,CAAC,SAAS,CAAC;EACvC;EACA,MAAMC,eAAe,GAAG,IAAIC,GAAG,EAAE;EACjC,OAAO,SAASC,iBAAiB,CAAEC,IAAI,EAAExC,IAAI,EAAE;IAC7C,IAAIqC,eAAe,CAACI,GAAG,CAACzC,IAAI,CAAC,EAAE;MAC7B,OAAOqC,eAAe,CAACD,GAAG,CAACpC,IAAI,CAAC;IAClC;IAEA,IAAI0C,CAAC;IACL,IAAI;MACFA,CAAC,GAAGP,QAAQ,CAACC,GAAG,CAAE,GAAEI,IAAK,IAAGxC,IAAK,EAAC,CAAC;MACnC,IAAI,CAAC0C,CAAC,EAAE;QACNlD,GAAG,CAACe,KAAK,CAAE,yBAAwBiC,IAAK,IAAGxC,IAAK,EAAC,CAAC;QAClDH,OAAO,CAACW,IAAI,CAAC,YAAY,EAAEgC,IAAI,EAAExC,IAAI,CAAC;MACxC;IACF,CAAC,CAAC,OAAOG,CAAC,EAAE;MACV,IAAIA,CAAC,CAACE,OAAO,CAACC,QAAQ,CAAE,oBAAmBkC,IAAK,IAAGxC,IAAK,GAAE,CAAC,EAAE;QAC3DR,GAAG,CAACe,KAAK,CAAE,gBAAeP,IAAK,kEAAiE,CAAC;MACnG,CAAC,MAAM;QACLR,GAAG,CAACe,KAAK,CAAE,gBAAeP,IAAK,QAAO,GAAGG,CAAC,CAACwC,KAAK,CAAC;MACnD;MACA9C,OAAO,CAACW,IAAI,CAAC,YAAY,EAAEgC,IAAI,EAAExC,IAAI,CAAC;IACxC;IACAqC,eAAe,CAACO,GAAG,CAAC5C,IAAI,EAAE0C,CAAC,EAAG,GAAEF,IAAK,IAAGxC,IAAK,EAAC,CAAC;IAC/C,OAAO0C,CAAC;EACV,CAAC;AACH;AAEAR,uBAAuB,CAACW,OAAO,GAAG,CAAC,UAAU,CAAC;AAE9CC,MAAM,CAACC,OAAO,GAAG;EAAEpD,OAAO;EAAEuC;AAAwB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}