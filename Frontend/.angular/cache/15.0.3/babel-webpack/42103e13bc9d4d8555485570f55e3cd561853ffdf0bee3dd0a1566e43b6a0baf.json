{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exec = exec;\nexports.findPackageJSONDir = findPackageJSONDir;\nexports.getPostcssImplementation = getPostcssImplementation;\nexports.getPostcssOptions = getPostcssOptions;\nexports.loadConfig = loadConfig;\nexports.normalizeSourceMap = normalizeSourceMap;\nexports.normalizeSourceMapAfterPostcss = normalizeSourceMapAfterPostcss;\nexports.reportError = reportError;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _module = _interopRequireDefault(require(\"module\"));\nvar _full = require(\"klona/full\");\nvar _cosmiconfig = require(\"cosmiconfig\");\nvar _Error = _interopRequireDefault(require(\"./Error\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst parentModule = module;\nconst stat = (inputFileSystem, filePath) => new Promise((resolve, reject) => {\n  inputFileSystem.stat(filePath, (err, stats) => {\n    if (err) {\n      reject(err);\n    }\n    resolve(stats);\n  });\n});\nfunction exec(code, loaderContext) {\n  const {\n    resource,\n    context\n  } = loaderContext;\n  const module = new _module.default(resource, parentModule); // eslint-disable-next-line no-underscore-dangle\n\n  module.paths = _module.default._nodeModulePaths(context);\n  module.filename = resource; // eslint-disable-next-line no-underscore-dangle\n\n  module._compile(code, resource);\n  return module.exports;\n}\nfunction loadConfig(_x, _x2, _x3) {\n  return _loadConfig.apply(this, arguments);\n}\nfunction _loadConfig() {\n  _loadConfig = _asyncToGenerator(function* (loaderContext, config, postcssOptions) {\n    const searchPath = typeof config === \"string\" ? _path.default.resolve(config) : _path.default.dirname(loaderContext.resourcePath);\n    let stats;\n    try {\n      stats = yield stat(loaderContext.fs, searchPath);\n    } catch (errorIgnore) {\n      throw new Error(`No PostCSS config found in: ${searchPath}`);\n    }\n    const explorer = (0, _cosmiconfig.cosmiconfig)(\"postcss\");\n    let result;\n    try {\n      if (stats.isFile()) {\n        result = yield explorer.load(searchPath);\n      } else {\n        result = yield explorer.search(searchPath);\n      }\n    } catch (error) {\n      throw error;\n    }\n    if (!result) {\n      return {};\n    }\n    loaderContext.addBuildDependency(result.filepath);\n    loaderContext.addDependency(result.filepath);\n    if (result.isEmpty) {\n      return result;\n    }\n    if (typeof result.config === \"function\") {\n      const api = {\n        mode: loaderContext.mode,\n        file: loaderContext.resourcePath,\n        // For complex use\n        webpackLoaderContext: loaderContext,\n        // Partial compatibility with `postcss-cli`\n        env: loaderContext.mode,\n        options: postcssOptions || {}\n      };\n      result.config = result.config(api);\n    }\n    result = (0, _full.klona)(result);\n    return result;\n  });\n  return _loadConfig.apply(this, arguments);\n}\nfunction loadPlugin(plugin, options, file) {\n  try {\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    let loadedPlugin = require(plugin);\n    if (loadedPlugin.default) {\n      loadedPlugin = loadedPlugin.default;\n    }\n    if (!options || Object.keys(options).length === 0) {\n      return loadedPlugin;\n    }\n    return loadedPlugin(options);\n  } catch (error) {\n    throw new Error(`Loading PostCSS \"${plugin}\" plugin failed: ${error.message}\\n\\n(@${file})`);\n  }\n}\nfunction pluginFactory() {\n  const listOfPlugins = new Map();\n  return plugins => {\n    if (typeof plugins === \"undefined\") {\n      return listOfPlugins;\n    }\n    if (Array.isArray(plugins)) {\n      for (const plugin of plugins) {\n        if (Array.isArray(plugin)) {\n          const [name, options] = plugin;\n          listOfPlugins.set(name, options);\n        } else if (plugin && typeof plugin === \"function\") {\n          listOfPlugins.set(plugin);\n        } else if (plugin && Object.keys(plugin).length === 1 && (typeof plugin[Object.keys(plugin)[0]] === \"object\" || typeof plugin[Object.keys(plugin)[0]] === \"boolean\") && plugin[Object.keys(plugin)[0]] !== null) {\n          const [name] = Object.keys(plugin);\n          const options = plugin[name];\n          if (options === false) {\n            listOfPlugins.delete(name);\n          } else {\n            listOfPlugins.set(name, options);\n          }\n        } else if (plugin) {\n          listOfPlugins.set(plugin);\n        }\n      }\n    } else {\n      const objectPlugins = Object.entries(plugins);\n      for (const [name, options] of objectPlugins) {\n        if (options === false) {\n          listOfPlugins.delete(name);\n        } else {\n          listOfPlugins.set(name, options);\n        }\n      }\n    }\n    return listOfPlugins;\n  };\n}\nfunction tryRequireThenImport(_x4) {\n  return _tryRequireThenImport.apply(this, arguments);\n}\nfunction _tryRequireThenImport() {\n  _tryRequireThenImport = _asyncToGenerator(function* (module) {\n    let exports;\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      exports = require(module);\n      return exports;\n    } catch (requireError) {\n      let importESM;\n      try {\n        // eslint-disable-next-line no-new-func\n        importESM = new Function(\"id\", \"return import(id);\");\n      } catch (e) {\n        importESM = null;\n      }\n      if (requireError.code === \"ERR_REQUIRE_ESM\" && importESM) {\n        exports = yield importESM(module);\n        return exports.default;\n      }\n      throw requireError;\n    }\n  });\n  return _tryRequireThenImport.apply(this, arguments);\n}\nfunction getPostcssOptions(_x5) {\n  return _getPostcssOptions.apply(this, arguments);\n}\nfunction _getPostcssOptions() {\n  _getPostcssOptions = _asyncToGenerator(function* (loaderContext, loadedConfig = {}, postcssOptions = {}) {\n    const file = loaderContext.resourcePath;\n    let normalizedPostcssOptions = postcssOptions;\n    if (typeof normalizedPostcssOptions === \"function\") {\n      normalizedPostcssOptions = normalizedPostcssOptions(loaderContext);\n    }\n    let plugins = [];\n    try {\n      const factory = pluginFactory();\n      if (loadedConfig.config && loadedConfig.config.plugins) {\n        factory(loadedConfig.config.plugins);\n      }\n      factory(normalizedPostcssOptions.plugins);\n      plugins = [...factory()].map(item => {\n        const [plugin, options] = item;\n        if (typeof plugin === \"string\") {\n          return loadPlugin(plugin, options, file);\n        }\n        return plugin;\n      });\n    } catch (error) {\n      loaderContext.emitError(error);\n    }\n    const processOptionsFromConfig = loadedConfig.config || {};\n    if (processOptionsFromConfig.from) {\n      processOptionsFromConfig.from = _path.default.resolve(_path.default.dirname(loadedConfig.filepath), processOptionsFromConfig.from);\n    }\n    if (processOptionsFromConfig.to) {\n      processOptionsFromConfig.to = _path.default.resolve(_path.default.dirname(loadedConfig.filepath), processOptionsFromConfig.to);\n    } // No need them for processOptions\n\n    delete processOptionsFromConfig.plugins;\n    const processOptionsFromOptions = (0, _full.klona)(normalizedPostcssOptions);\n    if (processOptionsFromOptions.from) {\n      processOptionsFromOptions.from = _path.default.resolve(loaderContext.rootContext, processOptionsFromOptions.from);\n    }\n    if (processOptionsFromOptions.to) {\n      processOptionsFromOptions.to = _path.default.resolve(loaderContext.rootContext, processOptionsFromOptions.to);\n    } // No need them for processOptions\n\n    delete processOptionsFromOptions.config;\n    delete processOptionsFromOptions.plugins;\n    const processOptions = {\n      from: file,\n      to: file,\n      map: false,\n      ...processOptionsFromConfig,\n      ...processOptionsFromOptions\n    };\n    if (typeof processOptions.parser === \"string\") {\n      try {\n        processOptions.parser = yield tryRequireThenImport(processOptions.parser);\n      } catch (error) {\n        loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.parser}\" parser failed: ${error.message}\\n\\n(@${file})`));\n      }\n    }\n    if (typeof processOptions.stringifier === \"string\") {\n      try {\n        processOptions.stringifier = yield tryRequireThenImport(processOptions.stringifier);\n      } catch (error) {\n        loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.stringifier}\" stringifier failed: ${error.message}\\n\\n(@${file})`));\n      }\n    }\n    if (typeof processOptions.syntax === \"string\") {\n      try {\n        processOptions.syntax = yield tryRequireThenImport(processOptions.syntax);\n      } catch (error) {\n        loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.syntax}\" syntax failed: ${error.message}\\n\\n(@${file})`));\n      }\n    }\n    if (processOptions.map === true) {\n      // https://github.com/postcss/postcss/blob/master/docs/source-maps.md\n      processOptions.map = {\n        inline: true\n      };\n    }\n    return {\n      plugins,\n      processOptions\n    };\n  });\n  return _getPostcssOptions.apply(this, arguments);\n}\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i;\nconst ABSOLUTE_SCHEME = /^[a-z0-9+\\-.]+:/i;\nfunction getURLType(source) {\n  if (source[0] === \"/\") {\n    if (source[1] === \"/\") {\n      return \"scheme-relative\";\n    }\n    return \"path-absolute\";\n  }\n  if (IS_NATIVE_WIN32_PATH.test(source)) {\n    return \"path-absolute\";\n  }\n  return ABSOLUTE_SCHEME.test(source) ? \"absolute\" : \"path-relative\";\n}\nfunction normalizeSourceMap(map, resourceContext) {\n  let newMap = map; // Some loader emit source map as string\n  // Strip any JSON XSSI avoidance prefix from the string (as documented in the source maps specification), and then parse the string as JSON.\n\n  if (typeof newMap === \"string\") {\n    newMap = JSON.parse(newMap);\n  }\n  delete newMap.file;\n  const {\n    sourceRoot\n  } = newMap;\n  delete newMap.sourceRoot;\n  if (newMap.sources) {\n    newMap.sources = newMap.sources.map(source => {\n      const sourceType = getURLType(source); // Do no touch `scheme-relative` and `absolute` URLs\n\n      if (sourceType === \"path-relative\" || sourceType === \"path-absolute\") {\n        const absoluteSource = sourceType === \"path-relative\" && sourceRoot ? _path.default.resolve(sourceRoot, _path.default.normalize(source)) : _path.default.normalize(source);\n        return _path.default.relative(resourceContext, absoluteSource);\n      }\n      return source;\n    });\n  }\n  return newMap;\n}\nfunction normalizeSourceMapAfterPostcss(map, resourceContext) {\n  const newMap = map; // result.map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  delete newMap.file; // eslint-disable-next-line no-param-reassign\n\n  newMap.sourceRoot = \"\"; // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(source => {\n    if (source.indexOf(\"<\") === 0) {\n      return source;\n    }\n    const sourceType = getURLType(source); // Do no touch `scheme-relative`, `path-absolute` and `absolute` types\n\n    if (sourceType === \"path-relative\") {\n      return _path.default.resolve(resourceContext, source);\n    }\n    return source;\n  });\n  return newMap;\n}\nfunction findPackageJSONDir(cwd, statSync) {\n  let dir = cwd;\n  for (;;) {\n    try {\n      if (statSync(_path.default.join(dir, \"package.json\")).isFile()) {\n        break;\n      }\n    } catch (error) {// Nothing\n    }\n    const parent = _path.default.dirname(dir);\n    if (dir === parent) {\n      dir = null;\n      break;\n    }\n    dir = parent;\n  }\n  return dir;\n}\nfunction getPostcssImplementation(loaderContext, implementation) {\n  let resolvedImplementation = implementation;\n  if (!implementation || typeof implementation === \"string\") {\n    const postcssImplPkg = implementation || \"postcss\";\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      resolvedImplementation = require(postcssImplPkg);\n    } catch (error) {\n      loaderContext.emitError(error); // eslint-disable-next-line consistent-return\n\n      return;\n    }\n  } // eslint-disable-next-line consistent-return\n\n  return resolvedImplementation;\n}\nfunction reportError(loaderContext, callback, error) {\n  if (error.file) {\n    loaderContext.addDependency(error.file);\n  }\n  if (error.name === \"CssSyntaxError\") {\n    callback(new _Error.default(error));\n  } else {\n    callback(error);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","exec","findPackageJSONDir","getPostcssImplementation","getPostcssOptions","loadConfig","normalizeSourceMap","normalizeSourceMapAfterPostcss","reportError","_path","_interopRequireDefault","require","_module","_full","_cosmiconfig","_Error","obj","__esModule","default","parentModule","module","stat","inputFileSystem","filePath","Promise","resolve","reject","err","stats","code","loaderContext","resource","context","paths","_nodeModulePaths","filename","_compile","config","postcssOptions","searchPath","dirname","resourcePath","fs","errorIgnore","Error","explorer","cosmiconfig","result","isFile","load","search","error","addBuildDependency","filepath","addDependency","isEmpty","api","mode","file","webpackLoaderContext","env","options","klona","loadPlugin","plugin","loadedPlugin","keys","length","message","pluginFactory","listOfPlugins","Map","plugins","Array","isArray","name","set","delete","objectPlugins","entries","tryRequireThenImport","requireError","importESM","Function","e","loadedConfig","normalizedPostcssOptions","factory","map","item","emitError","processOptionsFromConfig","from","to","processOptionsFromOptions","rootContext","processOptions","parser","stringifier","syntax","inline","IS_NATIVE_WIN32_PATH","ABSOLUTE_SCHEME","getURLType","source","test","resourceContext","newMap","JSON","parse","sourceRoot","sources","sourceType","absoluteSource","normalize","relative","indexOf","cwd","statSync","dir","join","parent","implementation","resolvedImplementation","postcssImplPkg","callback"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/postcss-loader/dist/utils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exec = exec;\nexports.findPackageJSONDir = findPackageJSONDir;\nexports.getPostcssImplementation = getPostcssImplementation;\nexports.getPostcssOptions = getPostcssOptions;\nexports.loadConfig = loadConfig;\nexports.normalizeSourceMap = normalizeSourceMap;\nexports.normalizeSourceMapAfterPostcss = normalizeSourceMapAfterPostcss;\nexports.reportError = reportError;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _module = _interopRequireDefault(require(\"module\"));\n\nvar _full = require(\"klona/full\");\n\nvar _cosmiconfig = require(\"cosmiconfig\");\n\nvar _Error = _interopRequireDefault(require(\"./Error\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst parentModule = module;\n\nconst stat = (inputFileSystem, filePath) => new Promise((resolve, reject) => {\n  inputFileSystem.stat(filePath, (err, stats) => {\n    if (err) {\n      reject(err);\n    }\n\n    resolve(stats);\n  });\n});\n\nfunction exec(code, loaderContext) {\n  const {\n    resource,\n    context\n  } = loaderContext;\n  const module = new _module.default(resource, parentModule); // eslint-disable-next-line no-underscore-dangle\n\n  module.paths = _module.default._nodeModulePaths(context);\n  module.filename = resource; // eslint-disable-next-line no-underscore-dangle\n\n  module._compile(code, resource);\n\n  return module.exports;\n}\n\nasync function loadConfig(loaderContext, config, postcssOptions) {\n  const searchPath = typeof config === \"string\" ? _path.default.resolve(config) : _path.default.dirname(loaderContext.resourcePath);\n  let stats;\n\n  try {\n    stats = await stat(loaderContext.fs, searchPath);\n  } catch (errorIgnore) {\n    throw new Error(`No PostCSS config found in: ${searchPath}`);\n  }\n\n  const explorer = (0, _cosmiconfig.cosmiconfig)(\"postcss\");\n  let result;\n\n  try {\n    if (stats.isFile()) {\n      result = await explorer.load(searchPath);\n    } else {\n      result = await explorer.search(searchPath);\n    }\n  } catch (error) {\n    throw error;\n  }\n\n  if (!result) {\n    return {};\n  }\n\n  loaderContext.addBuildDependency(result.filepath);\n  loaderContext.addDependency(result.filepath);\n\n  if (result.isEmpty) {\n    return result;\n  }\n\n  if (typeof result.config === \"function\") {\n    const api = {\n      mode: loaderContext.mode,\n      file: loaderContext.resourcePath,\n      // For complex use\n      webpackLoaderContext: loaderContext,\n      // Partial compatibility with `postcss-cli`\n      env: loaderContext.mode,\n      options: postcssOptions || {}\n    };\n    result.config = result.config(api);\n  }\n\n  result = (0, _full.klona)(result);\n  return result;\n}\n\nfunction loadPlugin(plugin, options, file) {\n  try {\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    let loadedPlugin = require(plugin);\n\n    if (loadedPlugin.default) {\n      loadedPlugin = loadedPlugin.default;\n    }\n\n    if (!options || Object.keys(options).length === 0) {\n      return loadedPlugin;\n    }\n\n    return loadedPlugin(options);\n  } catch (error) {\n    throw new Error(`Loading PostCSS \"${plugin}\" plugin failed: ${error.message}\\n\\n(@${file})`);\n  }\n}\n\nfunction pluginFactory() {\n  const listOfPlugins = new Map();\n  return plugins => {\n    if (typeof plugins === \"undefined\") {\n      return listOfPlugins;\n    }\n\n    if (Array.isArray(plugins)) {\n      for (const plugin of plugins) {\n        if (Array.isArray(plugin)) {\n          const [name, options] = plugin;\n          listOfPlugins.set(name, options);\n        } else if (plugin && typeof plugin === \"function\") {\n          listOfPlugins.set(plugin);\n        } else if (plugin && Object.keys(plugin).length === 1 && (typeof plugin[Object.keys(plugin)[0]] === \"object\" || typeof plugin[Object.keys(plugin)[0]] === \"boolean\") && plugin[Object.keys(plugin)[0]] !== null) {\n          const [name] = Object.keys(plugin);\n          const options = plugin[name];\n\n          if (options === false) {\n            listOfPlugins.delete(name);\n          } else {\n            listOfPlugins.set(name, options);\n          }\n        } else if (plugin) {\n          listOfPlugins.set(plugin);\n        }\n      }\n    } else {\n      const objectPlugins = Object.entries(plugins);\n\n      for (const [name, options] of objectPlugins) {\n        if (options === false) {\n          listOfPlugins.delete(name);\n        } else {\n          listOfPlugins.set(name, options);\n        }\n      }\n    }\n\n    return listOfPlugins;\n  };\n}\n\nasync function tryRequireThenImport(module) {\n  let exports;\n\n  try {\n    // eslint-disable-next-line import/no-dynamic-require, global-require\n    exports = require(module);\n    return exports;\n  } catch (requireError) {\n    let importESM;\n\n    try {\n      // eslint-disable-next-line no-new-func\n      importESM = new Function(\"id\", \"return import(id);\");\n    } catch (e) {\n      importESM = null;\n    }\n\n    if (requireError.code === \"ERR_REQUIRE_ESM\" && importESM) {\n      exports = await importESM(module);\n      return exports.default;\n    }\n\n    throw requireError;\n  }\n}\n\nasync function getPostcssOptions(loaderContext, loadedConfig = {}, postcssOptions = {}) {\n  const file = loaderContext.resourcePath;\n  let normalizedPostcssOptions = postcssOptions;\n\n  if (typeof normalizedPostcssOptions === \"function\") {\n    normalizedPostcssOptions = normalizedPostcssOptions(loaderContext);\n  }\n\n  let plugins = [];\n\n  try {\n    const factory = pluginFactory();\n\n    if (loadedConfig.config && loadedConfig.config.plugins) {\n      factory(loadedConfig.config.plugins);\n    }\n\n    factory(normalizedPostcssOptions.plugins);\n    plugins = [...factory()].map(item => {\n      const [plugin, options] = item;\n\n      if (typeof plugin === \"string\") {\n        return loadPlugin(plugin, options, file);\n      }\n\n      return plugin;\n    });\n  } catch (error) {\n    loaderContext.emitError(error);\n  }\n\n  const processOptionsFromConfig = loadedConfig.config || {};\n\n  if (processOptionsFromConfig.from) {\n    processOptionsFromConfig.from = _path.default.resolve(_path.default.dirname(loadedConfig.filepath), processOptionsFromConfig.from);\n  }\n\n  if (processOptionsFromConfig.to) {\n    processOptionsFromConfig.to = _path.default.resolve(_path.default.dirname(loadedConfig.filepath), processOptionsFromConfig.to);\n  } // No need them for processOptions\n\n\n  delete processOptionsFromConfig.plugins;\n  const processOptionsFromOptions = (0, _full.klona)(normalizedPostcssOptions);\n\n  if (processOptionsFromOptions.from) {\n    processOptionsFromOptions.from = _path.default.resolve(loaderContext.rootContext, processOptionsFromOptions.from);\n  }\n\n  if (processOptionsFromOptions.to) {\n    processOptionsFromOptions.to = _path.default.resolve(loaderContext.rootContext, processOptionsFromOptions.to);\n  } // No need them for processOptions\n\n\n  delete processOptionsFromOptions.config;\n  delete processOptionsFromOptions.plugins;\n  const processOptions = {\n    from: file,\n    to: file,\n    map: false,\n    ...processOptionsFromConfig,\n    ...processOptionsFromOptions\n  };\n\n  if (typeof processOptions.parser === \"string\") {\n    try {\n      processOptions.parser = await tryRequireThenImport(processOptions.parser);\n    } catch (error) {\n      loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.parser}\" parser failed: ${error.message}\\n\\n(@${file})`));\n    }\n  }\n\n  if (typeof processOptions.stringifier === \"string\") {\n    try {\n      processOptions.stringifier = await tryRequireThenImport(processOptions.stringifier);\n    } catch (error) {\n      loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.stringifier}\" stringifier failed: ${error.message}\\n\\n(@${file})`));\n    }\n  }\n\n  if (typeof processOptions.syntax === \"string\") {\n    try {\n      processOptions.syntax = await tryRequireThenImport(processOptions.syntax);\n    } catch (error) {\n      loaderContext.emitError(new Error(`Loading PostCSS \"${processOptions.syntax}\" syntax failed: ${error.message}\\n\\n(@${file})`));\n    }\n  }\n\n  if (processOptions.map === true) {\n    // https://github.com/postcss/postcss/blob/master/docs/source-maps.md\n    processOptions.map = {\n      inline: true\n    };\n  }\n\n  return {\n    plugins,\n    processOptions\n  };\n}\n\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i;\nconst ABSOLUTE_SCHEME = /^[a-z0-9+\\-.]+:/i;\n\nfunction getURLType(source) {\n  if (source[0] === \"/\") {\n    if (source[1] === \"/\") {\n      return \"scheme-relative\";\n    }\n\n    return \"path-absolute\";\n  }\n\n  if (IS_NATIVE_WIN32_PATH.test(source)) {\n    return \"path-absolute\";\n  }\n\n  return ABSOLUTE_SCHEME.test(source) ? \"absolute\" : \"path-relative\";\n}\n\nfunction normalizeSourceMap(map, resourceContext) {\n  let newMap = map; // Some loader emit source map as string\n  // Strip any JSON XSSI avoidance prefix from the string (as documented in the source maps specification), and then parse the string as JSON.\n\n  if (typeof newMap === \"string\") {\n    newMap = JSON.parse(newMap);\n  }\n\n  delete newMap.file;\n  const {\n    sourceRoot\n  } = newMap;\n  delete newMap.sourceRoot;\n\n  if (newMap.sources) {\n    newMap.sources = newMap.sources.map(source => {\n      const sourceType = getURLType(source); // Do no touch `scheme-relative` and `absolute` URLs\n\n      if (sourceType === \"path-relative\" || sourceType === \"path-absolute\") {\n        const absoluteSource = sourceType === \"path-relative\" && sourceRoot ? _path.default.resolve(sourceRoot, _path.default.normalize(source)) : _path.default.normalize(source);\n        return _path.default.relative(resourceContext, absoluteSource);\n      }\n\n      return source;\n    });\n  }\n\n  return newMap;\n}\n\nfunction normalizeSourceMapAfterPostcss(map, resourceContext) {\n  const newMap = map; // result.map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  delete newMap.file; // eslint-disable-next-line no-param-reassign\n\n  newMap.sourceRoot = \"\"; // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(source => {\n    if (source.indexOf(\"<\") === 0) {\n      return source;\n    }\n\n    const sourceType = getURLType(source); // Do no touch `scheme-relative`, `path-absolute` and `absolute` types\n\n    if (sourceType === \"path-relative\") {\n      return _path.default.resolve(resourceContext, source);\n    }\n\n    return source;\n  });\n  return newMap;\n}\n\nfunction findPackageJSONDir(cwd, statSync) {\n  let dir = cwd;\n\n  for (;;) {\n    try {\n      if (statSync(_path.default.join(dir, \"package.json\")).isFile()) {\n        break;\n      }\n    } catch (error) {// Nothing\n    }\n\n    const parent = _path.default.dirname(dir);\n\n    if (dir === parent) {\n      dir = null;\n      break;\n    }\n\n    dir = parent;\n  }\n\n  return dir;\n}\n\nfunction getPostcssImplementation(loaderContext, implementation) {\n  let resolvedImplementation = implementation;\n\n  if (!implementation || typeof implementation === \"string\") {\n    const postcssImplPkg = implementation || \"postcss\";\n\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      resolvedImplementation = require(postcssImplPkg);\n    } catch (error) {\n      loaderContext.emitError(error); // eslint-disable-next-line consistent-return\n\n      return;\n    }\n  } // eslint-disable-next-line consistent-return\n\n\n  return resolvedImplementation;\n}\n\nfunction reportError(loaderContext, callback, error) {\n  if (error.file) {\n    loaderContext.addDependency(error.file);\n  }\n\n  if (error.name === \"CssSyntaxError\") {\n    callback(new _Error.default(error));\n  } else {\n    callback(error);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}