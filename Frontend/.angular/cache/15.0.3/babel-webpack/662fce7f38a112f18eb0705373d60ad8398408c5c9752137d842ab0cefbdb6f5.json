{"ast":null,"code":"'use strict';\n\nconst http = require('http');\nconst constant = require('./constants');\nconst EventEmitter = require('events').EventEmitter;\nconst helper = require('./helper');\nconst cfg = require('./config');\nconst logger = require('./logger');\nconst {\n  lookup\n} = require('./utils/dns-utils');\nconst log = logger.create('runner');\nfunction parseExitCode(buffer, defaultExitCode, failOnEmptyTestSuite) {\n  const tailPos = buffer.length - Buffer.byteLength(constant.EXIT_CODE) - 2;\n  if (tailPos < 0) {\n    return {\n      exitCode: defaultExitCode,\n      buffer\n    };\n  }\n  const tail = buffer.slice(tailPos);\n  const tailStr = tail.toString();\n  if (tailStr.slice(0, -2) === constant.EXIT_CODE) {\n    const emptyInt = parseInt(tailStr.slice(-2, -1), 10);\n    let exitCode = parseInt(tailStr.slice(-1), 10);\n    if (failOnEmptyTestSuite === false && emptyInt === 0) {\n      log.warn('Test suite was empty.');\n      exitCode = 0;\n    }\n    return {\n      exitCode,\n      buffer: buffer.slice(0, tailPos)\n    };\n  }\n  return {\n    exitCode: defaultExitCode,\n    buffer\n  };\n}\n\n// TODO(vojta): read config file (port, host, urlRoot)\nfunction run(cliOptionsOrConfig, done) {\n  cliOptionsOrConfig = cliOptionsOrConfig || {};\n  done = helper.isFunction(done) ? done : process.exit;\n  let config;\n  if (cliOptionsOrConfig instanceof cfg.Config) {\n    config = cliOptionsOrConfig;\n  } else {\n    logger.setupFromConfig({\n      colors: cliOptionsOrConfig.colors,\n      logLevel: cliOptionsOrConfig.logLevel\n    });\n    const deprecatedCliOptionsMessage = 'Passing raw CLI options to `runner(config, done)` is deprecated. Use ' + '`parseConfig(configFilePath, cliOptions, {promiseConfig: true, throwErrors: true})` ' + 'to prepare a processed `Config` instance and pass that as the ' + '`config` argument instead.';\n    log.warn(deprecatedCliOptionsMessage);\n    try {\n      config = cfg.parseConfig(cliOptionsOrConfig.configFile, cliOptionsOrConfig, {\n        promiseConfig: false,\n        throwErrors: true\n      });\n    } catch (parseConfigError) {\n      // TODO: change how `done` falls back to exit in next major version\n      //  SEE: https://github.com/karma-runner/karma/pull/3635#discussion_r565399378\n      done(1);\n    }\n  }\n  let exitCode = 1;\n  const emitter = new EventEmitter();\n  const options = {\n    hostname: config.hostname,\n    path: config.urlRoot + 'run',\n    port: config.port,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    lookup\n  };\n  const request = http.request(options, function (response) {\n    response.on('data', function (buffer) {\n      const parsedResult = parseExitCode(buffer, exitCode, config.failOnEmptyTestSuite);\n      exitCode = parsedResult.exitCode;\n      emitter.emit('progress', parsedResult.buffer);\n    });\n    response.on('end', () => done(exitCode));\n  });\n  request.on('error', function (e) {\n    if (e.code === 'ECONNREFUSED') {\n      log.error('There is no server listening on port %d', options.port);\n      done(1, e.code);\n    } else {\n      throw e;\n    }\n  });\n  request.end(JSON.stringify({\n    args: config.clientArgs,\n    removedFiles: config.removedFiles,\n    changedFiles: config.changedFiles,\n    addedFiles: config.addedFiles,\n    refresh: config.refresh,\n    colors: config.colors\n  }));\n  return emitter;\n}\nexports.run = run;","map":{"version":3,"names":["http","require","constant","EventEmitter","helper","cfg","logger","lookup","log","create","parseExitCode","buffer","defaultExitCode","failOnEmptyTestSuite","tailPos","length","Buffer","byteLength","EXIT_CODE","exitCode","tail","slice","tailStr","toString","emptyInt","parseInt","warn","run","cliOptionsOrConfig","done","isFunction","process","exit","config","Config","setupFromConfig","colors","logLevel","deprecatedCliOptionsMessage","parseConfig","configFile","promiseConfig","throwErrors","parseConfigError","emitter","options","hostname","path","urlRoot","port","method","headers","request","response","on","parsedResult","emit","e","code","error","end","JSON","stringify","args","clientArgs","removedFiles","changedFiles","addedFiles","refresh","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/karma/lib/runner.js"],"sourcesContent":["'use strict'\n\nconst http = require('http')\n\nconst constant = require('./constants')\nconst EventEmitter = require('events').EventEmitter\nconst helper = require('./helper')\nconst cfg = require('./config')\nconst logger = require('./logger')\nconst { lookup } = require('./utils/dns-utils')\nconst log = logger.create('runner')\n\nfunction parseExitCode (buffer, defaultExitCode, failOnEmptyTestSuite) {\n  const tailPos = buffer.length - Buffer.byteLength(constant.EXIT_CODE) - 2\n\n  if (tailPos < 0) {\n    return { exitCode: defaultExitCode, buffer }\n  }\n\n  const tail = buffer.slice(tailPos)\n  const tailStr = tail.toString()\n  if (tailStr.slice(0, -2) === constant.EXIT_CODE) {\n    const emptyInt = parseInt(tailStr.slice(-2, -1), 10)\n    let exitCode = parseInt(tailStr.slice(-1), 10)\n    if (failOnEmptyTestSuite === false && emptyInt === 0) {\n      log.warn('Test suite was empty.')\n      exitCode = 0\n    }\n    return { exitCode, buffer: buffer.slice(0, tailPos) }\n  }\n\n  return { exitCode: defaultExitCode, buffer }\n}\n\n// TODO(vojta): read config file (port, host, urlRoot)\nfunction run (cliOptionsOrConfig, done) {\n  cliOptionsOrConfig = cliOptionsOrConfig || {}\n  done = helper.isFunction(done) ? done : process.exit\n\n  let config\n  if (cliOptionsOrConfig instanceof cfg.Config) {\n    config = cliOptionsOrConfig\n  } else {\n    logger.setupFromConfig({\n      colors: cliOptionsOrConfig.colors,\n      logLevel: cliOptionsOrConfig.logLevel\n    })\n    const deprecatedCliOptionsMessage =\n      'Passing raw CLI options to `runner(config, done)` is deprecated. Use ' +\n      '`parseConfig(configFilePath, cliOptions, {promiseConfig: true, throwErrors: true})` ' +\n      'to prepare a processed `Config` instance and pass that as the ' +\n      '`config` argument instead.'\n    log.warn(deprecatedCliOptionsMessage)\n    try {\n      config = cfg.parseConfig(\n        cliOptionsOrConfig.configFile,\n        cliOptionsOrConfig,\n        {\n          promiseConfig: false,\n          throwErrors: true\n        }\n      )\n    } catch (parseConfigError) {\n      // TODO: change how `done` falls back to exit in next major version\n      //  SEE: https://github.com/karma-runner/karma/pull/3635#discussion_r565399378\n      done(1)\n    }\n  }\n  let exitCode = 1\n  const emitter = new EventEmitter()\n  const options = {\n    hostname: config.hostname,\n    path: config.urlRoot + 'run',\n    port: config.port,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    lookup\n  }\n\n  const request = http.request(options, function (response) {\n    response.on('data', function (buffer) {\n      const parsedResult = parseExitCode(buffer, exitCode, config.failOnEmptyTestSuite)\n      exitCode = parsedResult.exitCode\n      emitter.emit('progress', parsedResult.buffer)\n    })\n\n    response.on('end', () => done(exitCode))\n  })\n\n  request.on('error', function (e) {\n    if (e.code === 'ECONNREFUSED') {\n      log.error('There is no server listening on port %d', options.port)\n      done(1, e.code)\n    } else {\n      throw e\n    }\n  })\n\n  request.end(JSON.stringify({\n    args: config.clientArgs,\n    removedFiles: config.removedFiles,\n    changedFiles: config.changedFiles,\n    addedFiles: config.addedFiles,\n    refresh: config.refresh,\n    colors: config.colors\n  }))\n\n  return emitter\n}\n\nexports.run = run\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}