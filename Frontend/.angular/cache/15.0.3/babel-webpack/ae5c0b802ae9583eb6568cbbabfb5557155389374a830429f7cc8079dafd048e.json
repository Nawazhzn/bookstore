{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OccurrencesPlugin = void 0;\nconst PLUGIN_NAME = 'angular-occurrences-plugin';\nclass OccurrencesPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n  apply(compiler) {\n    var _this = this;\n    compiler.hooks.thisCompilation.tap(PLUGIN_NAME, compilation => {\n      compilation.hooks.processAssets.tapPromise({\n        name: PLUGIN_NAME,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_ANALYSE\n      }, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (compilationAssets) {\n          for (const assetName of Object.keys(compilationAssets)) {\n            if (!assetName.endsWith('.js')) {\n              continue;\n            }\n            const scriptAsset = compilation.getAsset(assetName);\n            if (!scriptAsset || scriptAsset.source.size() <= 0) {\n              continue;\n            }\n            const src = scriptAsset.source.source().toString('utf-8');\n            let ngComponentCount = 0;\n            if (!_this.options.aot) {\n              // Count the number of `Component({` strings (case sensitive), which happens in __decorate().\n              ngComponentCount += _this.countOccurrences(src, 'Component({');\n            }\n            if (_this.options.scriptsOptimization) {\n              // for ascii_only true\n              ngComponentCount += _this.countOccurrences(src, '.\\\\u0275cmp', false);\n            } else {\n              // For Ivy we just count ɵcmp.src\n              ngComponentCount += _this.countOccurrences(src, '.ɵcmp', true);\n            }\n            compilation.updateAsset(assetName, s => s, assetInfo => ({\n              ...assetInfo,\n              ngComponentCount\n            }));\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    });\n  }\n  countOccurrences(source, match, wordBreak = false) {\n    let count = 0;\n    // We condition here so branch prediction happens out of the loop, not in it.\n    if (wordBreak) {\n      const re = /\\w/;\n      for (let pos = source.lastIndexOf(match); pos >= 0; pos = source.lastIndexOf(match, pos)) {\n        if (!(re.test(source[pos - 1] || '') || re.test(source[pos + match.length] || ''))) {\n          count++; // 1 match, AH! AH! AH! 2 matches, AH! AH! AH!\n        }\n\n        pos -= match.length;\n        if (pos < 0) {\n          break;\n        }\n      }\n    } else {\n      for (let pos = source.lastIndexOf(match); pos >= 0; pos = source.lastIndexOf(match, pos)) {\n        count++; // 1 match, AH! AH! AH! 2 matches, AH! AH! AH!\n        pos -= match.length;\n        if (pos < 0) {\n          break;\n        }\n      }\n    }\n    return count;\n  }\n}\nexports.OccurrencesPlugin = OccurrencesPlugin;","map":{"version":3,"names":["Object","defineProperty","exports","value","OccurrencesPlugin","PLUGIN_NAME","constructor","options","apply","compiler","hooks","thisCompilation","tap","compilation","processAssets","tapPromise","name","stage","webpack","Compilation","PROCESS_ASSETS_STAGE_ANALYSE","compilationAssets","assetName","keys","endsWith","scriptAsset","getAsset","source","size","src","toString","ngComponentCount","aot","countOccurrences","scriptsOptimization","updateAsset","s","assetInfo","match","wordBreak","count","re","pos","lastIndexOf","test","length"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@angular-devkit/build-angular/src/webpack/plugins/occurrences-plugin.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OccurrencesPlugin = void 0;\nconst PLUGIN_NAME = 'angular-occurrences-plugin';\nclass OccurrencesPlugin {\n    constructor(options) {\n        this.options = options;\n    }\n    apply(compiler) {\n        compiler.hooks.thisCompilation.tap(PLUGIN_NAME, (compilation) => {\n            compilation.hooks.processAssets.tapPromise({\n                name: PLUGIN_NAME,\n                stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_ANALYSE,\n            }, async (compilationAssets) => {\n                for (const assetName of Object.keys(compilationAssets)) {\n                    if (!assetName.endsWith('.js')) {\n                        continue;\n                    }\n                    const scriptAsset = compilation.getAsset(assetName);\n                    if (!scriptAsset || scriptAsset.source.size() <= 0) {\n                        continue;\n                    }\n                    const src = scriptAsset.source.source().toString('utf-8');\n                    let ngComponentCount = 0;\n                    if (!this.options.aot) {\n                        // Count the number of `Component({` strings (case sensitive), which happens in __decorate().\n                        ngComponentCount += this.countOccurrences(src, 'Component({');\n                    }\n                    if (this.options.scriptsOptimization) {\n                        // for ascii_only true\n                        ngComponentCount += this.countOccurrences(src, '.\\\\u0275cmp', false);\n                    }\n                    else {\n                        // For Ivy we just count ɵcmp.src\n                        ngComponentCount += this.countOccurrences(src, '.ɵcmp', true);\n                    }\n                    compilation.updateAsset(assetName, (s) => s, (assetInfo) => ({\n                        ...assetInfo,\n                        ngComponentCount,\n                    }));\n                }\n            });\n        });\n    }\n    countOccurrences(source, match, wordBreak = false) {\n        let count = 0;\n        // We condition here so branch prediction happens out of the loop, not in it.\n        if (wordBreak) {\n            const re = /\\w/;\n            for (let pos = source.lastIndexOf(match); pos >= 0; pos = source.lastIndexOf(match, pos)) {\n                if (!(re.test(source[pos - 1] || '') || re.test(source[pos + match.length] || ''))) {\n                    count++; // 1 match, AH! AH! AH! 2 matches, AH! AH! AH!\n                }\n                pos -= match.length;\n                if (pos < 0) {\n                    break;\n                }\n            }\n        }\n        else {\n            for (let pos = source.lastIndexOf(match); pos >= 0; pos = source.lastIndexOf(match, pos)) {\n                count++; // 1 match, AH! AH! AH! 2 matches, AH! AH! AH!\n                pos -= match.length;\n                if (pos < 0) {\n                    break;\n                }\n            }\n        }\n        return count;\n    }\n}\nexports.OccurrencesPlugin = OccurrencesPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}