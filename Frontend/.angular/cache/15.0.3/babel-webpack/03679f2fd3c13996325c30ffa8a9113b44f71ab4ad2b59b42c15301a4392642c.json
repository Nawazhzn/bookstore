{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\nvar _utils = require(\"../utils\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst isUrlFunc = /url/i;\nconst isImageSetFunc = /^(?:-webkit-)?image-set$/i;\nconst needParseDeclaration = /(?:url|(?:-webkit-)?image-set)\\(/i;\nfunction getNodeFromUrlFunc(node) {\n  return node.nodes && node.nodes[0];\n}\nfunction getWebpackIgnoreCommentValue(index, nodes, inBetween) {\n  if (index === 0 && typeof inBetween !== \"undefined\") {\n    return inBetween;\n  }\n  let prevValueNode = nodes[index - 1];\n  if (!prevValueNode) {\n    // eslint-disable-next-line consistent-return\n    return;\n  }\n  if (prevValueNode.type === \"space\") {\n    if (!nodes[index - 2]) {\n      // eslint-disable-next-line consistent-return\n      return;\n    }\n    prevValueNode = nodes[index - 2];\n  }\n  if (prevValueNode.type !== \"comment\") {\n    // eslint-disable-next-line consistent-return\n    return;\n  }\n  const matched = prevValueNode.value.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n  return matched && matched[2] === \"true\";\n}\nfunction shouldHandleURL(url, declaration, result, options) {\n  if (url.length === 0) {\n    result.warn(`Unable to find uri in '${declaration.toString()}'`, {\n      node: declaration\n    });\n    return {\n      requestable: false,\n      needResolve: false\n    };\n  }\n  return (0, _utils.isURLRequestable)(url, options);\n}\nfunction parseDeclaration(declaration, key, result, options) {\n  if (!needParseDeclaration.test(declaration[key])) {\n    return;\n  }\n  const parsed = (0, _postcssValueParser.default)(declaration.raws && declaration.raws.value && declaration.raws.value.raw ? declaration.raws.value.raw : declaration[key]);\n  let inBetween;\n  if (declaration.raws && declaration.raws.between) {\n    const lastCommentIndex = declaration.raws.between.lastIndexOf(\"/*\");\n    const matched = declaration.raws.between.slice(lastCommentIndex).match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n    if (matched) {\n      inBetween = matched[2] === \"true\";\n    }\n  }\n  let isIgnoreOnDeclaration = false;\n  const prevNode = declaration.prev();\n  if (prevNode && prevNode.type === \"comment\") {\n    const matched = prevNode.text.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n    if (matched) {\n      isIgnoreOnDeclaration = matched[2] === \"true\";\n    }\n  }\n  let needIgnore;\n  const parsedURLs = [];\n  parsed.walk((valueNode, index, valueNodes) => {\n    if (valueNode.type !== \"function\") {\n      return;\n    }\n    if (isUrlFunc.test(valueNode.value)) {\n      needIgnore = getWebpackIgnoreCommentValue(index, valueNodes, inBetween);\n      if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n        if (needIgnore) {\n          // eslint-disable-next-line no-undefined\n          needIgnore = undefined;\n        }\n        return;\n      }\n      const {\n        nodes\n      } = valueNode;\n      const isStringValue = nodes.length !== 0 && nodes[0].type === \"string\";\n      let url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n      url = (0, _utils.normalizeUrl)(url, isStringValue);\n      const {\n        requestable,\n        needResolve\n      } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n      if (!requestable) {\n        // eslint-disable-next-line consistent-return\n        return false;\n      }\n      const queryParts = url.split(\"!\");\n      let prefix;\n      if (queryParts.length > 1) {\n        url = queryParts.pop();\n        prefix = queryParts.join(\"!\");\n      }\n      parsedURLs.push({\n        declaration,\n        parsed,\n        node: getNodeFromUrlFunc(valueNode),\n        prefix,\n        url,\n        needQuotes: false,\n        needResolve\n      }); // eslint-disable-next-line consistent-return\n\n      return false;\n    } else if (isImageSetFunc.test(valueNode.value)) {\n      for (const [innerIndex, nNode] of valueNode.nodes.entries()) {\n        const {\n          type,\n          value\n        } = nNode;\n        if (type === \"function\" && isUrlFunc.test(value)) {\n          needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);\n          if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n            if (needIgnore) {\n              // eslint-disable-next-line no-undefined\n              needIgnore = undefined;\n            } // eslint-disable-next-line no-continue\n\n            continue;\n          }\n          const {\n            nodes\n          } = nNode;\n          const isStringValue = nodes.length !== 0 && nodes[0].type === \"string\";\n          let url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n          url = (0, _utils.normalizeUrl)(url, isStringValue);\n          const {\n            requestable,\n            needResolve\n          } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n          if (!requestable) {\n            // eslint-disable-next-line consistent-return\n            return false;\n          }\n          const queryParts = url.split(\"!\");\n          let prefix;\n          if (queryParts.length > 1) {\n            url = queryParts.pop();\n            prefix = queryParts.join(\"!\");\n          }\n          parsedURLs.push({\n            declaration,\n            parsed,\n            node: getNodeFromUrlFunc(nNode),\n            prefix,\n            url,\n            needQuotes: false,\n            needResolve\n          });\n        } else if (type === \"string\") {\n          needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);\n          if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n            if (needIgnore) {\n              // eslint-disable-next-line no-undefined\n              needIgnore = undefined;\n            } // eslint-disable-next-line no-continue\n\n            continue;\n          }\n          let url = (0, _utils.normalizeUrl)(value, true);\n          const {\n            requestable,\n            needResolve\n          } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n          if (!requestable) {\n            // eslint-disable-next-line consistent-return\n            return false;\n          }\n          const queryParts = url.split(\"!\");\n          let prefix;\n          if (queryParts.length > 1) {\n            url = queryParts.pop();\n            prefix = queryParts.join(\"!\");\n          }\n          parsedURLs.push({\n            declaration,\n            parsed,\n            node: nNode,\n            prefix,\n            url,\n            needQuotes: true,\n            needResolve\n          });\n        }\n      } // Do not traverse inside `image-set`\n      // eslint-disable-next-line consistent-return\n\n      return false;\n    }\n  }); // eslint-disable-next-line consistent-return\n\n  return parsedURLs;\n}\nconst plugin = (options = {}) => {\n  return {\n    postcssPlugin: \"postcss-url-parser\",\n    prepare(result) {\n      const parsedDeclarations = [];\n      return {\n        Declaration(declaration) {\n          const {\n            isSupportDataURL,\n            isSupportAbsoluteURL\n          } = options;\n          const parsedURL = parseDeclaration(declaration, \"value\", result, {\n            isSupportDataURL,\n            isSupportAbsoluteURL\n          });\n          if (!parsedURL) {\n            return;\n          }\n          parsedDeclarations.push(...parsedURL);\n        },\n        OnceExit() {\n          return _asyncToGenerator(function* () {\n            if (parsedDeclarations.length === 0) {\n              return;\n            }\n            const resolvedDeclarations = yield Promise.all(parsedDeclarations.map( /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator(function* (parsedDeclaration) {\n                const {\n                  url,\n                  needResolve\n                } = parsedDeclaration;\n                if (options.filter) {\n                  const needKeep = yield options.filter(url);\n                  if (!needKeep) {\n                    // eslint-disable-next-line consistent-return\n                    return;\n                  }\n                }\n                if (!needResolve) {\n                  // eslint-disable-next-line consistent-return\n                  return parsedDeclaration;\n                }\n                const splittedUrl = url.split(/(\\?)?#/);\n                const [pathname, query, hashOrQuery] = splittedUrl;\n                let hash = query ? \"?\" : \"\";\n                hash += hashOrQuery ? `#${hashOrQuery}` : \"\";\n                const {\n                  resolver,\n                  rootContext\n                } = options;\n                const request = (0, _utils.requestify)(pathname, rootContext, Boolean(resolver));\n                if (!resolver) {\n                  // eslint-disable-next-line consistent-return\n                  return {\n                    ...parsedDeclaration,\n                    url: request,\n                    hash\n                  };\n                }\n                const resolvedURL = yield (0, _utils.resolveRequests)(resolver, options.context, [...new Set([request, url])]);\n                if (!resolvedURL) {\n                  // eslint-disable-next-line consistent-return\n                  return;\n                } // eslint-disable-next-line consistent-return\n\n                return {\n                  ...parsedDeclaration,\n                  url: resolvedURL,\n                  hash\n                };\n              });\n              return function (_x) {\n                return _ref.apply(this, arguments);\n              };\n            }()));\n            const urlToNameMap = new Map();\n            const urlToReplacementMap = new Map();\n            let hasUrlImportHelper = false;\n            for (let index = 0; index <= resolvedDeclarations.length - 1; index++) {\n              const item = resolvedDeclarations[index];\n              if (!item) {\n                // eslint-disable-next-line no-continue\n                continue;\n              }\n              if (!hasUrlImportHelper) {\n                options.imports.push({\n                  type: \"get_url_import\",\n                  importName: \"___CSS_LOADER_GET_URL_IMPORT___\",\n                  url: options.urlHandler(require.resolve(\"../runtime/getUrl.js\")),\n                  index: -1\n                });\n                hasUrlImportHelper = true;\n              }\n              const {\n                url,\n                prefix\n              } = item;\n              const newUrl = prefix ? `${prefix}!${url}` : url;\n              let importName = urlToNameMap.get(newUrl);\n              if (!importName) {\n                importName = `___CSS_LOADER_URL_IMPORT_${urlToNameMap.size}___`;\n                urlToNameMap.set(newUrl, importName);\n                options.imports.push({\n                  type: \"url\",\n                  importName,\n                  url: options.resolver ? options.urlHandler(newUrl) : JSON.stringify(newUrl),\n                  index\n                });\n              }\n              const {\n                hash,\n                needQuotes\n              } = item;\n              const replacementKey = JSON.stringify({\n                newUrl,\n                hash,\n                needQuotes\n              });\n              let replacementName = urlToReplacementMap.get(replacementKey);\n              if (!replacementName) {\n                replacementName = `___CSS_LOADER_URL_REPLACEMENT_${urlToReplacementMap.size}___`;\n                urlToReplacementMap.set(replacementKey, replacementName);\n                options.replacements.push({\n                  replacementName,\n                  importName,\n                  hash,\n                  needQuotes\n                });\n              } // eslint-disable-next-line no-param-reassign\n\n              item.node.type = \"word\"; // eslint-disable-next-line no-param-reassign\n\n              item.node.value = replacementName; // eslint-disable-next-line no-param-reassign\n\n              item.declaration.value = item.parsed.toString();\n            }\n          })();\n        }\n      };\n    }\n  };\n};\nplugin.postcss = true;\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_postcssValueParser","_interopRequireDefault","require","_utils","obj","__esModule","isUrlFunc","isImageSetFunc","needParseDeclaration","getNodeFromUrlFunc","node","nodes","getWebpackIgnoreCommentValue","index","inBetween","prevValueNode","type","matched","match","WEBPACK_IGNORE_COMMENT_REGEXP","shouldHandleURL","url","declaration","result","options","length","warn","toString","requestable","needResolve","isURLRequestable","parseDeclaration","key","test","parsed","raws","raw","between","lastCommentIndex","lastIndexOf","slice","isIgnoreOnDeclaration","prevNode","prev","text","needIgnore","parsedURLs","walk","valueNode","valueNodes","undefined","isStringValue","stringify","normalizeUrl","queryParts","split","prefix","pop","join","push","needQuotes","innerIndex","nNode","entries","plugin","postcssPlugin","prepare","parsedDeclarations","Declaration","isSupportDataURL","isSupportAbsoluteURL","parsedURL","OnceExit","resolvedDeclarations","Promise","all","map","parsedDeclaration","filter","needKeep","splittedUrl","pathname","query","hashOrQuery","hash","resolver","rootContext","request","requestify","Boolean","resolvedURL","resolveRequests","context","Set","urlToNameMap","Map","urlToReplacementMap","hasUrlImportHelper","item","imports","importName","urlHandler","resolve","newUrl","get","size","set","JSON","replacementKey","replacementName","replacements","postcss","_default"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/css-loader/dist/plugins/postcss-url-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst isUrlFunc = /url/i;\nconst isImageSetFunc = /^(?:-webkit-)?image-set$/i;\nconst needParseDeclaration = /(?:url|(?:-webkit-)?image-set)\\(/i;\n\nfunction getNodeFromUrlFunc(node) {\n  return node.nodes && node.nodes[0];\n}\n\nfunction getWebpackIgnoreCommentValue(index, nodes, inBetween) {\n  if (index === 0 && typeof inBetween !== \"undefined\") {\n    return inBetween;\n  }\n\n  let prevValueNode = nodes[index - 1];\n\n  if (!prevValueNode) {\n    // eslint-disable-next-line consistent-return\n    return;\n  }\n\n  if (prevValueNode.type === \"space\") {\n    if (!nodes[index - 2]) {\n      // eslint-disable-next-line consistent-return\n      return;\n    }\n\n    prevValueNode = nodes[index - 2];\n  }\n\n  if (prevValueNode.type !== \"comment\") {\n    // eslint-disable-next-line consistent-return\n    return;\n  }\n\n  const matched = prevValueNode.value.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n  return matched && matched[2] === \"true\";\n}\n\nfunction shouldHandleURL(url, declaration, result, options) {\n  if (url.length === 0) {\n    result.warn(`Unable to find uri in '${declaration.toString()}'`, {\n      node: declaration\n    });\n    return {\n      requestable: false,\n      needResolve: false\n    };\n  }\n\n  return (0, _utils.isURLRequestable)(url, options);\n}\n\nfunction parseDeclaration(declaration, key, result, options) {\n  if (!needParseDeclaration.test(declaration[key])) {\n    return;\n  }\n\n  const parsed = (0, _postcssValueParser.default)(declaration.raws && declaration.raws.value && declaration.raws.value.raw ? declaration.raws.value.raw : declaration[key]);\n  let inBetween;\n\n  if (declaration.raws && declaration.raws.between) {\n    const lastCommentIndex = declaration.raws.between.lastIndexOf(\"/*\");\n    const matched = declaration.raws.between.slice(lastCommentIndex).match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n\n    if (matched) {\n      inBetween = matched[2] === \"true\";\n    }\n  }\n\n  let isIgnoreOnDeclaration = false;\n  const prevNode = declaration.prev();\n\n  if (prevNode && prevNode.type === \"comment\") {\n    const matched = prevNode.text.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n\n    if (matched) {\n      isIgnoreOnDeclaration = matched[2] === \"true\";\n    }\n  }\n\n  let needIgnore;\n  const parsedURLs = [];\n  parsed.walk((valueNode, index, valueNodes) => {\n    if (valueNode.type !== \"function\") {\n      return;\n    }\n\n    if (isUrlFunc.test(valueNode.value)) {\n      needIgnore = getWebpackIgnoreCommentValue(index, valueNodes, inBetween);\n\n      if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n        if (needIgnore) {\n          // eslint-disable-next-line no-undefined\n          needIgnore = undefined;\n        }\n\n        return;\n      }\n\n      const {\n        nodes\n      } = valueNode;\n      const isStringValue = nodes.length !== 0 && nodes[0].type === \"string\";\n      let url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n      url = (0, _utils.normalizeUrl)(url, isStringValue);\n      const {\n        requestable,\n        needResolve\n      } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n      if (!requestable) {\n        // eslint-disable-next-line consistent-return\n        return false;\n      }\n\n      const queryParts = url.split(\"!\");\n      let prefix;\n\n      if (queryParts.length > 1) {\n        url = queryParts.pop();\n        prefix = queryParts.join(\"!\");\n      }\n\n      parsedURLs.push({\n        declaration,\n        parsed,\n        node: getNodeFromUrlFunc(valueNode),\n        prefix,\n        url,\n        needQuotes: false,\n        needResolve\n      }); // eslint-disable-next-line consistent-return\n\n      return false;\n    } else if (isImageSetFunc.test(valueNode.value)) {\n      for (const [innerIndex, nNode] of valueNode.nodes.entries()) {\n        const {\n          type,\n          value\n        } = nNode;\n\n        if (type === \"function\" && isUrlFunc.test(value)) {\n          needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);\n\n          if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n            if (needIgnore) {\n              // eslint-disable-next-line no-undefined\n              needIgnore = undefined;\n            } // eslint-disable-next-line no-continue\n\n\n            continue;\n          }\n\n          const {\n            nodes\n          } = nNode;\n          const isStringValue = nodes.length !== 0 && nodes[0].type === \"string\";\n          let url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n          url = (0, _utils.normalizeUrl)(url, isStringValue);\n          const {\n            requestable,\n            needResolve\n          } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n          if (!requestable) {\n            // eslint-disable-next-line consistent-return\n            return false;\n          }\n\n          const queryParts = url.split(\"!\");\n          let prefix;\n\n          if (queryParts.length > 1) {\n            url = queryParts.pop();\n            prefix = queryParts.join(\"!\");\n          }\n\n          parsedURLs.push({\n            declaration,\n            parsed,\n            node: getNodeFromUrlFunc(nNode),\n            prefix,\n            url,\n            needQuotes: false,\n            needResolve\n          });\n        } else if (type === \"string\") {\n          needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);\n\n          if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n            if (needIgnore) {\n              // eslint-disable-next-line no-undefined\n              needIgnore = undefined;\n            } // eslint-disable-next-line no-continue\n\n\n            continue;\n          }\n\n          let url = (0, _utils.normalizeUrl)(value, true);\n          const {\n            requestable,\n            needResolve\n          } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n          if (!requestable) {\n            // eslint-disable-next-line consistent-return\n            return false;\n          }\n\n          const queryParts = url.split(\"!\");\n          let prefix;\n\n          if (queryParts.length > 1) {\n            url = queryParts.pop();\n            prefix = queryParts.join(\"!\");\n          }\n\n          parsedURLs.push({\n            declaration,\n            parsed,\n            node: nNode,\n            prefix,\n            url,\n            needQuotes: true,\n            needResolve\n          });\n        }\n      } // Do not traverse inside `image-set`\n      // eslint-disable-next-line consistent-return\n\n\n      return false;\n    }\n  }); // eslint-disable-next-line consistent-return\n\n  return parsedURLs;\n}\n\nconst plugin = (options = {}) => {\n  return {\n    postcssPlugin: \"postcss-url-parser\",\n\n    prepare(result) {\n      const parsedDeclarations = [];\n      return {\n        Declaration(declaration) {\n          const {\n            isSupportDataURL,\n            isSupportAbsoluteURL\n          } = options;\n          const parsedURL = parseDeclaration(declaration, \"value\", result, {\n            isSupportDataURL,\n            isSupportAbsoluteURL\n          });\n\n          if (!parsedURL) {\n            return;\n          }\n\n          parsedDeclarations.push(...parsedURL);\n        },\n\n        async OnceExit() {\n          if (parsedDeclarations.length === 0) {\n            return;\n          }\n\n          const resolvedDeclarations = await Promise.all(parsedDeclarations.map(async parsedDeclaration => {\n            const {\n              url,\n              needResolve\n            } = parsedDeclaration;\n\n            if (options.filter) {\n              const needKeep = await options.filter(url);\n\n              if (!needKeep) {\n                // eslint-disable-next-line consistent-return\n                return;\n              }\n            }\n\n            if (!needResolve) {\n              // eslint-disable-next-line consistent-return\n              return parsedDeclaration;\n            }\n\n            const splittedUrl = url.split(/(\\?)?#/);\n            const [pathname, query, hashOrQuery] = splittedUrl;\n            let hash = query ? \"?\" : \"\";\n            hash += hashOrQuery ? `#${hashOrQuery}` : \"\";\n            const {\n              resolver,\n              rootContext\n            } = options;\n            const request = (0, _utils.requestify)(pathname, rootContext, Boolean(resolver));\n\n            if (!resolver) {\n              // eslint-disable-next-line consistent-return\n              return { ...parsedDeclaration,\n                url: request,\n                hash\n              };\n            }\n\n            const resolvedURL = await (0, _utils.resolveRequests)(resolver, options.context, [...new Set([request, url])]);\n\n            if (!resolvedURL) {\n              // eslint-disable-next-line consistent-return\n              return;\n            } // eslint-disable-next-line consistent-return\n\n\n            return { ...parsedDeclaration,\n              url: resolvedURL,\n              hash\n            };\n          }));\n          const urlToNameMap = new Map();\n          const urlToReplacementMap = new Map();\n          let hasUrlImportHelper = false;\n\n          for (let index = 0; index <= resolvedDeclarations.length - 1; index++) {\n            const item = resolvedDeclarations[index];\n\n            if (!item) {\n              // eslint-disable-next-line no-continue\n              continue;\n            }\n\n            if (!hasUrlImportHelper) {\n              options.imports.push({\n                type: \"get_url_import\",\n                importName: \"___CSS_LOADER_GET_URL_IMPORT___\",\n                url: options.urlHandler(require.resolve(\"../runtime/getUrl.js\")),\n                index: -1\n              });\n              hasUrlImportHelper = true;\n            }\n\n            const {\n              url,\n              prefix\n            } = item;\n            const newUrl = prefix ? `${prefix}!${url}` : url;\n            let importName = urlToNameMap.get(newUrl);\n\n            if (!importName) {\n              importName = `___CSS_LOADER_URL_IMPORT_${urlToNameMap.size}___`;\n              urlToNameMap.set(newUrl, importName);\n              options.imports.push({\n                type: \"url\",\n                importName,\n                url: options.resolver ? options.urlHandler(newUrl) : JSON.stringify(newUrl),\n                index\n              });\n            }\n\n            const {\n              hash,\n              needQuotes\n            } = item;\n            const replacementKey = JSON.stringify({\n              newUrl,\n              hash,\n              needQuotes\n            });\n            let replacementName = urlToReplacementMap.get(replacementKey);\n\n            if (!replacementName) {\n              replacementName = `___CSS_LOADER_URL_REPLACEMENT_${urlToReplacementMap.size}___`;\n              urlToReplacementMap.set(replacementKey, replacementName);\n              options.replacements.push({\n                replacementName,\n                importName,\n                hash,\n                needQuotes\n              });\n            } // eslint-disable-next-line no-param-reassign\n\n\n            item.node.type = \"word\"; // eslint-disable-next-line no-param-reassign\n\n            item.node.value = replacementName; // eslint-disable-next-line no-param-reassign\n\n            item.declaration.value = item.parsed.toString();\n          }\n        }\n\n      };\n    }\n\n  };\n};\n\nplugin.postcss = true;\nvar _default = plugin;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}