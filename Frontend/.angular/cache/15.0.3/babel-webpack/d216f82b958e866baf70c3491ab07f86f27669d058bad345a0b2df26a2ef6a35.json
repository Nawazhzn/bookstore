{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runModuleAsObservableFork = void 0;\nconst child_process_1 = require(\"child_process\");\nconst path_1 = require(\"path\");\nconst rxjs_1 = require(\"rxjs\");\nconst treeKill = require('tree-kill');\nfunction runModuleAsObservableFork(cwd, modulePath, exportName,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nargs) {\n  return new rxjs_1.Observable(obs => {\n    const workerPath = (0, path_1.resolve)(__dirname, './run-module-worker.js');\n    const debugArgRegex = /--inspect(?:-brk|-port)?|--debug(?:-brk|-port)/;\n    const execArgv = process.execArgv.filter(arg => {\n      // Remove debug args.\n      // Workaround for https://github.com/nodejs/node/issues/9435\n      return !debugArgRegex.test(arg);\n    });\n    const forkOptions = {\n      cwd,\n      execArgv\n    };\n    // TODO: support passing in a logger to use as stdio streams\n    // if (logger) {\n    //   (forkOptions as any).stdio = [\n    //     'ignore',\n    //     logger.info, // make it a stream\n    //     logger.error, // make it a stream\n    //   ];\n    // }\n    const forkedProcess = (0, child_process_1.fork)(workerPath, undefined, forkOptions);\n    // Cleanup.\n    const killForkedProcess = () => {\n      if (forkedProcess && forkedProcess.pid) {\n        treeKill(forkedProcess.pid, 'SIGTERM');\n      }\n    };\n    // Handle child process exit.\n    const handleChildProcessExit = code => {\n      killForkedProcess();\n      if (code && code !== 0) {\n        obs.error();\n      }\n      obs.next({\n        success: true\n      });\n      obs.complete();\n    };\n    forkedProcess.once('exit', handleChildProcessExit);\n    forkedProcess.once('SIGINT', handleChildProcessExit);\n    forkedProcess.once('uncaughtException', handleChildProcessExit);\n    // Handle parent process exit.\n    const handleParentProcessExit = () => {\n      killForkedProcess();\n    };\n    process.once('exit', handleParentProcessExit);\n    process.once('SIGINT', handleParentProcessExit);\n    process.once('uncaughtException', handleParentProcessExit);\n    // Run module.\n    forkedProcess.send({\n      hash: '5d4b9a5c0a4e0f9977598437b0e85bcc',\n      modulePath,\n      exportName,\n      args\n    });\n    // Teardown logic. When unsubscribing, kill the forked process.\n    return killForkedProcess;\n  });\n}\nexports.runModuleAsObservableFork = runModuleAsObservableFork;","map":{"version":3,"names":["Object","defineProperty","exports","value","runModuleAsObservableFork","child_process_1","require","path_1","rxjs_1","treeKill","cwd","modulePath","exportName","args","Observable","obs","workerPath","resolve","__dirname","debugArgRegex","execArgv","process","filter","arg","test","forkOptions","forkedProcess","fork","undefined","killForkedProcess","pid","handleChildProcessExit","code","error","next","success","complete","once","handleParentProcessExit","send","hash"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@angular-devkit/build-angular/src/utils/run-module-as-observable-fork.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.runModuleAsObservableFork = void 0;\nconst child_process_1 = require(\"child_process\");\nconst path_1 = require(\"path\");\nconst rxjs_1 = require(\"rxjs\");\nconst treeKill = require('tree-kill');\nfunction runModuleAsObservableFork(cwd, modulePath, exportName, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nargs) {\n    return new rxjs_1.Observable((obs) => {\n        const workerPath = (0, path_1.resolve)(__dirname, './run-module-worker.js');\n        const debugArgRegex = /--inspect(?:-brk|-port)?|--debug(?:-brk|-port)/;\n        const execArgv = process.execArgv.filter((arg) => {\n            // Remove debug args.\n            // Workaround for https://github.com/nodejs/node/issues/9435\n            return !debugArgRegex.test(arg);\n        });\n        const forkOptions = {\n            cwd,\n            execArgv,\n        };\n        // TODO: support passing in a logger to use as stdio streams\n        // if (logger) {\n        //   (forkOptions as any).stdio = [\n        //     'ignore',\n        //     logger.info, // make it a stream\n        //     logger.error, // make it a stream\n        //   ];\n        // }\n        const forkedProcess = (0, child_process_1.fork)(workerPath, undefined, forkOptions);\n        // Cleanup.\n        const killForkedProcess = () => {\n            if (forkedProcess && forkedProcess.pid) {\n                treeKill(forkedProcess.pid, 'SIGTERM');\n            }\n        };\n        // Handle child process exit.\n        const handleChildProcessExit = (code) => {\n            killForkedProcess();\n            if (code && code !== 0) {\n                obs.error();\n            }\n            obs.next({ success: true });\n            obs.complete();\n        };\n        forkedProcess.once('exit', handleChildProcessExit);\n        forkedProcess.once('SIGINT', handleChildProcessExit);\n        forkedProcess.once('uncaughtException', handleChildProcessExit);\n        // Handle parent process exit.\n        const handleParentProcessExit = () => {\n            killForkedProcess();\n        };\n        process.once('exit', handleParentProcessExit);\n        process.once('SIGINT', handleParentProcessExit);\n        process.once('uncaughtException', handleParentProcessExit);\n        // Run module.\n        forkedProcess.send({\n            hash: '5d4b9a5c0a4e0f9977598437b0e85bcc',\n            modulePath,\n            exportName,\n            args,\n        });\n        // Teardown logic. When unsubscribing, kill the forked process.\n        return killForkedProcess;\n    });\n}\nexports.runModuleAsObservableFork = runModuleAsObservableFork;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,yBAAyB,GAAG,KAAK,CAAC;AAC1C,MAAMC,eAAe,GAAGC,OAAO,CAAC,eAAe,CAAC;AAChD,MAAMC,MAAM,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAME,MAAM,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAW,CAAC;AACrC,SAASF,yBAAyB,CAACM,GAAG,EAAEC,UAAU,EAAEC,UAAU;AAC9D;AACAC,IAAI,EAAE;EACF,OAAO,IAAIL,MAAM,CAACM,UAAU,CAAEC,GAAG,IAAK;IAClC,MAAMC,UAAU,GAAG,CAAC,CAAC,EAAET,MAAM,CAACU,OAAO,EAAEC,SAAS,EAAE,wBAAwB,CAAC;IAC3E,MAAMC,aAAa,GAAG,gDAAgD;IACtE,MAAMC,QAAQ,GAAGC,OAAO,CAACD,QAAQ,CAACE,MAAM,CAAEC,GAAG,IAAK;MAC9C;MACA;MACA,OAAO,CAACJ,aAAa,CAACK,IAAI,CAACD,GAAG,CAAC;IACnC,CAAC,CAAC;IACF,MAAME,WAAW,GAAG;MAChBf,GAAG;MACHU;IACJ,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMM,aAAa,GAAG,CAAC,CAAC,EAAErB,eAAe,CAACsB,IAAI,EAAEX,UAAU,EAAEY,SAAS,EAAEH,WAAW,CAAC;IACnF;IACA,MAAMI,iBAAiB,GAAG,MAAM;MAC5B,IAAIH,aAAa,IAAIA,aAAa,CAACI,GAAG,EAAE;QACpCrB,QAAQ,CAACiB,aAAa,CAACI,GAAG,EAAE,SAAS,CAAC;MAC1C;IACJ,CAAC;IACD;IACA,MAAMC,sBAAsB,GAAIC,IAAI,IAAK;MACrCH,iBAAiB,EAAE;MACnB,IAAIG,IAAI,IAAIA,IAAI,KAAK,CAAC,EAAE;QACpBjB,GAAG,CAACkB,KAAK,EAAE;MACf;MACAlB,GAAG,CAACmB,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;MAC3BpB,GAAG,CAACqB,QAAQ,EAAE;IAClB,CAAC;IACDV,aAAa,CAACW,IAAI,CAAC,MAAM,EAAEN,sBAAsB,CAAC;IAClDL,aAAa,CAACW,IAAI,CAAC,QAAQ,EAAEN,sBAAsB,CAAC;IACpDL,aAAa,CAACW,IAAI,CAAC,mBAAmB,EAAEN,sBAAsB,CAAC;IAC/D;IACA,MAAMO,uBAAuB,GAAG,MAAM;MAClCT,iBAAiB,EAAE;IACvB,CAAC;IACDR,OAAO,CAACgB,IAAI,CAAC,MAAM,EAAEC,uBAAuB,CAAC;IAC7CjB,OAAO,CAACgB,IAAI,CAAC,QAAQ,EAAEC,uBAAuB,CAAC;IAC/CjB,OAAO,CAACgB,IAAI,CAAC,mBAAmB,EAAEC,uBAAuB,CAAC;IAC1D;IACAZ,aAAa,CAACa,IAAI,CAAC;MACfC,IAAI,EAAE,kCAAkC;MACxC7B,UAAU;MACVC,UAAU;MACVC;IACJ,CAAC,CAAC;IACF;IACA,OAAOgB,iBAAiB;EAC5B,CAAC,CAAC;AACN;AACA3B,OAAO,CAACE,yBAAyB,GAAGA,yBAAyB"},"metadata":{},"sourceType":"script","externalDependencies":[]}