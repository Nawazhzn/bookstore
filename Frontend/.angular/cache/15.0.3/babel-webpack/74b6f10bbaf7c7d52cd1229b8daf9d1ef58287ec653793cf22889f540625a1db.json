{"ast":null,"code":"'use strict';\n\nvar childProcess = require('child_process');\nvar spawn = childProcess.spawn;\nvar exec = childProcess.exec;\nmodule.exports = function (pid, signal, callback) {\n  if (typeof signal === 'function' && callback === undefined) {\n    callback = signal;\n    signal = undefined;\n  }\n  pid = parseInt(pid);\n  if (Number.isNaN(pid)) {\n    if (callback) {\n      return callback(new Error(\"pid must be a number\"));\n    } else {\n      throw new Error(\"pid must be a number\");\n    }\n  }\n  var tree = {};\n  var pidsToProcess = {};\n  tree[pid] = [];\n  pidsToProcess[pid] = 1;\n  switch (process.platform) {\n    case 'win32':\n      exec('taskkill /pid ' + pid + ' /T /F', callback);\n      break;\n    case 'darwin':\n      buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n        return spawn('pgrep', ['-P', parentPid]);\n      }, function () {\n        killAll(tree, signal, callback);\n      });\n      break;\n    // case 'sunos':\n    //     buildProcessTreeSunOS(pid, tree, pidsToProcess, function () {\n    //         killAll(tree, signal, callback);\n    //     });\n    //     break;\n    default:\n      // Linux\n      buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n        return spawn('ps', ['-o', 'pid', '--no-headers', '--ppid', parentPid]);\n      }, function () {\n        killAll(tree, signal, callback);\n      });\n      break;\n  }\n};\nfunction killAll(tree, signal, callback) {\n  var killed = {};\n  try {\n    Object.keys(tree).forEach(function (pid) {\n      tree[pid].forEach(function (pidpid) {\n        if (!killed[pidpid]) {\n          killPid(pidpid, signal);\n          killed[pidpid] = 1;\n        }\n      });\n      if (!killed[pid]) {\n        killPid(pid, signal);\n        killed[pid] = 1;\n      }\n    });\n  } catch (err) {\n    if (callback) {\n      return callback(err);\n    } else {\n      throw err;\n    }\n  }\n  if (callback) {\n    return callback();\n  }\n}\nfunction killPid(pid, signal) {\n  try {\n    process.kill(parseInt(pid, 10), signal);\n  } catch (err) {\n    if (err.code !== 'ESRCH') throw err;\n  }\n}\nfunction buildProcessTree(parentPid, tree, pidsToProcess, spawnChildProcessesList, cb) {\n  var ps = spawnChildProcessesList(parentPid);\n  var allData = '';\n  ps.stdout.on('data', function (data) {\n    var data = data.toString('ascii');\n    allData += data;\n  });\n  var onClose = function (code) {\n    delete pidsToProcess[parentPid];\n    if (code != 0) {\n      // no more parent processes\n      if (Object.keys(pidsToProcess).length == 0) {\n        cb();\n      }\n      return;\n    }\n    allData.match(/\\d+/g).forEach(function (pid) {\n      pid = parseInt(pid, 10);\n      tree[parentPid].push(pid);\n      tree[pid] = [];\n      pidsToProcess[pid] = 1;\n      buildProcessTree(pid, tree, pidsToProcess, spawnChildProcessesList, cb);\n    });\n  };\n  ps.on('close', onClose);\n}","map":{"version":3,"names":["childProcess","require","spawn","exec","module","exports","pid","signal","callback","undefined","parseInt","Number","isNaN","Error","tree","pidsToProcess","process","platform","buildProcessTree","parentPid","killAll","killed","Object","keys","forEach","pidpid","killPid","err","kill","code","spawnChildProcessesList","cb","ps","allData","stdout","on","data","toString","onClose","length","match","push"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/tree-kill/index.js"],"sourcesContent":["'use strict';\n\nvar childProcess = require('child_process');\nvar spawn = childProcess.spawn;\nvar exec = childProcess.exec;\n\nmodule.exports = function (pid, signal, callback) {\n    if (typeof signal === 'function' && callback === undefined) {\n        callback = signal;\n        signal = undefined;\n    }\n\n    pid = parseInt(pid);\n    if (Number.isNaN(pid)) {\n        if (callback) {\n            return callback(new Error(\"pid must be a number\"));\n        } else {\n            throw new Error(\"pid must be a number\");\n        }\n    }\n\n    var tree = {};\n    var pidsToProcess = {};\n    tree[pid] = [];\n    pidsToProcess[pid] = 1;\n\n    switch (process.platform) {\n    case 'win32':\n        exec('taskkill /pid ' + pid + ' /T /F', callback);\n        break;\n    case 'darwin':\n        buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n          return spawn('pgrep', ['-P', parentPid]);\n        }, function () {\n            killAll(tree, signal, callback);\n        });\n        break;\n    // case 'sunos':\n    //     buildProcessTreeSunOS(pid, tree, pidsToProcess, function () {\n    //         killAll(tree, signal, callback);\n    //     });\n    //     break;\n    default: // Linux\n        buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n          return spawn('ps', ['-o', 'pid', '--no-headers', '--ppid', parentPid]);\n        }, function () {\n            killAll(tree, signal, callback);\n        });\n        break;\n    }\n};\n\nfunction killAll (tree, signal, callback) {\n    var killed = {};\n    try {\n        Object.keys(tree).forEach(function (pid) {\n            tree[pid].forEach(function (pidpid) {\n                if (!killed[pidpid]) {\n                    killPid(pidpid, signal);\n                    killed[pidpid] = 1;\n                }\n            });\n            if (!killed[pid]) {\n                killPid(pid, signal);\n                killed[pid] = 1;\n            }\n        });\n    } catch (err) {\n        if (callback) {\n            return callback(err);\n        } else {\n            throw err;\n        }\n    }\n    if (callback) {\n        return callback();\n    }\n}\n\nfunction killPid(pid, signal) {\n    try {\n        process.kill(parseInt(pid, 10), signal);\n    }\n    catch (err) {\n        if (err.code !== 'ESRCH') throw err;\n    }\n}\n\nfunction buildProcessTree (parentPid, tree, pidsToProcess, spawnChildProcessesList, cb) {\n    var ps = spawnChildProcessesList(parentPid);\n    var allData = '';\n    ps.stdout.on('data', function (data) {\n        var data = data.toString('ascii');\n        allData += data;\n    });\n\n    var onClose = function (code) {\n        delete pidsToProcess[parentPid];\n\n        if (code != 0) {\n            // no more parent processes\n            if (Object.keys(pidsToProcess).length == 0) {\n                cb();\n            }\n            return;\n        }\n\n        allData.match(/\\d+/g).forEach(function (pid) {\n          pid = parseInt(pid, 10);\n          tree[parentPid].push(pid);\n          tree[pid] = [];\n          pidsToProcess[pid] = 1;\n          buildProcessTree(pid, tree, pidsToProcess, spawnChildProcessesList, cb);\n        });\n    };\n\n    ps.on('close', onClose);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}