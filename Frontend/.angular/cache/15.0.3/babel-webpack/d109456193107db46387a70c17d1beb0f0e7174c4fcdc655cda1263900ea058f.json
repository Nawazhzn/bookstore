{"ast":null,"code":"\"use strict\";\n\n/** @typedef {import(\"webpack\").Compilation[\"inputFileSystem\"] } InputFileSystem */\n\n/** @typedef {import(\"fs\").Stats } Stats */\n\n/**\n * @param {InputFileSystem} inputFileSystem\n * @param {string} path\n * @return {Promise<undefined | Stats>}\n */\nfunction stat(inputFileSystem, path) {\n  return new Promise((resolve, reject) => {\n    inputFileSystem.stat(path,\n    /**\n     * @param {null | undefined | NodeJS.ErrnoException} err\n     * @param {undefined | Stats} stats\n     */\n    // @ts-ignore\n    (err, stats) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(stats);\n    });\n  });\n}\n/**\n * @param {InputFileSystem} inputFileSystem\n * @param {string} path\n * @return {Promise<string | Buffer>}\n */\n\nfunction readFile(inputFileSystem, path) {\n  return new Promise((resolve, reject) => {\n    inputFileSystem.readFile(path,\n    /**\n     * @param {null | undefined | NodeJS.ErrnoException} err\n     * @param {undefined | string | Buffer} data\n     */\n    (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve( /** @type {string | Buffer} */\n      data);\n    });\n  });\n}\nconst notSettled = Symbol(`not-settled`);\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\n\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n      if (done) {\n        const isLast = !result.includes(notSettled);\n        if (isLast) {\n          resolve( /** @type{T[]} **/\n          result);\n        }\n        return;\n      }\n      const [index, task] = value;\n      /**\n       * @param {T} x\n       */\n\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n      task().then(onFulfilled, reject);\n    };\n    Array(limit).fill(0).forEach(next);\n  });\n}\nmodule.exports = {\n  stat,\n  readFile,\n  throttleAll\n};","map":{"version":3,"names":["stat","inputFileSystem","path","Promise","resolve","reject","err","stats","readFile","data","notSettled","Symbol","throttleAll","limit","tasks","Number","isInteger","TypeError","Array","isArray","every","task","result","length","fill","entries","next","done","value","isLast","includes","index","onFulfilled","x","then","forEach","module","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/copy-webpack-plugin/dist/utils.js"],"sourcesContent":["\"use strict\";\n\n/** @typedef {import(\"webpack\").Compilation[\"inputFileSystem\"] } InputFileSystem */\n\n/** @typedef {import(\"fs\").Stats } Stats */\n\n/**\n * @param {InputFileSystem} inputFileSystem\n * @param {string} path\n * @return {Promise<undefined | Stats>}\n */\nfunction stat(inputFileSystem, path) {\n  return new Promise((resolve, reject) => {\n    inputFileSystem.stat(path,\n    /**\n     * @param {null | undefined | NodeJS.ErrnoException} err\n     * @param {undefined | Stats} stats\n     */\n    // @ts-ignore\n    (err, stats) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(stats);\n    });\n  });\n}\n/**\n * @param {InputFileSystem} inputFileSystem\n * @param {string} path\n * @return {Promise<string | Buffer>}\n */\n\n\nfunction readFile(inputFileSystem, path) {\n  return new Promise((resolve, reject) => {\n    inputFileSystem.readFile(path,\n    /**\n     * @param {null | undefined | NodeJS.ErrnoException} err\n     * @param {undefined | string | Buffer} data\n     */\n    (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(\n      /** @type {string | Buffer} */\n      data);\n    });\n  });\n}\n\nconst notSettled = Symbol(`not-settled`);\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\n\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n\n      if (done) {\n        const isLast = !result.includes(notSettled);\n\n        if (isLast) {\n          resolve(\n          /** @type{T[]} **/\n          result);\n        }\n\n        return;\n      }\n\n      const [index, task] = value;\n      /**\n       * @param {T} x\n       */\n\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n\n      task().then(onFulfilled, reject);\n    };\n\n    Array(limit).fill(0).forEach(next);\n  });\n}\n\nmodule.exports = {\n  stat,\n  readFile,\n  throttleAll\n};"],"mappings":"AAAA,YAAY;;AAEZ;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAI,CAACC,eAAe,EAAEC,IAAI,EAAE;EACnC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCJ,eAAe,CAACD,IAAI,CAACE,IAAI;IACzB;AACJ;AACA;AACA;IACI;IACA,CAACI,GAAG,EAAEC,KAAK,KAAK;MACd,IAAID,GAAG,EAAE;QACPD,MAAM,CAACC,GAAG,CAAC;QACX;MACF;MAEAF,OAAO,CAACG,KAAK,CAAC;IAChB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,QAAQ,CAACP,eAAe,EAAEC,IAAI,EAAE;EACvC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCJ,eAAe,CAACO,QAAQ,CAACN,IAAI;IAC7B;AACJ;AACA;AACA;IACI,CAACI,GAAG,EAAEG,IAAI,KAAK;MACb,IAAIH,GAAG,EAAE;QACPD,MAAM,CAACC,GAAG,CAAC;QACX;MACF;MAEAF,OAAO,EACP;MACAK,IAAI,CAAC;IACP,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,MAAMC,UAAU,GAAGC,MAAM,CAAE,aAAY,CAAC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,WAAW,CAACC,KAAK,EAAEC,KAAK,EAAE;EACjC,IAAI,CAACC,MAAM,CAACC,SAAS,CAACH,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,EAAE;IACzC,MAAM,IAAII,SAAS,CAAE,uDAAsDJ,KAAM,OAAM,OAAOA,KAAM,GAAE,CAAC;EACzG;EAEA,IAAI,CAACK,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,IAAI,CAACA,KAAK,CAACM,KAAK,CAACC,IAAI,IAAI,OAAOA,IAAI,KAAM,UAAS,CAAC,EAAE;IAC7E,MAAM,IAAIJ,SAAS,CAAE,kEAAiE,CAAC;EACzF;EAEA,OAAO,IAAId,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMiB,MAAM,GAAGJ,KAAK,CAACJ,KAAK,CAACS,MAAM,CAAC,CAACC,IAAI,CAACd,UAAU,CAAC;IACnD,MAAMe,OAAO,GAAGX,KAAK,CAACW,OAAO,EAAE;IAE/B,MAAMC,IAAI,GAAG,MAAM;MACjB,MAAM;QACJC,IAAI;QACJC;MACF,CAAC,GAAGH,OAAO,CAACC,IAAI,EAAE;MAElB,IAAIC,IAAI,EAAE;QACR,MAAME,MAAM,GAAG,CAACP,MAAM,CAACQ,QAAQ,CAACpB,UAAU,CAAC;QAE3C,IAAImB,MAAM,EAAE;UACVzB,OAAO,EACP;UACAkB,MAAM,CAAC;QACT;QAEA;MACF;MAEA,MAAM,CAACS,KAAK,EAAEV,IAAI,CAAC,GAAGO,KAAK;MAC3B;AACN;AACA;;MAEM,MAAMI,WAAW,GAAGC,CAAC,IAAI;QACvBX,MAAM,CAACS,KAAK,CAAC,GAAGE,CAAC;QACjBP,IAAI,EAAE;MACR,CAAC;MAEDL,IAAI,EAAE,CAACa,IAAI,CAACF,WAAW,EAAE3B,MAAM,CAAC;IAClC,CAAC;IAEDa,KAAK,CAACL,KAAK,CAAC,CAACW,IAAI,CAAC,CAAC,CAAC,CAACW,OAAO,CAACT,IAAI,CAAC;EACpC,CAAC,CAAC;AACJ;AAEAU,MAAM,CAACC,OAAO,GAAG;EACfrC,IAAI;EACJQ,QAAQ;EACRI;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}