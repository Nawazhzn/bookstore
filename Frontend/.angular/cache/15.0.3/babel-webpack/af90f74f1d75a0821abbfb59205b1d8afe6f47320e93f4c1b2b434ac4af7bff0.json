{"ast":null,"code":"const http = require('http');\nconst cfg = require('./config');\nconst logger = require('./logger');\nconst helper = require('./helper');\nconst {\n  lookup\n} = require('./utils/dns-utils');\nexports.stop = function (cliOptionsOrConfig, done) {\n  cliOptionsOrConfig = cliOptionsOrConfig || {};\n  const log = logger.create('stopper');\n  done = helper.isFunction(done) ? done : process.exit;\n  let config;\n  if (cliOptionsOrConfig instanceof cfg.Config) {\n    config = cliOptionsOrConfig;\n  } else {\n    logger.setupFromConfig({\n      colors: cliOptionsOrConfig.colors,\n      logLevel: cliOptionsOrConfig.logLevel\n    });\n    const deprecatedCliOptionsMessage = 'Passing raw CLI options to `stopper(config, done)` is deprecated. Use ' + '`parseConfig(configFilePath, cliOptions, {promiseConfig: true, throwErrors: true})` ' + 'to prepare a processed `Config` instance and pass that as the ' + '`config` argument instead.';\n    log.warn(deprecatedCliOptionsMessage);\n    try {\n      config = cfg.parseConfig(cliOptionsOrConfig.configFile, cliOptionsOrConfig, {\n        promiseConfig: false,\n        throwErrors: true\n      });\n    } catch (parseConfigError) {\n      // TODO: change how `done` falls back to exit in next major version\n      //  SEE: https://github.com/karma-runner/karma/pull/3635#discussion_r565399378\n      done(1);\n    }\n  }\n  const request = http.request({\n    hostname: config.hostname,\n    path: config.urlRoot + 'stop',\n    port: config.port,\n    method: 'GET',\n    lookup\n  });\n  request.on('response', function (response) {\n    if (response.statusCode === 200) {\n      log.info('Server stopped.');\n      done(0);\n    } else {\n      log.error(`Server returned status code: ${response.statusCode}`);\n      done(1);\n    }\n  });\n  request.on('error', function (e) {\n    if (e.code === 'ECONNREFUSED') {\n      log.error(`There is no server listening on port ${config.port}`);\n      done(1, e.code);\n    } else {\n      throw e;\n    }\n  });\n  request.end();\n};","map":{"version":3,"names":["http","require","cfg","logger","helper","lookup","exports","stop","cliOptionsOrConfig","done","log","create","isFunction","process","exit","config","Config","setupFromConfig","colors","logLevel","deprecatedCliOptionsMessage","warn","parseConfig","configFile","promiseConfig","throwErrors","parseConfigError","request","hostname","path","urlRoot","port","method","on","response","statusCode","info","error","e","code","end"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/karma/lib/stopper.js"],"sourcesContent":["const http = require('http')\nconst cfg = require('./config')\nconst logger = require('./logger')\nconst helper = require('./helper')\nconst { lookup } = require('./utils/dns-utils')\n\nexports.stop = function (cliOptionsOrConfig, done) {\n  cliOptionsOrConfig = cliOptionsOrConfig || {}\n  const log = logger.create('stopper')\n  done = helper.isFunction(done) ? done : process.exit\n\n  let config\n  if (cliOptionsOrConfig instanceof cfg.Config) {\n    config = cliOptionsOrConfig\n  } else {\n    logger.setupFromConfig({\n      colors: cliOptionsOrConfig.colors,\n      logLevel: cliOptionsOrConfig.logLevel\n    })\n    const deprecatedCliOptionsMessage =\n      'Passing raw CLI options to `stopper(config, done)` is deprecated. Use ' +\n      '`parseConfig(configFilePath, cliOptions, {promiseConfig: true, throwErrors: true})` ' +\n      'to prepare a processed `Config` instance and pass that as the ' +\n      '`config` argument instead.'\n    log.warn(deprecatedCliOptionsMessage)\n    try {\n      config = cfg.parseConfig(\n        cliOptionsOrConfig.configFile,\n        cliOptionsOrConfig,\n        {\n          promiseConfig: false,\n          throwErrors: true\n        }\n      )\n    } catch (parseConfigError) {\n      // TODO: change how `done` falls back to exit in next major version\n      //  SEE: https://github.com/karma-runner/karma/pull/3635#discussion_r565399378\n      done(1)\n    }\n  }\n\n  const request = http.request({\n    hostname: config.hostname,\n    path: config.urlRoot + 'stop',\n    port: config.port,\n    method: 'GET',\n    lookup\n  })\n\n  request.on('response', function (response) {\n    if (response.statusCode === 200) {\n      log.info('Server stopped.')\n      done(0)\n    } else {\n      log.error(`Server returned status code: ${response.statusCode}`)\n      done(1)\n    }\n  })\n\n  request.on('error', function (e) {\n    if (e.code === 'ECONNREFUSED') {\n      log.error(`There is no server listening on port ${config.port}`)\n      done(1, e.code)\n    } else {\n      throw e\n    }\n  })\n  request.end()\n}\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,GAAG,GAAGD,OAAO,CAAC,UAAU,CAAC;AAC/B,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAU,CAAC;AAClC,MAAM;EAAEI;AAAO,CAAC,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;AAE/CK,OAAO,CAACC,IAAI,GAAG,UAAUC,kBAAkB,EAAEC,IAAI,EAAE;EACjDD,kBAAkB,GAAGA,kBAAkB,IAAI,CAAC,CAAC;EAC7C,MAAME,GAAG,GAAGP,MAAM,CAACQ,MAAM,CAAC,SAAS,CAAC;EACpCF,IAAI,GAAGL,MAAM,CAACQ,UAAU,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAGI,OAAO,CAACC,IAAI;EAEpD,IAAIC,MAAM;EACV,IAAIP,kBAAkB,YAAYN,GAAG,CAACc,MAAM,EAAE;IAC5CD,MAAM,GAAGP,kBAAkB;EAC7B,CAAC,MAAM;IACLL,MAAM,CAACc,eAAe,CAAC;MACrBC,MAAM,EAAEV,kBAAkB,CAACU,MAAM;MACjCC,QAAQ,EAAEX,kBAAkB,CAACW;IAC/B,CAAC,CAAC;IACF,MAAMC,2BAA2B,GAC/B,wEAAwE,GACxE,sFAAsF,GACtF,gEAAgE,GAChE,4BAA4B;IAC9BV,GAAG,CAACW,IAAI,CAACD,2BAA2B,CAAC;IACrC,IAAI;MACFL,MAAM,GAAGb,GAAG,CAACoB,WAAW,CACtBd,kBAAkB,CAACe,UAAU,EAC7Bf,kBAAkB,EAClB;QACEgB,aAAa,EAAE,KAAK;QACpBC,WAAW,EAAE;MACf,CAAC,CACF;IACH,CAAC,CAAC,OAAOC,gBAAgB,EAAE;MACzB;MACA;MACAjB,IAAI,CAAC,CAAC,CAAC;IACT;EACF;EAEA,MAAMkB,OAAO,GAAG3B,IAAI,CAAC2B,OAAO,CAAC;IAC3BC,QAAQ,EAAEb,MAAM,CAACa,QAAQ;IACzBC,IAAI,EAAEd,MAAM,CAACe,OAAO,GAAG,MAAM;IAC7BC,IAAI,EAAEhB,MAAM,CAACgB,IAAI;IACjBC,MAAM,EAAE,KAAK;IACb3B;EACF,CAAC,CAAC;EAEFsB,OAAO,CAACM,EAAE,CAAC,UAAU,EAAE,UAAUC,QAAQ,EAAE;IACzC,IAAIA,QAAQ,CAACC,UAAU,KAAK,GAAG,EAAE;MAC/BzB,GAAG,CAAC0B,IAAI,CAAC,iBAAiB,CAAC;MAC3B3B,IAAI,CAAC,CAAC,CAAC;IACT,CAAC,MAAM;MACLC,GAAG,CAAC2B,KAAK,CAAE,gCAA+BH,QAAQ,CAACC,UAAW,EAAC,CAAC;MAChE1B,IAAI,CAAC,CAAC,CAAC;IACT;EACF,CAAC,CAAC;EAEFkB,OAAO,CAACM,EAAE,CAAC,OAAO,EAAE,UAAUK,CAAC,EAAE;IAC/B,IAAIA,CAAC,CAACC,IAAI,KAAK,cAAc,EAAE;MAC7B7B,GAAG,CAAC2B,KAAK,CAAE,wCAAuCtB,MAAM,CAACgB,IAAK,EAAC,CAAC;MAChEtB,IAAI,CAAC,CAAC,EAAE6B,CAAC,CAACC,IAAI,CAAC;IACjB,CAAC,MAAM;MACL,MAAMD,CAAC;IACT;EACF,CAAC,CAAC;EACFX,OAAO,CAACa,GAAG,EAAE;AACf,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}