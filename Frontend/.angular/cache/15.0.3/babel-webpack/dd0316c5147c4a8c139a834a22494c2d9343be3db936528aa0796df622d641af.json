{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport process from 'node:process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport fastGlob from 'fast-glob';\nimport gitIgnore from 'ignore';\nimport slash from 'slash';\nimport { toPath, isNegativePattern } from './utilities.js';\nconst ignoreFilesGlobOptions = {\n  ignore: ['**/node_modules', '**/flow-typed', '**/coverage', '**/.git'],\n  absolute: true,\n  dot: true\n};\nexport const GITIGNORE_FILES_PATTERN = '**/.gitignore';\nconst applyBaseToPattern = (pattern, base) => isNegativePattern(pattern) ? '!' + path.posix.join(base, pattern.slice(1)) : path.posix.join(base, pattern);\nconst parseIgnoreFile = (file, cwd) => {\n  const base = slash(path.relative(cwd, path.dirname(file.filePath)));\n  return file.content.split(/\\r?\\n/).filter(line => line && !line.startsWith('#')).map(pattern => applyBaseToPattern(pattern, base));\n};\nconst toRelativePath = (fileOrDirectory, cwd) => {\n  cwd = slash(cwd);\n  if (path.isAbsolute(fileOrDirectory)) {\n    if (slash(fileOrDirectory).startsWith(cwd)) {\n      return path.relative(cwd, fileOrDirectory);\n    }\n    throw new Error(`Path ${fileOrDirectory} is not in cwd ${cwd}`);\n  }\n  return fileOrDirectory;\n};\nconst getIsIgnoredPredicate = (files, cwd) => {\n  const patterns = files.flatMap(file => parseIgnoreFile(file, cwd));\n  const ignores = gitIgnore().add(patterns);\n  return fileOrDirectory => {\n    fileOrDirectory = toPath(fileOrDirectory);\n    fileOrDirectory = toRelativePath(fileOrDirectory, cwd);\n    return fileOrDirectory ? ignores.ignores(slash(fileOrDirectory)) : false;\n  };\n};\nconst normalizeOptions = (options = {}) => ({\n  cwd: toPath(options.cwd) || process.cwd()\n});\nexport const isIgnoredByIgnoreFiles = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (patterns, options) {\n    const {\n      cwd\n    } = normalizeOptions(options);\n    const paths = yield fastGlob(patterns, {\n      cwd,\n      ...ignoreFilesGlobOptions\n    });\n    const files = yield Promise.all(paths.map( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (filePath) {\n        return {\n          filePath,\n          content: yield fs.promises.readFile(filePath, 'utf8')\n        };\n      });\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()));\n    return getIsIgnoredPredicate(files, cwd);\n  });\n  return function isIgnoredByIgnoreFiles(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport const isIgnoredByIgnoreFilesSync = (patterns, options) => {\n  const {\n    cwd\n  } = normalizeOptions(options);\n  const paths = fastGlob.sync(patterns, {\n    cwd,\n    ...ignoreFilesGlobOptions\n  });\n  const files = paths.map(filePath => ({\n    filePath,\n    content: fs.readFileSync(filePath, 'utf8')\n  }));\n  return getIsIgnoredPredicate(files, cwd);\n};\nexport const isGitIgnored = options => isIgnoredByIgnoreFiles(GITIGNORE_FILES_PATTERN, options);\nexport const isGitIgnoredSync = options => isIgnoredByIgnoreFilesSync(GITIGNORE_FILES_PATTERN, options);","map":{"version":3,"names":["process","fs","path","fastGlob","gitIgnore","slash","toPath","isNegativePattern","ignoreFilesGlobOptions","ignore","absolute","dot","GITIGNORE_FILES_PATTERN","applyBaseToPattern","pattern","base","posix","join","slice","parseIgnoreFile","file","cwd","relative","dirname","filePath","content","split","filter","line","startsWith","map","toRelativePath","fileOrDirectory","isAbsolute","Error","getIsIgnoredPredicate","files","patterns","flatMap","ignores","add","normalizeOptions","options","isIgnoredByIgnoreFiles","paths","Promise","all","promises","readFile","isIgnoredByIgnoreFilesSync","sync","readFileSync","isGitIgnored","isGitIgnoredSync"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/globby/ignore.js"],"sourcesContent":["import process from 'node:process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport fastGlob from 'fast-glob';\nimport gitIgnore from 'ignore';\nimport slash from 'slash';\nimport {toPath, isNegativePattern} from './utilities.js';\n\nconst ignoreFilesGlobOptions = {\n\tignore: [\n\t\t'**/node_modules',\n\t\t'**/flow-typed',\n\t\t'**/coverage',\n\t\t'**/.git',\n\t],\n\tabsolute: true,\n\tdot: true,\n};\n\nexport const GITIGNORE_FILES_PATTERN = '**/.gitignore';\n\nconst applyBaseToPattern = (pattern, base) => isNegativePattern(pattern)\n\t? '!' + path.posix.join(base, pattern.slice(1))\n\t: path.posix.join(base, pattern);\n\nconst parseIgnoreFile = (file, cwd) => {\n\tconst base = slash(path.relative(cwd, path.dirname(file.filePath)));\n\n\treturn file.content\n\t\t.split(/\\r?\\n/)\n\t\t.filter(line => line && !line.startsWith('#'))\n\t\t.map(pattern => applyBaseToPattern(pattern, base));\n};\n\nconst toRelativePath = (fileOrDirectory, cwd) => {\n\tcwd = slash(cwd);\n\tif (path.isAbsolute(fileOrDirectory)) {\n\t\tif (slash(fileOrDirectory).startsWith(cwd)) {\n\t\t\treturn path.relative(cwd, fileOrDirectory);\n\t\t}\n\n\t\tthrow new Error(`Path ${fileOrDirectory} is not in cwd ${cwd}`);\n\t}\n\n\treturn fileOrDirectory;\n};\n\nconst getIsIgnoredPredicate = (files, cwd) => {\n\tconst patterns = files.flatMap(file => parseIgnoreFile(file, cwd));\n\tconst ignores = gitIgnore().add(patterns);\n\n\treturn fileOrDirectory => {\n\t\tfileOrDirectory = toPath(fileOrDirectory);\n\t\tfileOrDirectory = toRelativePath(fileOrDirectory, cwd);\n\t\treturn fileOrDirectory ? ignores.ignores(slash(fileOrDirectory)) : false;\n\t};\n};\n\nconst normalizeOptions = (options = {}) => ({\n\tcwd: toPath(options.cwd) || process.cwd(),\n});\n\nexport const isIgnoredByIgnoreFiles = async (patterns, options) => {\n\tconst {cwd} = normalizeOptions(options);\n\n\tconst paths = await fastGlob(patterns, {cwd, ...ignoreFilesGlobOptions});\n\n\tconst files = await Promise.all(\n\t\tpaths.map(async filePath => ({\n\t\t\tfilePath,\n\t\t\tcontent: await fs.promises.readFile(filePath, 'utf8'),\n\t\t})),\n\t);\n\n\treturn getIsIgnoredPredicate(files, cwd);\n};\n\nexport const isIgnoredByIgnoreFilesSync = (patterns, options) => {\n\tconst {cwd} = normalizeOptions(options);\n\n\tconst paths = fastGlob.sync(patterns, {cwd, ...ignoreFilesGlobOptions});\n\n\tconst files = paths.map(filePath => ({\n\t\tfilePath,\n\t\tcontent: fs.readFileSync(filePath, 'utf8'),\n\t}));\n\n\treturn getIsIgnoredPredicate(files, cwd);\n};\n\nexport const isGitIgnored = options => isIgnoredByIgnoreFiles(GITIGNORE_FILES_PATTERN, options);\nexport const isGitIgnoredSync = options => isIgnoredByIgnoreFilesSync(GITIGNORE_FILES_PATTERN, options);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}