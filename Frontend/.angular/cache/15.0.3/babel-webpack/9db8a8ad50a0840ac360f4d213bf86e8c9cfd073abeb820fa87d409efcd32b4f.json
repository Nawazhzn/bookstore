{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeScriptPathsPlugin = void 0;\nconst path = __importStar(require(\"path\"));\nclass TypeScriptPathsPlugin {\n  constructor(options) {\n    if (options) {\n      this.update(options);\n    }\n  }\n  /**\n   * Update the plugin with new path mapping option values.\n   * The options will also be preprocessed to reduce the overhead of individual resolve actions\n   * during a build.\n   *\n   * @param options The `paths` and `baseUrl` options from TypeScript's `CompilerOptions`.\n   */\n  update(options) {\n    var _a, _b;\n    this.baseUrl = options.baseUrl;\n    this.patterns = undefined;\n    if (options.paths) {\n      for (const [pattern, potentials] of Object.entries(options.paths)) {\n        // Ignore any entries that would not result in a new mapping\n        if (potentials.length === 0 || potentials.every(potential => potential === '*')) {\n          continue;\n        }\n        const starIndex = pattern.indexOf('*');\n        let prefix = pattern;\n        let suffix;\n        if (starIndex > -1) {\n          prefix = pattern.slice(0, starIndex);\n          if (starIndex < pattern.length - 1) {\n            suffix = pattern.slice(starIndex + 1);\n          }\n        }\n        (_a = this.patterns) !== null && _a !== void 0 ? _a : this.patterns = [];\n        this.patterns.push({\n          starIndex,\n          prefix,\n          suffix,\n          potentials: potentials.map(potential => {\n            const potentialStarIndex = potential.indexOf('*');\n            if (potentialStarIndex === -1) {\n              return {\n                hasStar: false,\n                prefix: potential\n              };\n            }\n            return {\n              hasStar: true,\n              prefix: potential.slice(0, potentialStarIndex),\n              suffix: potentialStarIndex < potential.length - 1 ? potential.slice(potentialStarIndex + 1) : undefined\n            };\n          })\n        });\n      }\n      // Sort patterns so that exact matches take priority then largest prefix match\n      (_b = this.patterns) === null || _b === void 0 ? void 0 : _b.sort((a, b) => {\n        if (a.starIndex === -1) {\n          return -1;\n        } else if (b.starIndex === -1) {\n          return 1;\n        } else {\n          return b.starIndex - a.starIndex;\n        }\n      });\n    }\n  }\n  apply(resolver) {\n    const target = resolver.ensureHook('resolve');\n    // To support synchronous resolvers this hook cannot be promise based.\n    // Webpack supports synchronous resolution with `tap` and `tapAsync` hooks.\n    resolver.getHook('described-resolve').tapAsync('TypeScriptPathsPlugin', (request, resolveContext, callback) => {\n      var _a, _b;\n      // Preprocessing of the options will ensure that `patterns` is either undefined or has elements to check\n      if (!this.patterns) {\n        callback();\n        return;\n      }\n      if (!request || request.typescriptPathMapped) {\n        callback();\n        return;\n      }\n      const originalRequest = request.request || request.path;\n      if (!originalRequest) {\n        callback();\n        return;\n      }\n      // Only work on Javascript/TypeScript issuers.\n      if (!((_b = (_a = request === null || request === void 0 ? void 0 : request.context) === null || _a === void 0 ? void 0 : _a.issuer) === null || _b === void 0 ? void 0 : _b.match(/\\.[cm]?[jt]sx?$/))) {\n        callback();\n        return;\n      }\n      switch (originalRequest[0]) {\n        case '.':\n        case '/':\n          // Relative or absolute requests are not mapped\n          callback();\n          return;\n        case '!':\n          // Ignore all webpack special requests\n          if (originalRequest.length > 1 && originalRequest[1] === '!') {\n            callback();\n            return;\n          }\n          break;\n      }\n      // A generator is used to limit the amount of replacements requests that need to be created.\n      // For example, if the first one resolves, any others are not needed and do not need\n      // to be created.\n      const requests = this.createReplacementRequests(request, originalRequest);\n      const tryResolve = () => {\n        const next = requests.next();\n        if (next.done) {\n          callback();\n          return;\n        }\n        resolver.doResolve(target, next.value, '', resolveContext, (error, result) => {\n          if (error) {\n            callback(error);\n          } else if (result) {\n            callback(undefined, result);\n          } else {\n            tryResolve();\n          }\n        });\n      };\n      tryResolve();\n    });\n  }\n  *findReplacements(originalRequest) {\n    if (!this.patterns) {\n      return;\n    }\n    // check if any path mapping rules are relevant\n    for (const {\n      starIndex,\n      prefix,\n      suffix,\n      potentials\n    } of this.patterns) {\n      let partial;\n      if (starIndex === -1) {\n        // No star means an exact match is required\n        if (prefix === originalRequest) {\n          partial = '';\n        }\n      } else if (starIndex === 0 && !suffix) {\n        // Everything matches a single wildcard pattern (\"*\")\n        partial = originalRequest;\n      } else if (!suffix) {\n        // No suffix means the star is at the end of the pattern\n        if (originalRequest.startsWith(prefix)) {\n          partial = originalRequest.slice(prefix.length);\n        }\n      } else {\n        // Star was in the middle of the pattern\n        if (originalRequest.startsWith(prefix) && originalRequest.endsWith(suffix)) {\n          partial = originalRequest.substring(prefix.length, originalRequest.length - suffix.length);\n        }\n      }\n      // If request was not matched, move on to the next pattern\n      if (partial === undefined) {\n        continue;\n      }\n      // Create the full replacement values based on the original request and the potentials\n      // for the successfully matched pattern.\n      for (const {\n        hasStar,\n        prefix,\n        suffix\n      } of potentials) {\n        let replacement = prefix;\n        if (hasStar) {\n          replacement += partial;\n          if (suffix) {\n            replacement += suffix;\n          }\n        }\n        yield replacement;\n      }\n    }\n  }\n  *createReplacementRequests(request, originalRequest) {\n    var _a;\n    for (const replacement of this.findReplacements(originalRequest)) {\n      const targetPath = path.resolve((_a = this.baseUrl) !== null && _a !== void 0 ? _a : '', replacement);\n      // Resolution in the original callee location, but with the updated request\n      // to point to the mapped target location.\n      yield {\n        ...request,\n        request: targetPath,\n        typescriptPathMapped: true\n      };\n      // If there is no extension. i.e. the target does not refer to an explicit\n      // file, then this is a candidate for module/package resolution.\n      const canBeModule = path.extname(targetPath) === '';\n      if (canBeModule) {\n        // Resolution in the target location, preserving the original request.\n        // This will work with the `resolve-in-package` resolution hook, supporting\n        // package exports for e.g. locally-built APF libraries.\n        yield {\n          ...request,\n          path: targetPath,\n          typescriptPathMapped: true\n        };\n      }\n    }\n  }\n}\nexports.TypeScriptPathsPlugin = TypeScriptPathsPlugin;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","TypeScriptPathsPlugin","path","require","constructor","options","update","_a","_b","baseUrl","patterns","paths","pattern","potentials","entries","length","every","potential","starIndex","indexOf","prefix","suffix","slice","push","map","potentialStarIndex","hasStar","sort","a","b","apply","resolver","target","ensureHook","getHook","tapAsync","request","resolveContext","callback","typescriptPathMapped","originalRequest","context","issuer","match","requests","createReplacementRequests","tryResolve","next","done","doResolve","error","findReplacements","partial","startsWith","endsWith","substring","replacement","targetPath","resolve","canBeModule","extname"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@ngtools/webpack/src/paths-plugin.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeScriptPathsPlugin = void 0;\nconst path = __importStar(require(\"path\"));\nclass TypeScriptPathsPlugin {\n    constructor(options) {\n        if (options) {\n            this.update(options);\n        }\n    }\n    /**\n     * Update the plugin with new path mapping option values.\n     * The options will also be preprocessed to reduce the overhead of individual resolve actions\n     * during a build.\n     *\n     * @param options The `paths` and `baseUrl` options from TypeScript's `CompilerOptions`.\n     */\n    update(options) {\n        var _a, _b;\n        this.baseUrl = options.baseUrl;\n        this.patterns = undefined;\n        if (options.paths) {\n            for (const [pattern, potentials] of Object.entries(options.paths)) {\n                // Ignore any entries that would not result in a new mapping\n                if (potentials.length === 0 || potentials.every((potential) => potential === '*')) {\n                    continue;\n                }\n                const starIndex = pattern.indexOf('*');\n                let prefix = pattern;\n                let suffix;\n                if (starIndex > -1) {\n                    prefix = pattern.slice(0, starIndex);\n                    if (starIndex < pattern.length - 1) {\n                        suffix = pattern.slice(starIndex + 1);\n                    }\n                }\n                (_a = this.patterns) !== null && _a !== void 0 ? _a : (this.patterns = []);\n                this.patterns.push({\n                    starIndex,\n                    prefix,\n                    suffix,\n                    potentials: potentials.map((potential) => {\n                        const potentialStarIndex = potential.indexOf('*');\n                        if (potentialStarIndex === -1) {\n                            return { hasStar: false, prefix: potential };\n                        }\n                        return {\n                            hasStar: true,\n                            prefix: potential.slice(0, potentialStarIndex),\n                            suffix: potentialStarIndex < potential.length - 1\n                                ? potential.slice(potentialStarIndex + 1)\n                                : undefined,\n                        };\n                    }),\n                });\n            }\n            // Sort patterns so that exact matches take priority then largest prefix match\n            (_b = this.patterns) === null || _b === void 0 ? void 0 : _b.sort((a, b) => {\n                if (a.starIndex === -1) {\n                    return -1;\n                }\n                else if (b.starIndex === -1) {\n                    return 1;\n                }\n                else {\n                    return b.starIndex - a.starIndex;\n                }\n            });\n        }\n    }\n    apply(resolver) {\n        const target = resolver.ensureHook('resolve');\n        // To support synchronous resolvers this hook cannot be promise based.\n        // Webpack supports synchronous resolution with `tap` and `tapAsync` hooks.\n        resolver\n            .getHook('described-resolve')\n            .tapAsync('TypeScriptPathsPlugin', (request, resolveContext, callback) => {\n            var _a, _b;\n            // Preprocessing of the options will ensure that `patterns` is either undefined or has elements to check\n            if (!this.patterns) {\n                callback();\n                return;\n            }\n            if (!request || request.typescriptPathMapped) {\n                callback();\n                return;\n            }\n            const originalRequest = request.request || request.path;\n            if (!originalRequest) {\n                callback();\n                return;\n            }\n            // Only work on Javascript/TypeScript issuers.\n            if (!((_b = (_a = request === null || request === void 0 ? void 0 : request.context) === null || _a === void 0 ? void 0 : _a.issuer) === null || _b === void 0 ? void 0 : _b.match(/\\.[cm]?[jt]sx?$/))) {\n                callback();\n                return;\n            }\n            switch (originalRequest[0]) {\n                case '.':\n                case '/':\n                    // Relative or absolute requests are not mapped\n                    callback();\n                    return;\n                case '!':\n                    // Ignore all webpack special requests\n                    if (originalRequest.length > 1 && originalRequest[1] === '!') {\n                        callback();\n                        return;\n                    }\n                    break;\n            }\n            // A generator is used to limit the amount of replacements requests that need to be created.\n            // For example, if the first one resolves, any others are not needed and do not need\n            // to be created.\n            const requests = this.createReplacementRequests(request, originalRequest);\n            const tryResolve = () => {\n                const next = requests.next();\n                if (next.done) {\n                    callback();\n                    return;\n                }\n                resolver.doResolve(target, next.value, '', resolveContext, (error, result) => {\n                    if (error) {\n                        callback(error);\n                    }\n                    else if (result) {\n                        callback(undefined, result);\n                    }\n                    else {\n                        tryResolve();\n                    }\n                });\n            };\n            tryResolve();\n        });\n    }\n    *findReplacements(originalRequest) {\n        if (!this.patterns) {\n            return;\n        }\n        // check if any path mapping rules are relevant\n        for (const { starIndex, prefix, suffix, potentials } of this.patterns) {\n            let partial;\n            if (starIndex === -1) {\n                // No star means an exact match is required\n                if (prefix === originalRequest) {\n                    partial = '';\n                }\n            }\n            else if (starIndex === 0 && !suffix) {\n                // Everything matches a single wildcard pattern (\"*\")\n                partial = originalRequest;\n            }\n            else if (!suffix) {\n                // No suffix means the star is at the end of the pattern\n                if (originalRequest.startsWith(prefix)) {\n                    partial = originalRequest.slice(prefix.length);\n                }\n            }\n            else {\n                // Star was in the middle of the pattern\n                if (originalRequest.startsWith(prefix) && originalRequest.endsWith(suffix)) {\n                    partial = originalRequest.substring(prefix.length, originalRequest.length - suffix.length);\n                }\n            }\n            // If request was not matched, move on to the next pattern\n            if (partial === undefined) {\n                continue;\n            }\n            // Create the full replacement values based on the original request and the potentials\n            // for the successfully matched pattern.\n            for (const { hasStar, prefix, suffix } of potentials) {\n                let replacement = prefix;\n                if (hasStar) {\n                    replacement += partial;\n                    if (suffix) {\n                        replacement += suffix;\n                    }\n                }\n                yield replacement;\n            }\n        }\n    }\n    *createReplacementRequests(request, originalRequest) {\n        var _a;\n        for (const replacement of this.findReplacements(originalRequest)) {\n            const targetPath = path.resolve((_a = this.baseUrl) !== null && _a !== void 0 ? _a : '', replacement);\n            // Resolution in the original callee location, but with the updated request\n            // to point to the mapped target location.\n            yield {\n                ...request,\n                request: targetPath,\n                typescriptPathMapped: true,\n            };\n            // If there is no extension. i.e. the target does not refer to an explicit\n            // file, then this is a candidate for module/package resolution.\n            const canBeModule = path.extname(targetPath) === '';\n            if (canBeModule) {\n                // Resolution in the target location, preserving the original request.\n                // This will work with the `resolve-in-package` resolution hook, supporting\n                // package exports for e.g. locally-built APF libraries.\n                yield {\n                    ...request,\n                    path: targetPath,\n                    typescriptPathMapped: true,\n                };\n            }\n        }\n    }\n}\nexports.TypeScriptPathsPlugin = TypeScriptPathsPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}