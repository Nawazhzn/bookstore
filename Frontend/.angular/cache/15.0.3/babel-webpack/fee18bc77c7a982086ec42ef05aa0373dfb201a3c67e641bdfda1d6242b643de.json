{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst _util_1 = require(\"./_util\");\nfunction getDef(opts) {\n  return {\n    keyword: \"deepProperties\",\n    type: \"object\",\n    schemaType: \"object\",\n    macro: function (schema) {\n      const allOf = [];\n      for (const pointer in schema) allOf.push(getSchema(pointer, schema[pointer]));\n      return {\n        allOf\n      };\n    },\n    metaSchema: {\n      type: \"object\",\n      propertyNames: {\n        type: \"string\",\n        format: \"json-pointer\"\n      },\n      additionalProperties: (0, _util_1.metaSchemaRef)(opts)\n    }\n  };\n}\nexports.default = getDef;\nfunction getSchema(jsonPointer, schema) {\n  const segments = jsonPointer.split(\"/\");\n  const rootSchema = {};\n  let pointerSchema = rootSchema;\n  for (let i = 1; i < segments.length; i++) {\n    let segment = segments[i];\n    const isLast = i === segments.length - 1;\n    segment = unescapeJsonPointer(segment);\n    const properties = pointerSchema.properties = {};\n    let items;\n    if (/[0-9]+/.test(segment)) {\n      let count = +segment;\n      items = pointerSchema.items = [];\n      pointerSchema.type = [\"object\", \"array\"];\n      while (count--) items.push({});\n    } else {\n      pointerSchema.type = \"object\";\n    }\n    pointerSchema = isLast ? schema : {};\n    properties[segment] = pointerSchema;\n    if (items) items.push(pointerSchema);\n  }\n  return rootSchema;\n}\nfunction unescapeJsonPointer(str) {\n  return str.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\nmodule.exports = getDef;","map":{"version":3,"names":["Object","defineProperty","exports","value","_util_1","require","getDef","opts","keyword","type","schemaType","macro","schema","allOf","pointer","push","getSchema","metaSchema","propertyNames","format","additionalProperties","metaSchemaRef","default","jsonPointer","segments","split","rootSchema","pointerSchema","i","length","segment","isLast","unescapeJsonPointer","properties","items","test","count","str","replace","module"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/ajv-keywords/dist/definitions/deepProperties.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _util_1 = require(\"./_util\");\nfunction getDef(opts) {\n    return {\n        keyword: \"deepProperties\",\n        type: \"object\",\n        schemaType: \"object\",\n        macro: function (schema) {\n            const allOf = [];\n            for (const pointer in schema)\n                allOf.push(getSchema(pointer, schema[pointer]));\n            return { allOf };\n        },\n        metaSchema: {\n            type: \"object\",\n            propertyNames: { type: \"string\", format: \"json-pointer\" },\n            additionalProperties: (0, _util_1.metaSchemaRef)(opts),\n        },\n    };\n}\nexports.default = getDef;\nfunction getSchema(jsonPointer, schema) {\n    const segments = jsonPointer.split(\"/\");\n    const rootSchema = {};\n    let pointerSchema = rootSchema;\n    for (let i = 1; i < segments.length; i++) {\n        let segment = segments[i];\n        const isLast = i === segments.length - 1;\n        segment = unescapeJsonPointer(segment);\n        const properties = (pointerSchema.properties = {});\n        let items;\n        if (/[0-9]+/.test(segment)) {\n            let count = +segment;\n            items = pointerSchema.items = [];\n            pointerSchema.type = [\"object\", \"array\"];\n            while (count--)\n                items.push({});\n        }\n        else {\n            pointerSchema.type = \"object\";\n        }\n        pointerSchema = isLast ? schema : {};\n        properties[segment] = pointerSchema;\n        if (items)\n            items.push(pointerSchema);\n    }\n    return rootSchema;\n}\nfunction unescapeJsonPointer(str) {\n    return str.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\nmodule.exports = getDef;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,SAASC,MAAM,CAACC,IAAI,EAAE;EAClB,OAAO;IACHC,OAAO,EAAE,gBAAgB;IACzBC,IAAI,EAAE,QAAQ;IACdC,UAAU,EAAE,QAAQ;IACpBC,KAAK,EAAE,UAAUC,MAAM,EAAE;MACrB,MAAMC,KAAK,GAAG,EAAE;MAChB,KAAK,MAAMC,OAAO,IAAIF,MAAM,EACxBC,KAAK,CAACE,IAAI,CAACC,SAAS,CAACF,OAAO,EAAEF,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC;MACnD,OAAO;QAAED;MAAM,CAAC;IACpB,CAAC;IACDI,UAAU,EAAE;MACRR,IAAI,EAAE,QAAQ;MACdS,aAAa,EAAE;QAAET,IAAI,EAAE,QAAQ;QAAEU,MAAM,EAAE;MAAe,CAAC;MACzDC,oBAAoB,EAAE,CAAC,CAAC,EAAEhB,OAAO,CAACiB,aAAa,EAAEd,IAAI;IACzD;EACJ,CAAC;AACL;AACAL,OAAO,CAACoB,OAAO,GAAGhB,MAAM;AACxB,SAASU,SAAS,CAACO,WAAW,EAAEX,MAAM,EAAE;EACpC,MAAMY,QAAQ,GAAGD,WAAW,CAACE,KAAK,CAAC,GAAG,CAAC;EACvC,MAAMC,UAAU,GAAG,CAAC,CAAC;EACrB,IAAIC,aAAa,GAAGD,UAAU;EAC9B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,IAAIE,OAAO,GAAGN,QAAQ,CAACI,CAAC,CAAC;IACzB,MAAMG,MAAM,GAAGH,CAAC,KAAKJ,QAAQ,CAACK,MAAM,GAAG,CAAC;IACxCC,OAAO,GAAGE,mBAAmB,CAACF,OAAO,CAAC;IACtC,MAAMG,UAAU,GAAIN,aAAa,CAACM,UAAU,GAAG,CAAC,CAAE;IAClD,IAAIC,KAAK;IACT,IAAI,QAAQ,CAACC,IAAI,CAACL,OAAO,CAAC,EAAE;MACxB,IAAIM,KAAK,GAAG,CAACN,OAAO;MACpBI,KAAK,GAAGP,aAAa,CAACO,KAAK,GAAG,EAAE;MAChCP,aAAa,CAAClB,IAAI,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC;MACxC,OAAO2B,KAAK,EAAE,EACVF,KAAK,CAACnB,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC,MACI;MACDY,aAAa,CAAClB,IAAI,GAAG,QAAQ;IACjC;IACAkB,aAAa,GAAGI,MAAM,GAAGnB,MAAM,GAAG,CAAC,CAAC;IACpCqB,UAAU,CAACH,OAAO,CAAC,GAAGH,aAAa;IACnC,IAAIO,KAAK,EACLA,KAAK,CAACnB,IAAI,CAACY,aAAa,CAAC;EACjC;EACA,OAAOD,UAAU;AACrB;AACA,SAASM,mBAAmB,CAACK,GAAG,EAAE;EAC9B,OAAOA,GAAG,CAACC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AACtD;AACAC,MAAM,CAACrC,OAAO,GAAGI,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}