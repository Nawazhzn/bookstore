{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loaders = void 0;\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nlet importFresh;\nconst loadJs = function loadJs(filepath) {\n  if (importFresh === undefined) {\n    importFresh = require('import-fresh');\n  }\n  const result = importFresh(filepath);\n  return result;\n};\nlet parseJson;\nconst loadJson = function loadJson(filepath, content) {\n  if (parseJson === undefined) {\n    parseJson = require('parse-json');\n  }\n  try {\n    const result = parseJson(content);\n    return result;\n  } catch (error) {\n    error.message = `JSON Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  }\n};\nlet yaml;\nconst loadYaml = function loadYaml(filepath, content) {\n  if (yaml === undefined) {\n    yaml = require('yaml');\n  }\n  try {\n    const result = yaml.parse(content, {\n      prettyErrors: true\n    });\n    return result;\n  } catch (error) {\n    error.message = `YAML Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  }\n};\nconst loaders = {\n  loadJs,\n  loadJson,\n  loadYaml\n};\nexports.loaders = loaders;","map":{"version":3,"names":["Object","defineProperty","exports","value","loaders","importFresh","loadJs","filepath","undefined","require","result","parseJson","loadJson","content","error","message","yaml","loadYaml","parse","prettyErrors"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/cosmiconfig/dist/loaders.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loaders = void 0;\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nlet importFresh;\n\nconst loadJs = function loadJs(filepath) {\n  if (importFresh === undefined) {\n    importFresh = require('import-fresh');\n  }\n\n  const result = importFresh(filepath);\n  return result;\n};\n\nlet parseJson;\n\nconst loadJson = function loadJson(filepath, content) {\n  if (parseJson === undefined) {\n    parseJson = require('parse-json');\n  }\n\n  try {\n    const result = parseJson(content);\n    return result;\n  } catch (error) {\n    error.message = `JSON Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  }\n};\n\nlet yaml;\n\nconst loadYaml = function loadYaml(filepath, content) {\n  if (yaml === undefined) {\n    yaml = require('yaml');\n  }\n\n  try {\n    const result = yaml.parse(content, {\n      prettyErrors: true\n    });\n    return result;\n  } catch (error) {\n    error.message = `YAML Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  }\n};\n\nconst loaders = {\n  loadJs,\n  loadJson,\n  loadYaml\n};\nexports.loaders = loaders;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;;AAExB;AACA,IAAIC,WAAW;AAEf,MAAMC,MAAM,GAAG,SAASA,MAAM,CAACC,QAAQ,EAAE;EACvC,IAAIF,WAAW,KAAKG,SAAS,EAAE;IAC7BH,WAAW,GAAGI,OAAO,CAAC,cAAc,CAAC;EACvC;EAEA,MAAMC,MAAM,GAAGL,WAAW,CAACE,QAAQ,CAAC;EACpC,OAAOG,MAAM;AACf,CAAC;AAED,IAAIC,SAAS;AAEb,MAAMC,QAAQ,GAAG,SAASA,QAAQ,CAACL,QAAQ,EAAEM,OAAO,EAAE;EACpD,IAAIF,SAAS,KAAKH,SAAS,EAAE;IAC3BG,SAAS,GAAGF,OAAO,CAAC,YAAY,CAAC;EACnC;EAEA,IAAI;IACF,MAAMC,MAAM,GAAGC,SAAS,CAACE,OAAO,CAAC;IACjC,OAAOH,MAAM;EACf,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdA,KAAK,CAACC,OAAO,GAAI,iBAAgBR,QAAS,MAAKO,KAAK,CAACC,OAAQ,EAAC;IAC9D,MAAMD,KAAK;EACb;AACF,CAAC;AAED,IAAIE,IAAI;AAER,MAAMC,QAAQ,GAAG,SAASA,QAAQ,CAACV,QAAQ,EAAEM,OAAO,EAAE;EACpD,IAAIG,IAAI,KAAKR,SAAS,EAAE;IACtBQ,IAAI,GAAGP,OAAO,CAAC,MAAM,CAAC;EACxB;EAEA,IAAI;IACF,MAAMC,MAAM,GAAGM,IAAI,CAACE,KAAK,CAACL,OAAO,EAAE;MACjCM,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAOT,MAAM;EACf,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdA,KAAK,CAACC,OAAO,GAAI,iBAAgBR,QAAS,MAAKO,KAAK,CAACC,OAAQ,EAAC;IAC9D,MAAMD,KAAK;EACb;AACF,CAAC;AAED,MAAMV,OAAO,GAAG;EACdE,MAAM;EACNM,QAAQ;EACRK;AACF,CAAC;AACDf,OAAO,CAACE,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}