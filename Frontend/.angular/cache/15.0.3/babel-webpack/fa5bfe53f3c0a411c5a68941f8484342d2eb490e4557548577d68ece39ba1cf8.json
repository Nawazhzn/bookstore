{"ast":null,"code":"'use strict';\n\nconst SAXParser = require('parse5-sax-parser');\nconst {\n  escapeString\n} = require('parse5/lib/serializer');\nclass RewritingStream extends SAXParser {\n  constructor() {\n    super({\n      sourceCodeLocationInfo: true\n    });\n    this.posTracker = this.locInfoMixin.posTracker;\n  }\n  _transformChunk(chunk) {\n    // NOTE: ignore upstream return value as we want to push to\n    // the Writable part of Transform stream ourselves.\n    super._transformChunk(chunk);\n  }\n  _getRawHtml(location) {\n    const droppedBufferSize = this.posTracker.droppedBufferSize;\n    const start = location.startOffset - droppedBufferSize;\n    const end = location.endOffset - droppedBufferSize;\n    return this.tokenizer.preprocessor.html.slice(start, end);\n  }\n\n  // Events\n  _handleToken(token) {\n    if (!super._handleToken(token)) {\n      this.emitRaw(this._getRawHtml(token.location));\n    }\n\n    // NOTE: don't skip new lines after <pre> and other tags,\n    // otherwise we'll have incorrect raw data.\n    this.parserFeedbackSimulator.skipNextNewLine = false;\n  }\n\n  // Emitter API\n  _emitToken(eventName, token) {\n    this.emit(eventName, token, this._getRawHtml(token.sourceCodeLocation));\n  }\n  emitDoctype(token) {\n    let res = `<!DOCTYPE ${token.name}`;\n    if (token.publicId !== null) {\n      res += ` PUBLIC \"${token.publicId}\"`;\n    } else if (token.systemId !== null) {\n      res += ' SYSTEM';\n    }\n    if (token.systemId !== null) {\n      res += ` \"${token.systemId}\"`;\n    }\n    res += '>';\n    this.push(res);\n  }\n  emitStartTag(token) {\n    let res = `<${token.tagName}`;\n    const attrs = token.attrs;\n    for (let i = 0; i < attrs.length; i++) {\n      res += ` ${attrs[i].name}=\"${escapeString(attrs[i].value, true)}\"`;\n    }\n    res += token.selfClosing ? '/>' : '>';\n    this.push(res);\n  }\n  emitEndTag(token) {\n    this.push(`</${token.tagName}>`);\n  }\n  emitText({\n    text\n  }) {\n    this.push(escapeString(text, false));\n  }\n  emitComment(token) {\n    this.push(`<!--${token.text}-->`);\n  }\n  emitRaw(html) {\n    this.push(html);\n  }\n}\nmodule.exports = RewritingStream;","map":{"version":3,"names":["SAXParser","require","escapeString","RewritingStream","constructor","sourceCodeLocationInfo","posTracker","locInfoMixin","_transformChunk","chunk","_getRawHtml","location","droppedBufferSize","start","startOffset","end","endOffset","tokenizer","preprocessor","html","slice","_handleToken","token","emitRaw","parserFeedbackSimulator","skipNextNewLine","_emitToken","eventName","emit","sourceCodeLocation","emitDoctype","res","name","publicId","systemId","push","emitStartTag","tagName","attrs","i","length","value","selfClosing","emitEndTag","emitText","text","emitComment","module","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/parse5-html-rewriting-stream/lib/index.js"],"sourcesContent":["'use strict';\n\nconst SAXParser = require('parse5-sax-parser');\nconst { escapeString } = require('parse5/lib/serializer');\n\nclass RewritingStream extends SAXParser {\n    constructor() {\n        super({ sourceCodeLocationInfo: true });\n\n        this.posTracker = this.locInfoMixin.posTracker;\n    }\n\n    _transformChunk(chunk) {\n        // NOTE: ignore upstream return value as we want to push to\n        // the Writable part of Transform stream ourselves.\n        super._transformChunk(chunk);\n    }\n\n    _getRawHtml(location) {\n        const droppedBufferSize = this.posTracker.droppedBufferSize;\n        const start = location.startOffset - droppedBufferSize;\n        const end = location.endOffset - droppedBufferSize;\n\n        return this.tokenizer.preprocessor.html.slice(start, end);\n    }\n\n    // Events\n    _handleToken(token) {\n        if (!super._handleToken(token)) {\n            this.emitRaw(this._getRawHtml(token.location));\n        }\n\n        // NOTE: don't skip new lines after <pre> and other tags,\n        // otherwise we'll have incorrect raw data.\n        this.parserFeedbackSimulator.skipNextNewLine = false;\n    }\n\n    // Emitter API\n    _emitToken(eventName, token) {\n        this.emit(eventName, token, this._getRawHtml(token.sourceCodeLocation));\n    }\n\n    emitDoctype(token) {\n        let res = `<!DOCTYPE ${token.name}`;\n\n        if (token.publicId !== null) {\n            res += ` PUBLIC \"${token.publicId}\"`;\n        } else if (token.systemId !== null) {\n            res += ' SYSTEM';\n        }\n\n        if (token.systemId !== null) {\n            res += ` \"${token.systemId}\"`;\n        }\n\n        res += '>';\n\n        this.push(res);\n    }\n\n    emitStartTag(token) {\n        let res = `<${token.tagName}`;\n\n        const attrs = token.attrs;\n\n        for (let i = 0; i < attrs.length; i++) {\n            res += ` ${attrs[i].name}=\"${escapeString(attrs[i].value, true)}\"`;\n        }\n\n        res += token.selfClosing ? '/>' : '>';\n\n        this.push(res);\n    }\n\n    emitEndTag(token) {\n        this.push(`</${token.tagName}>`);\n    }\n\n    emitText({ text }) {\n        this.push(escapeString(text, false));\n    }\n\n    emitComment(token) {\n        this.push(`<!--${token.text}-->`);\n    }\n\n    emitRaw(html) {\n        this.push(html);\n    }\n}\n\nmodule.exports = RewritingStream;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}