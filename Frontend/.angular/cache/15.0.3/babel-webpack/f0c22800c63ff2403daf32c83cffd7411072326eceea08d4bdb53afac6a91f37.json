{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NgccProcessor = void 0;\nconst child_process_1 = require(\"child_process\");\nconst crypto_1 = require(\"crypto\");\nconst fs_1 = require(\"fs\");\nconst path = __importStar(require(\"path\"));\nconst benchmark_1 = require(\"./benchmark\");\n// We cannot create a plugin for this, because NGTSC requires addition type\n// information which ngcc creates when processing a package which was compiled with NGC.\n// Example of such errors:\n// ERROR in node_modules/@angular/platform-browser/platform-browser.d.ts(42,22):\n// error TS-996002: Appears in the NgModule.imports of AppModule,\n// but could not be resolved to an NgModule class\n// We now transform a package and it's typings when NGTSC is resolving a module.\nclass NgccProcessor {\n  constructor(compilerNgcc, propertiesToConsider, compilationWarnings, compilationErrors, basePath, tsConfigPath, inputFileSystem, resolver) {\n    this.compilerNgcc = compilerNgcc;\n    this.propertiesToConsider = propertiesToConsider;\n    this.compilationWarnings = compilationWarnings;\n    this.compilationErrors = compilationErrors;\n    this.basePath = basePath;\n    this.tsConfigPath = tsConfigPath;\n    this.inputFileSystem = inputFileSystem;\n    this.resolver = resolver;\n    this._processedModules = new Set();\n    this._logger = new NgccLogger(this.compilationWarnings, this.compilationErrors, compilerNgcc.LogLevel.info);\n    this._nodeModulesDirectory = this.findNodeModulesDirectory(this.basePath);\n  }\n  /** Process the entire node modules tree. */\n  process() {\n    // Under Bazel when running in sandbox mode parts of the filesystem is read-only, or when using\n    // Yarn PnP there may not be a node_modules directory. ngcc can't run in those cases, so the\n    // processing is skipped.\n    if (process.env.BAZEL_TARGET || !this._nodeModulesDirectory) {\n      return;\n    }\n    // Skip if node_modules are read-only\n    const corePackage = this.tryResolvePackage('@angular/core', this._nodeModulesDirectory);\n    if (corePackage && isReadOnlyFile(corePackage)) {\n      return;\n    }\n    // Perform a ngcc run check to determine if an initial execution is required.\n    // If a run hash file exists that matches the current package manager lock file and the\n    // project's tsconfig, then an initial ngcc run has already been performed.\n    let skipProcessing = false;\n    let runHashFilePath;\n    const runHashBasePath = path.join(this._nodeModulesDirectory, '.cli-ngcc');\n    const projectBasePath = path.join(this._nodeModulesDirectory, '..');\n    try {\n      let ngccConfigData;\n      try {\n        ngccConfigData = (0, fs_1.readFileSync)(path.join(projectBasePath, 'ngcc.config.js'));\n      } catch {\n        ngccConfigData = '';\n      }\n      const relativeTsconfigPath = path.relative(projectBasePath, this.tsConfigPath);\n      const tsconfigData = (0, fs_1.readFileSync)(this.tsConfigPath);\n      const {\n        lockFileData,\n        lockFilePath\n      } = this.findPackageManagerLockFile(projectBasePath);\n      // Generate a hash that represents the state of the package lock file and used tsconfig\n      const runHash = (0, crypto_1.createHash)('sha256').update(lockFileData).update(lockFilePath).update(ngccConfigData).update(tsconfigData).update(relativeTsconfigPath).digest('hex');\n      // The hash is used directly in the file name to mitigate potential read/write race\n      // conditions as well as to only require a file existence check\n      runHashFilePath = path.join(runHashBasePath, runHash + '.lock');\n      // If the run hash lock file exists, then ngcc was already run against this project state\n      if ((0, fs_1.existsSync)(runHashFilePath)) {\n        skipProcessing = true;\n      }\n    } catch {\n      // Any error means an ngcc execution is needed\n    }\n    if (skipProcessing) {\n      return;\n    }\n    const timeLabel = 'NgccProcessor.process';\n    (0, benchmark_1.time)(timeLabel);\n    // We spawn instead of using the API because:\n    // - NGCC Async uses clustering which is problematic when used via the API which means\n    // that we cannot setup multiple cluster masters with different options.\n    // - We will not be able to have concurrent builds otherwise Ex: App-Shell,\n    // as NGCC will create a lock file for both builds and it will cause builds to fails.\n    const originalProcessTitle = process.title;\n    try {\n      const {\n        status,\n        error\n      } = (0, child_process_1.spawnSync)(process.execPath, [this.compilerNgcc.ngccMainFilePath, '--source' /** basePath */, this._nodeModulesDirectory, '--properties' /** propertiesToConsider */, ...this.propertiesToConsider, '--first-only' /** compileAllFormats */, '--create-ivy-entry-points' /** createNewEntryPointFormats */, '--async', '--tsconfig' /** tsConfigPath */, this.tsConfigPath, '--use-program-dependencies'], {\n        stdio: ['inherit', process.stderr, process.stderr]\n      });\n      if (status !== 0) {\n        const errorMessage = (error === null || error === void 0 ? void 0 : error.message) || '';\n        throw new Error(errorMessage + `NGCC failed${errorMessage ? ', see above' : ''}.`);\n      }\n    } finally {\n      process.title = originalProcessTitle;\n    }\n    (0, benchmark_1.timeEnd)(timeLabel);\n    // ngcc was successful so if a run hash was generated, write it for next time\n    if (runHashFilePath) {\n      try {\n        if (!(0, fs_1.existsSync)(runHashBasePath)) {\n          (0, fs_1.mkdirSync)(runHashBasePath, {\n            recursive: true\n          });\n        }\n        (0, fs_1.writeFileSync)(runHashFilePath, '');\n      } catch {\n        // Errors are non-fatal\n      }\n    }\n  }\n  /** Process a module and its dependencies. */\n  processModule(moduleName, resolvedModule) {\n    var _a, _b;\n    const resolvedFileName = resolvedModule.resolvedFileName;\n    if (!this._nodeModulesDirectory || !resolvedFileName || moduleName.startsWith('.') || this._processedModules.has(resolvedFileName)) {\n      // Skip when module_modules directory is not present, module is unknown, relative or the\n      // NGCC compiler is not found or already processed.\n      return;\n    }\n    const packageJsonPath = this.tryResolvePackage(moduleName, resolvedFileName);\n    // If the package.json is read only we should skip calling NGCC.\n    // With Bazel when running under sandbox the filesystem is read-only.\n    if (!packageJsonPath || isReadOnlyFile(packageJsonPath)) {\n      // add it to processed so the second time round we skip this.\n      this._processedModules.add(resolvedFileName);\n      return;\n    }\n    const timeLabel = `NgccProcessor.processModule.ngcc.process+${moduleName}`;\n    (0, benchmark_1.time)(timeLabel);\n    this.compilerNgcc.process({\n      basePath: this._nodeModulesDirectory,\n      targetEntryPointPath: path.dirname(packageJsonPath),\n      propertiesToConsider: this.propertiesToConsider,\n      compileAllFormats: false,\n      createNewEntryPointFormats: true,\n      logger: this._logger,\n      tsConfigPath: this.tsConfigPath\n    });\n    (0, benchmark_1.timeEnd)(timeLabel);\n    // Purge this file from cache, since NGCC add new mainFields. Ex: module_ivy_ngcc\n    // which are unknown in the cached file.\n    (_b = (_a = this.inputFileSystem).purge) === null || _b === void 0 ? void 0 : _b.call(_a, packageJsonPath);\n    this._processedModules.add(resolvedFileName);\n  }\n  invalidate(fileName) {\n    this._processedModules.delete(fileName);\n  }\n  /**\n   * Try resolve a package.json file from the resolved .d.ts file.\n   */\n  tryResolvePackage(moduleName, resolvedFileName) {\n    try {\n      const resolvedPath = this.resolver.resolveSync({}, resolvedFileName, `${moduleName}/package.json`);\n      return resolvedPath || undefined;\n    } catch {\n      // Ex: @angular/compiler/src/i18n/i18n_ast/package.json\n      // or local libraries which don't reside in node_modules\n      const packageJsonPath = path.resolve(resolvedFileName, '../package.json');\n      return (0, fs_1.existsSync)(packageJsonPath) ? packageJsonPath : undefined;\n    }\n  }\n  findNodeModulesDirectory(startPoint) {\n    let current = startPoint;\n    while (path.dirname(current) !== current) {\n      const nodePath = path.join(current, 'node_modules');\n      if ((0, fs_1.existsSync)(nodePath)) {\n        return nodePath;\n      }\n      current = path.dirname(current);\n    }\n    return null;\n  }\n  findPackageManagerLockFile(projectBasePath) {\n    for (const lockFile of ['yarn.lock', 'pnpm-lock.yaml', 'package-lock.json']) {\n      const lockFilePath = path.join(projectBasePath, lockFile);\n      try {\n        return {\n          lockFilePath,\n          lockFileData: (0, fs_1.readFileSync)(lockFilePath)\n        };\n      } catch {}\n    }\n    throw new Error('Cannot locate a package manager lock file.');\n  }\n}\nexports.NgccProcessor = NgccProcessor;\nclass NgccLogger {\n  constructor(compilationWarnings, compilationErrors, level) {\n    this.compilationWarnings = compilationWarnings;\n    this.compilationErrors = compilationErrors;\n    this.level = level;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  debug() {}\n  info(...args) {\n    // Log to stderr because it's a progress-like info message.\n    process.stderr.write(`\\n${args.join(' ')}\\n`);\n  }\n  warn(...args) {\n    this.compilationWarnings.push(args.join(' '));\n  }\n  error(...args) {\n    this.compilationErrors.push(new Error(args.join(' ')));\n  }\n}\nfunction isReadOnlyFile(fileName) {\n  try {\n    (0, fs_1.accessSync)(fileName, fs_1.constants.W_OK);\n    return false;\n  } catch {\n    return true;\n  }\n}","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","NgccProcessor","child_process_1","require","crypto_1","fs_1","path","benchmark_1","constructor","compilerNgcc","propertiesToConsider","compilationWarnings","compilationErrors","basePath","tsConfigPath","inputFileSystem","resolver","_processedModules","Set","_logger","NgccLogger","LogLevel","info","_nodeModulesDirectory","findNodeModulesDirectory","process","env","BAZEL_TARGET","corePackage","tryResolvePackage","isReadOnlyFile","skipProcessing","runHashFilePath","runHashBasePath","join","projectBasePath","ngccConfigData","readFileSync","relativeTsconfigPath","relative","tsconfigData","lockFileData","lockFilePath","findPackageManagerLockFile","runHash","createHash","update","digest","existsSync","timeLabel","time","originalProcessTitle","title","status","error","spawnSync","execPath","ngccMainFilePath","stdio","stderr","errorMessage","message","Error","timeEnd","mkdirSync","recursive","writeFileSync","processModule","moduleName","resolvedModule","_a","_b","resolvedFileName","startsWith","has","packageJsonPath","add","targetEntryPointPath","dirname","compileAllFormats","createNewEntryPointFormats","logger","purge","invalidate","fileName","delete","resolvedPath","resolveSync","resolve","startPoint","current","nodePath","lockFile","level","debug","args","write","warn","push","accessSync","constants","W_OK"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@ngtools/webpack/src/ngcc_processor.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NgccProcessor = void 0;\nconst child_process_1 = require(\"child_process\");\nconst crypto_1 = require(\"crypto\");\nconst fs_1 = require(\"fs\");\nconst path = __importStar(require(\"path\"));\nconst benchmark_1 = require(\"./benchmark\");\n// We cannot create a plugin for this, because NGTSC requires addition type\n// information which ngcc creates when processing a package which was compiled with NGC.\n// Example of such errors:\n// ERROR in node_modules/@angular/platform-browser/platform-browser.d.ts(42,22):\n// error TS-996002: Appears in the NgModule.imports of AppModule,\n// but could not be resolved to an NgModule class\n// We now transform a package and it's typings when NGTSC is resolving a module.\nclass NgccProcessor {\n    constructor(compilerNgcc, propertiesToConsider, compilationWarnings, compilationErrors, basePath, tsConfigPath, inputFileSystem, resolver) {\n        this.compilerNgcc = compilerNgcc;\n        this.propertiesToConsider = propertiesToConsider;\n        this.compilationWarnings = compilationWarnings;\n        this.compilationErrors = compilationErrors;\n        this.basePath = basePath;\n        this.tsConfigPath = tsConfigPath;\n        this.inputFileSystem = inputFileSystem;\n        this.resolver = resolver;\n        this._processedModules = new Set();\n        this._logger = new NgccLogger(this.compilationWarnings, this.compilationErrors, compilerNgcc.LogLevel.info);\n        this._nodeModulesDirectory = this.findNodeModulesDirectory(this.basePath);\n    }\n    /** Process the entire node modules tree. */\n    process() {\n        // Under Bazel when running in sandbox mode parts of the filesystem is read-only, or when using\n        // Yarn PnP there may not be a node_modules directory. ngcc can't run in those cases, so the\n        // processing is skipped.\n        if (process.env.BAZEL_TARGET || !this._nodeModulesDirectory) {\n            return;\n        }\n        // Skip if node_modules are read-only\n        const corePackage = this.tryResolvePackage('@angular/core', this._nodeModulesDirectory);\n        if (corePackage && isReadOnlyFile(corePackage)) {\n            return;\n        }\n        // Perform a ngcc run check to determine if an initial execution is required.\n        // If a run hash file exists that matches the current package manager lock file and the\n        // project's tsconfig, then an initial ngcc run has already been performed.\n        let skipProcessing = false;\n        let runHashFilePath;\n        const runHashBasePath = path.join(this._nodeModulesDirectory, '.cli-ngcc');\n        const projectBasePath = path.join(this._nodeModulesDirectory, '..');\n        try {\n            let ngccConfigData;\n            try {\n                ngccConfigData = (0, fs_1.readFileSync)(path.join(projectBasePath, 'ngcc.config.js'));\n            }\n            catch {\n                ngccConfigData = '';\n            }\n            const relativeTsconfigPath = path.relative(projectBasePath, this.tsConfigPath);\n            const tsconfigData = (0, fs_1.readFileSync)(this.tsConfigPath);\n            const { lockFileData, lockFilePath } = this.findPackageManagerLockFile(projectBasePath);\n            // Generate a hash that represents the state of the package lock file and used tsconfig\n            const runHash = (0, crypto_1.createHash)('sha256')\n                .update(lockFileData)\n                .update(lockFilePath)\n                .update(ngccConfigData)\n                .update(tsconfigData)\n                .update(relativeTsconfigPath)\n                .digest('hex');\n            // The hash is used directly in the file name to mitigate potential read/write race\n            // conditions as well as to only require a file existence check\n            runHashFilePath = path.join(runHashBasePath, runHash + '.lock');\n            // If the run hash lock file exists, then ngcc was already run against this project state\n            if ((0, fs_1.existsSync)(runHashFilePath)) {\n                skipProcessing = true;\n            }\n        }\n        catch {\n            // Any error means an ngcc execution is needed\n        }\n        if (skipProcessing) {\n            return;\n        }\n        const timeLabel = 'NgccProcessor.process';\n        (0, benchmark_1.time)(timeLabel);\n        // We spawn instead of using the API because:\n        // - NGCC Async uses clustering which is problematic when used via the API which means\n        // that we cannot setup multiple cluster masters with different options.\n        // - We will not be able to have concurrent builds otherwise Ex: App-Shell,\n        // as NGCC will create a lock file for both builds and it will cause builds to fails.\n        const originalProcessTitle = process.title;\n        try {\n            const { status, error } = (0, child_process_1.spawnSync)(process.execPath, [\n                this.compilerNgcc.ngccMainFilePath,\n                '--source' /** basePath */,\n                this._nodeModulesDirectory,\n                '--properties' /** propertiesToConsider */,\n                ...this.propertiesToConsider,\n                '--first-only' /** compileAllFormats */,\n                '--create-ivy-entry-points' /** createNewEntryPointFormats */,\n                '--async',\n                '--tsconfig' /** tsConfigPath */,\n                this.tsConfigPath,\n                '--use-program-dependencies',\n            ], {\n                stdio: ['inherit', process.stderr, process.stderr],\n            });\n            if (status !== 0) {\n                const errorMessage = (error === null || error === void 0 ? void 0 : error.message) || '';\n                throw new Error(errorMessage + `NGCC failed${errorMessage ? ', see above' : ''}.`);\n            }\n        }\n        finally {\n            process.title = originalProcessTitle;\n        }\n        (0, benchmark_1.timeEnd)(timeLabel);\n        // ngcc was successful so if a run hash was generated, write it for next time\n        if (runHashFilePath) {\n            try {\n                if (!(0, fs_1.existsSync)(runHashBasePath)) {\n                    (0, fs_1.mkdirSync)(runHashBasePath, { recursive: true });\n                }\n                (0, fs_1.writeFileSync)(runHashFilePath, '');\n            }\n            catch {\n                // Errors are non-fatal\n            }\n        }\n    }\n    /** Process a module and its dependencies. */\n    processModule(moduleName, resolvedModule) {\n        var _a, _b;\n        const resolvedFileName = resolvedModule.resolvedFileName;\n        if (!this._nodeModulesDirectory ||\n            !resolvedFileName ||\n            moduleName.startsWith('.') ||\n            this._processedModules.has(resolvedFileName)) {\n            // Skip when module_modules directory is not present, module is unknown, relative or the\n            // NGCC compiler is not found or already processed.\n            return;\n        }\n        const packageJsonPath = this.tryResolvePackage(moduleName, resolvedFileName);\n        // If the package.json is read only we should skip calling NGCC.\n        // With Bazel when running under sandbox the filesystem is read-only.\n        if (!packageJsonPath || isReadOnlyFile(packageJsonPath)) {\n            // add it to processed so the second time round we skip this.\n            this._processedModules.add(resolvedFileName);\n            return;\n        }\n        const timeLabel = `NgccProcessor.processModule.ngcc.process+${moduleName}`;\n        (0, benchmark_1.time)(timeLabel);\n        this.compilerNgcc.process({\n            basePath: this._nodeModulesDirectory,\n            targetEntryPointPath: path.dirname(packageJsonPath),\n            propertiesToConsider: this.propertiesToConsider,\n            compileAllFormats: false,\n            createNewEntryPointFormats: true,\n            logger: this._logger,\n            tsConfigPath: this.tsConfigPath,\n        });\n        (0, benchmark_1.timeEnd)(timeLabel);\n        // Purge this file from cache, since NGCC add new mainFields. Ex: module_ivy_ngcc\n        // which are unknown in the cached file.\n        (_b = (_a = this.inputFileSystem).purge) === null || _b === void 0 ? void 0 : _b.call(_a, packageJsonPath);\n        this._processedModules.add(resolvedFileName);\n    }\n    invalidate(fileName) {\n        this._processedModules.delete(fileName);\n    }\n    /**\n     * Try resolve a package.json file from the resolved .d.ts file.\n     */\n    tryResolvePackage(moduleName, resolvedFileName) {\n        try {\n            const resolvedPath = this.resolver.resolveSync({}, resolvedFileName, `${moduleName}/package.json`);\n            return resolvedPath || undefined;\n        }\n        catch {\n            // Ex: @angular/compiler/src/i18n/i18n_ast/package.json\n            // or local libraries which don't reside in node_modules\n            const packageJsonPath = path.resolve(resolvedFileName, '../package.json');\n            return (0, fs_1.existsSync)(packageJsonPath) ? packageJsonPath : undefined;\n        }\n    }\n    findNodeModulesDirectory(startPoint) {\n        let current = startPoint;\n        while (path.dirname(current) !== current) {\n            const nodePath = path.join(current, 'node_modules');\n            if ((0, fs_1.existsSync)(nodePath)) {\n                return nodePath;\n            }\n            current = path.dirname(current);\n        }\n        return null;\n    }\n    findPackageManagerLockFile(projectBasePath) {\n        for (const lockFile of ['yarn.lock', 'pnpm-lock.yaml', 'package-lock.json']) {\n            const lockFilePath = path.join(projectBasePath, lockFile);\n            try {\n                return {\n                    lockFilePath,\n                    lockFileData: (0, fs_1.readFileSync)(lockFilePath),\n                };\n            }\n            catch { }\n        }\n        throw new Error('Cannot locate a package manager lock file.');\n    }\n}\nexports.NgccProcessor = NgccProcessor;\nclass NgccLogger {\n    constructor(compilationWarnings, compilationErrors, level) {\n        this.compilationWarnings = compilationWarnings;\n        this.compilationErrors = compilationErrors;\n        this.level = level;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    debug() { }\n    info(...args) {\n        // Log to stderr because it's a progress-like info message.\n        process.stderr.write(`\\n${args.join(' ')}\\n`);\n    }\n    warn(...args) {\n        this.compilationWarnings.push(args.join(' '));\n    }\n    error(...args) {\n        this.compilationErrors.push(new Error(args.join(' ')));\n    }\n}\nfunction isReadOnlyFile(fileName) {\n    try {\n        (0, fs_1.accessSync)(fileName, fs_1.constants.W_OK);\n        return false;\n    }\n    catch {\n        return true;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}