{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Registry = void 0;\nconst array_flatten_1 = __importDefault(require(\"array-flatten\"));\nconst dns_equal_1 = __importDefault(require(\"dns-equal\"));\nconst service_1 = __importDefault(require(\"./service\"));\nconst REANNOUNCE_MAX_MS = 60 * 60 * 1000;\nconst REANNOUNCE_FACTOR = 3;\nclass Registry {\n  constructor(server) {\n    this.services = [];\n    this.server = server;\n  }\n  publish(config) {\n    function start(service, registry, opts) {\n      if (service.activated) return;\n      service.activated = true;\n      registry.services.push(service);\n      if (!(service instanceof service_1.default)) return;\n      if (opts.probe) {\n        registry.probe(registry.server.mdns, service, exists => {\n          if (exists) {\n            service.stop();\n            console.log(new Error('Service name is already in use on the network'));\n            return;\n          }\n          registry.announce(registry.server, service);\n        });\n      } else {\n        registry.announce(registry.server, service);\n      }\n    }\n    function stop(service, registry, callback) {\n      if (!service.activated) return;\n      if (!(service instanceof service_1.default)) return;\n      registry.teardown(registry.server, service, callback);\n      const index = registry.services.indexOf(service);\n      if (index !== -1) registry.services.splice(index, 1);\n    }\n    const service = new service_1.default(config);\n    service.start = start.bind(null, service, this);\n    service.stop = stop.bind(null, service, this);\n    service.start({\n      probe: config.probe !== false\n    });\n    return service;\n  }\n  unpublishAll(callback) {\n    this.teardown(this.server, this.services, callback);\n    this.services = [];\n  }\n  destroy() {\n    this.services.map(service => service.destroyed = true);\n  }\n  probe(mdns, service, callback) {\n    var sent = false;\n    var retries = 0;\n    var timer;\n    const send = () => {\n      if (!service.activated || service.destroyed) return;\n      mdns.query(service.fqdn, 'ANY', function () {\n        sent = true;\n        timer = setTimeout(++retries < 3 ? send : done, 250);\n        timer.unref();\n      });\n    };\n    const onresponse = packet => {\n      if (!sent) return;\n      if (packet.answers.some(matchRR) || packet.additionals.some(matchRR)) done(true);\n    };\n    const matchRR = rr => {\n      return (0, dns_equal_1.default)(rr.name, service.fqdn);\n    };\n    const done = exists => {\n      mdns.removeListener('response', onresponse);\n      clearTimeout(timer);\n      callback(!!exists);\n    };\n    mdns.on('response', onresponse);\n    setTimeout(send, Math.random() * 250);\n  }\n  announce(server, service) {\n    var delay = 1000;\n    var packet = service.records();\n    server.register(packet);\n    const broadcast = () => {\n      if (!service.activated || service.destroyed) return;\n      server.mdns.respond(packet, function () {\n        if (!service.published) {\n          service.activated = true;\n          service.published = true;\n          service.emit('up');\n        }\n        delay = delay * REANNOUNCE_FACTOR;\n        if (delay < REANNOUNCE_MAX_MS && !service.destroyed) {\n          setTimeout(broadcast, delay).unref();\n        }\n      });\n    };\n    broadcast();\n  }\n  teardown(server, services, callback) {\n    if (!Array.isArray(services)) services = [services];\n    services = services.filter(service => service.activated);\n    var records = array_flatten_1.default.depth(services.map(function (service) {\n      service.activated = false;\n      var records = service.records();\n      records.forEach(record => {\n        record.ttl = 0;\n      });\n      return records;\n    }), 1);\n    if (records.length === 0) return callback && callback();\n    server.unregister(records);\n    server.mdns.respond(records, function () {\n      services.forEach(function (service) {\n        service.published = false;\n      });\n      if (typeof callback === \"function\") {\n        callback.apply(null, arguments);\n      }\n    });\n  }\n}\nexports.Registry = Registry;\nexports.default = Registry;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Registry","array_flatten_1","require","dns_equal_1","service_1","REANNOUNCE_MAX_MS","REANNOUNCE_FACTOR","constructor","server","services","publish","config","start","service","registry","opts","activated","push","default","probe","mdns","exists","stop","console","log","Error","announce","callback","teardown","index","indexOf","splice","bind","unpublishAll","destroy","map","destroyed","sent","retries","timer","send","query","fqdn","setTimeout","done","unref","onresponse","packet","answers","some","matchRR","additionals","rr","name","removeListener","clearTimeout","on","Math","random","delay","records","register","broadcast","respond","published","emit","Array","isArray","filter","depth","forEach","record","ttl","length","unregister","apply","arguments"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/bonjour-service/dist/lib/registry.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Registry = void 0;\nconst array_flatten_1 = __importDefault(require(\"array-flatten\"));\nconst dns_equal_1 = __importDefault(require(\"dns-equal\"));\nconst service_1 = __importDefault(require(\"./service\"));\nconst REANNOUNCE_MAX_MS = 60 * 60 * 1000;\nconst REANNOUNCE_FACTOR = 3;\nclass Registry {\n    constructor(server) {\n        this.services = [];\n        this.server = server;\n    }\n    publish(config) {\n        function start(service, registry, opts) {\n            if (service.activated)\n                return;\n            service.activated = true;\n            registry.services.push(service);\n            if (!(service instanceof service_1.default))\n                return;\n            if (opts.probe) {\n                registry.probe(registry.server.mdns, service, (exists) => {\n                    if (exists) {\n                        service.stop();\n                        console.log(new Error('Service name is already in use on the network'));\n                        return;\n                    }\n                    registry.announce(registry.server, service);\n                });\n            }\n            else {\n                registry.announce(registry.server, service);\n            }\n        }\n        function stop(service, registry, callback) {\n            if (!service.activated)\n                return;\n            if (!(service instanceof service_1.default))\n                return;\n            registry.teardown(registry.server, service, callback);\n            const index = registry.services.indexOf(service);\n            if (index !== -1)\n                registry.services.splice(index, 1);\n        }\n        const service = new service_1.default(config);\n        service.start = start.bind(null, service, this);\n        service.stop = stop.bind(null, service, this);\n        service.start({ probe: config.probe !== false });\n        return service;\n    }\n    unpublishAll(callback) {\n        this.teardown(this.server, this.services, callback);\n        this.services = [];\n    }\n    destroy() {\n        this.services.map(service => service.destroyed = true);\n    }\n    probe(mdns, service, callback) {\n        var sent = false;\n        var retries = 0;\n        var timer;\n        const send = () => {\n            if (!service.activated || service.destroyed)\n                return;\n            mdns.query(service.fqdn, 'ANY', function () {\n                sent = true;\n                timer = setTimeout(++retries < 3 ? send : done, 250);\n                timer.unref();\n            });\n        };\n        const onresponse = (packet) => {\n            if (!sent)\n                return;\n            if (packet.answers.some(matchRR) || packet.additionals.some(matchRR))\n                done(true);\n        };\n        const matchRR = (rr) => {\n            return (0, dns_equal_1.default)(rr.name, service.fqdn);\n        };\n        const done = (exists) => {\n            mdns.removeListener('response', onresponse);\n            clearTimeout(timer);\n            callback(!!exists);\n        };\n        mdns.on('response', onresponse);\n        setTimeout(send, Math.random() * 250);\n    }\n    announce(server, service) {\n        var delay = 1000;\n        var packet = service.records();\n        server.register(packet);\n        const broadcast = () => {\n            if (!service.activated || service.destroyed)\n                return;\n            server.mdns.respond(packet, function () {\n                if (!service.published) {\n                    service.activated = true;\n                    service.published = true;\n                    service.emit('up');\n                }\n                delay = delay * REANNOUNCE_FACTOR;\n                if (delay < REANNOUNCE_MAX_MS && !service.destroyed) {\n                    setTimeout(broadcast, delay).unref();\n                }\n            });\n        };\n        broadcast();\n    }\n    teardown(server, services, callback) {\n        if (!Array.isArray(services))\n            services = [services];\n        services = services.filter((service) => service.activated);\n        var records = array_flatten_1.default.depth(services.map(function (service) {\n            service.activated = false;\n            var records = service.records();\n            records.forEach((record) => {\n                record.ttl = 0;\n            });\n            return records;\n        }), 1);\n        if (records.length === 0)\n            return callback && callback();\n        server.unregister(records);\n        server.mdns.respond(records, function () {\n            services.forEach(function (service) {\n                service.published = false;\n            });\n            if (typeof callback === \"function\") {\n                callback.apply(null, arguments);\n            }\n        });\n    }\n}\nexports.Registry = Registry;\nexports.default = Registry;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}