{"ast":null,"code":"import { HttpEventType, HttpResponse } from '@angular/common/http';\nexport class UploadImagesComponent {\n  constructor(uploadService) {\n    this.uploadService = uploadService;\n    this.selectedFileNames = [];\n    this.progressInfos = [];\n    this.message = [];\n    this.previews = [];\n  }\n  ngOnInit() {\n    throw new Error('Method not implemented.');\n  }\n  selectFiles(event) {\n    this.message = [];\n    this.progressInfos = [];\n    this.selectedFileNames = [];\n    this.selectedFiles = event.target.files;\n    this.previews = [];\n    if (this.selectedFiles && this.selectedFiles[0]) {\n      const numberOfFiles = this.selectedFiles.length;\n      for (let i = 0; i < numberOfFiles; i++) {\n        const reader = new FileReader();\n        reader.onload = e => {\n          console.log(e.target.result);\n          this.previews.push(e.target.result);\n        };\n        reader.readAsDataURL(this.selectedFiles[i]);\n        this.selectedFileNames.push(this.selectedFiles[i].name);\n      }\n    }\n  }\n  uploadFiles() {\n    this.message = [];\n    if (this.selectedFiles) {\n      for (let i = 0; i < this.selectedFiles.length; i++) {\n        this.upload(i, this.selectedFiles[i]);\n      }\n    }\n  }\n  upload(idx, file) {\n    this.progressInfos[idx] = {\n      value: 0,\n      fileName: file.name\n    };\n    if (file) {\n      this.uploadService.upload(file).subscribe(event => {\n        if (event.type === HttpEventType.UploadProgress) {\n          this.progressInfos[idx].value = Math.round(100 * event.loaded / event.total);\n        } else if (event instanceof HttpResponse) {\n          const msg = file.name + \": Successful!\";\n          this.message.push(msg);\n          this.imageInfos = this.uploadService.getFiles();\n        }\n      }, err => {\n        this.progressInfos[idx].value = 0;\n        let msg = file.name + \": Failed!\";\n        if (err.error && err.error.message) {\n          msg += \" \" + err.error.message;\n        }\n        this.message.push(msg);\n      });\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["HttpEventType","HttpResponse","UploadImagesComponent","constructor","uploadService","ngOnInit","Error","selectFiles","event","message","progressInfos","selectedFileNames","selectedFiles","target","files","previews","numberOfFiles","length","i","reader","FileReader","onload","e","console","log","result","push","readAsDataURL","name","uploadFiles","upload","idx","file","value","fileName","subscribe","type","UploadProgress","Math","round","loaded","total","msg","imageInfos","getFiles","err","error"],"sourceRoot":"","sources":["C:\\Users\\Nawaz\\Downloads\\mean-stack-authentication-authorization-master\\mean-stack-authentication-authorization-master\\frontend\\src\\app\\components\\components\\upload-images\\upload-images.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpEventType, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { FileUploadService } from 'src/app/_services/file-upload.service';\n\nexport class UploadImagesComponent implements OnInit {\n\n  selectedFiles?: FileList;\n  selectedFileNames: string[] = [];\n\n  progressInfos: any[] = [];\n  message: string[] = [];\n\n  previews: string[] = [];\n  imageInfos?: Observable<any>;\n\n\n\n  constructor(private uploadService: FileUploadService) { }\n  ngOnInit(): void {\n    throw new Error('Method not implemented.');\n  }\n\n\n\n  selectFiles(event: any): void {\n    this.message = [];\n    this.progressInfos = [];\n    this.selectedFileNames = [];\n    this.selectedFiles = event.target.files;\n\n    this.previews = [];\n    if (this.selectedFiles && this.selectedFiles[0]) {\n      const numberOfFiles = this.selectedFiles.length;\n      for (let i = 0; i < numberOfFiles; i++) {\n        const reader = new FileReader();\n\n        reader.onload = (e: any) => {\n          console.log(e.target.result);\n          this.previews.push(e.target.result);\n        };\n\n        reader.readAsDataURL(this.selectedFiles[i]);\n\n        this.selectedFileNames.push(this.selectedFiles[i].name);\n      }\n    }\n  }\n\n  uploadFiles(): void {\n    this.message = [];\n\n    if (this.selectedFiles) {\n      for (let i = 0; i < this.selectedFiles.length; i++) {\n        this.upload(i, this.selectedFiles[i]);\n      }\n    }\n  }\n  upload(idx: number, file: File): void {\n    this.progressInfos[idx] = { value: 0, fileName: file.name };\n\n    if (file) {\n      this.uploadService.upload(file).subscribe(\n        (event: any) => {\n          if (event.type === HttpEventType.UploadProgress) {\n            this.progressInfos[idx].value = Math.round(\n              (100 * event.loaded) / event.total\n            );\n          } else if (event instanceof HttpResponse) {\n            const msg = file.name + \": Successful!\";\n            this.message.push(msg);\n            this.imageInfos = this.uploadService.getFiles();\n          }\n        },\n        (err: any) => {\n          this.progressInfos[idx].value = 0;\n          let msg = file.name + \": Failed!\";\n\n          if (err.error && err.error.message) {\n            msg += \" \" + err.error.message;\n          }\n\n          this.message.push(msg);\n        }\n      );\n    }\n  }\n\n\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}