{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTranslationLoader = void 0;\nconst crypto_1 = require(\"crypto\");\nconst fs = __importStar(require(\"fs\"));\nconst load_esm_1 = require(\"./load-esm\");\nfunction createTranslationLoader() {\n  return _createTranslationLoader.apply(this, arguments);\n}\nfunction _createTranslationLoader() {\n  _createTranslationLoader = _asyncToGenerator(function* () {\n    const {\n      parsers,\n      diagnostics\n    } = yield importParsers();\n    return path => {\n      const content = fs.readFileSync(path, 'utf8');\n      const unusedParsers = new Map();\n      for (const [format, parser] of Object.entries(parsers)) {\n        const analysis = parser.analyze(path, content);\n        if (analysis.canParse) {\n          // Types don't overlap here so we need to use any.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const {\n            locale,\n            translations\n          } = parser.parse(path, content, analysis.hint);\n          const integrity = 'sha256-' + (0, crypto_1.createHash)('sha256').update(content).digest('base64');\n          return {\n            format,\n            locale,\n            translations,\n            diagnostics,\n            integrity\n          };\n        } else {\n          unusedParsers.set(parser, analysis);\n        }\n      }\n      const messages = [];\n      for (const [parser, analysis] of unusedParsers.entries()) {\n        messages.push(analysis.diagnostics.formatDiagnostics(`*** ${parser.constructor.name} ***`));\n      }\n      throw new Error(`Unsupported translation file format in ${path}. The following parsers were tried:\\n` + messages.join('\\n'));\n    };\n  });\n  return _createTranslationLoader.apply(this, arguments);\n}\nexports.createTranslationLoader = createTranslationLoader;\nfunction importParsers() {\n  return _importParsers.apply(this, arguments);\n}\nfunction _importParsers() {\n  _importParsers = _asyncToGenerator(function* () {\n    try {\n      // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n      // Once TypeScript provides support for keeping the dynamic import this workaround can be\n      // changed to a direct dynamic import.\n      const {\n        Diagnostics,\n        ArbTranslationParser,\n        SimpleJsonTranslationParser,\n        Xliff1TranslationParser,\n        Xliff2TranslationParser,\n        XtbTranslationParser\n      } = yield (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n      const diagnostics = new Diagnostics();\n      const parsers = {\n        arb: new ArbTranslationParser(),\n        json: new SimpleJsonTranslationParser(),\n        xlf: new Xliff1TranslationParser(),\n        xlf2: new Xliff2TranslationParser(),\n        // The name ('xmb') needs to match the AOT compiler option\n        xmb: new XtbTranslationParser()\n      };\n      return {\n        parsers,\n        diagnostics\n      };\n    } catch {\n      throw new Error(`Unable to load translation file parsers. Please ensure '@angular/localize' is installed.`);\n    }\n  });\n  return _importParsers.apply(this, arguments);\n}","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","createTranslationLoader","crypto_1","require","fs","load_esm_1","parsers","diagnostics","importParsers","path","content","readFileSync","unusedParsers","Map","format","parser","entries","analysis","analyze","canParse","locale","translations","parse","hint","integrity","createHash","update","digest","set","messages","push","formatDiagnostics","constructor","name","Error","join","Diagnostics","ArbTranslationParser","SimpleJsonTranslationParser","Xliff1TranslationParser","Xliff2TranslationParser","XtbTranslationParser","loadEsmModule","arb","json","xlf","xlf2","xmb"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@angular-devkit/build-angular/src/utils/load-translations.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createTranslationLoader = void 0;\nconst crypto_1 = require(\"crypto\");\nconst fs = __importStar(require(\"fs\"));\nconst load_esm_1 = require(\"./load-esm\");\nasync function createTranslationLoader() {\n    const { parsers, diagnostics } = await importParsers();\n    return (path) => {\n        const content = fs.readFileSync(path, 'utf8');\n        const unusedParsers = new Map();\n        for (const [format, parser] of Object.entries(parsers)) {\n            const analysis = parser.analyze(path, content);\n            if (analysis.canParse) {\n                // Types don't overlap here so we need to use any.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const { locale, translations } = parser.parse(path, content, analysis.hint);\n                const integrity = 'sha256-' + (0, crypto_1.createHash)('sha256').update(content).digest('base64');\n                return { format, locale, translations, diagnostics, integrity };\n            }\n            else {\n                unusedParsers.set(parser, analysis);\n            }\n        }\n        const messages = [];\n        for (const [parser, analysis] of unusedParsers.entries()) {\n            messages.push(analysis.diagnostics.formatDiagnostics(`*** ${parser.constructor.name} ***`));\n        }\n        throw new Error(`Unsupported translation file format in ${path}. The following parsers were tried:\\n` +\n            messages.join('\\n'));\n    };\n}\nexports.createTranslationLoader = createTranslationLoader;\nasync function importParsers() {\n    try {\n        // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n        // Once TypeScript provides support for keeping the dynamic import this workaround can be\n        // changed to a direct dynamic import.\n        const { Diagnostics, ArbTranslationParser, SimpleJsonTranslationParser, Xliff1TranslationParser, Xliff2TranslationParser, XtbTranslationParser, } = await (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n        const diagnostics = new Diagnostics();\n        const parsers = {\n            arb: new ArbTranslationParser(),\n            json: new SimpleJsonTranslationParser(),\n            xlf: new Xliff1TranslationParser(),\n            xlf2: new Xliff2TranslationParser(),\n            // The name ('xmb') needs to match the AOT compiler option\n            xmb: new XtbTranslationParser(),\n        };\n        return { parsers, diagnostics };\n    }\n    catch {\n        throw new Error(`Unable to load translation file parsers. Please ensure '@angular/localize' is installed.`);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}