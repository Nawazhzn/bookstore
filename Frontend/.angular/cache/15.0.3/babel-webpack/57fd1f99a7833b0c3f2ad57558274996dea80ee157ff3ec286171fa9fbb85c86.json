{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\nconst array_flatten_1 = __importDefault(require(\"array-flatten\"));\nconst es6_1 = __importDefault(require(\"fast-deep-equal/es6\"));\nconst multicast_dns_1 = __importDefault(require(\"multicast-dns\"));\nconst dns_equal_1 = __importDefault(require(\"dns-equal\"));\nclass Server {\n  constructor(opts, errorCallback) {\n    this.registry = {};\n    this.mdns = (0, multicast_dns_1.default)(opts);\n    this.mdns.setMaxListeners(0);\n    this.mdns.on('query', this.respondToQuery.bind(this));\n    this.errorCallback = errorCallback !== null && errorCallback !== void 0 ? errorCallback : function (err) {\n      throw err;\n    };\n  }\n  register(records) {\n    const shouldRegister = record => {\n      var subRegistry = this.registry[record.type];\n      if (!subRegistry) {\n        subRegistry = this.registry[record.type] = [];\n      } else if (subRegistry.some(this.isDuplicateRecord(record))) {\n        return;\n      }\n      subRegistry.push(record);\n    };\n    if (Array.isArray(records)) {\n      records.forEach(shouldRegister);\n    } else {\n      shouldRegister(records);\n    }\n  }\n  unregister(records) {\n    const shouldUnregister = record => {\n      let type = record.type;\n      if (!(type in this.registry)) {\n        return;\n      }\n      this.registry[type] = this.registry[type].filter(i => i.name !== record.name);\n    };\n    if (Array.isArray(records)) {\n      records.forEach(shouldUnregister);\n    } else {\n      shouldUnregister(records);\n    }\n  }\n  respondToQuery(query) {\n    let self = this;\n    query.questions.forEach(question => {\n      var type = question.type;\n      var name = question.name;\n      var answers = type === 'ANY' ? array_flatten_1.default.depth(Object.keys(self.registry).map(self.recordsFor.bind(self, name)), 1) : self.recordsFor(name, type);\n      if (answers.length === 0) return;\n      var additionals = [];\n      if (type !== 'ANY') {\n        answers.forEach(answer => {\n          if (answer.type !== 'PTR') return;\n          additionals = additionals.concat(self.recordsFor(answer.data, 'SRV')).concat(self.recordsFor(answer.data, 'TXT'));\n        });\n        additionals.filter(function (record) {\n          return record.type === 'SRV';\n        }).map(function (record) {\n          return record.data.target;\n        }).filter(this.unique()).forEach(function (target) {\n          additionals = additionals.concat(self.recordsFor(target, 'A')).concat(self.recordsFor(target, 'AAAA'));\n        });\n      }\n      self.mdns.respond({\n        answers: answers,\n        additionals: additionals\n      }, err => {\n        if (err) {\n          this.errorCallback(err);\n        }\n      });\n    });\n  }\n  recordsFor(name, type) {\n    if (!(type in this.registry)) {\n      return [];\n    }\n    return this.registry[type].filter(record => {\n      var _name = ~name.indexOf('.') ? record.name : record.name.split('.')[0];\n      return (0, dns_equal_1.default)(_name, name);\n    });\n  }\n  isDuplicateRecord(a) {\n    return b => {\n      return a.type === b.type && a.name === b.name && (0, es6_1.default)(a.data, b.data);\n    };\n  }\n  unique() {\n    var set = [];\n    return obj => {\n      if (~set.indexOf(obj)) return false;\n      set.push(obj);\n      return true;\n    };\n  }\n}\nexports.Server = Server;\nexports.default = Server;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Server","array_flatten_1","require","es6_1","multicast_dns_1","dns_equal_1","constructor","opts","errorCallback","registry","mdns","default","setMaxListeners","on","respondToQuery","bind","err","register","records","shouldRegister","record","subRegistry","type","some","isDuplicateRecord","push","Array","isArray","forEach","unregister","shouldUnregister","filter","i","name","query","self","questions","question","answers","depth","keys","map","recordsFor","length","additionals","answer","concat","data","target","unique","respond","_name","indexOf","split","a","b","set","obj"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/bonjour-service/dist/lib/mdns-server.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Server = void 0;\nconst array_flatten_1 = __importDefault(require(\"array-flatten\"));\nconst es6_1 = __importDefault(require(\"fast-deep-equal/es6\"));\nconst multicast_dns_1 = __importDefault(require(\"multicast-dns\"));\nconst dns_equal_1 = __importDefault(require(\"dns-equal\"));\nclass Server {\n    constructor(opts, errorCallback) {\n        this.registry = {};\n        this.mdns = (0, multicast_dns_1.default)(opts);\n        this.mdns.setMaxListeners(0);\n        this.mdns.on('query', this.respondToQuery.bind(this));\n        this.errorCallback = errorCallback !== null && errorCallback !== void 0 ? errorCallback : function (err) { throw err; };\n    }\n    register(records) {\n        const shouldRegister = (record) => {\n            var subRegistry = this.registry[record.type];\n            if (!subRegistry) {\n                subRegistry = this.registry[record.type] = [];\n            }\n            else if (subRegistry.some(this.isDuplicateRecord(record))) {\n                return;\n            }\n            subRegistry.push(record);\n        };\n        if (Array.isArray(records)) {\n            records.forEach(shouldRegister);\n        }\n        else {\n            shouldRegister(records);\n        }\n    }\n    unregister(records) {\n        const shouldUnregister = (record) => {\n            let type = record.type;\n            if (!(type in this.registry)) {\n                return;\n            }\n            this.registry[type] = this.registry[type].filter((i) => i.name !== record.name);\n        };\n        if (Array.isArray(records)) {\n            records.forEach(shouldUnregister);\n        }\n        else {\n            shouldUnregister(records);\n        }\n    }\n    respondToQuery(query) {\n        let self = this;\n        query.questions.forEach((question) => {\n            var type = question.type;\n            var name = question.name;\n            var answers = type === 'ANY'\n                ? array_flatten_1.default.depth(Object.keys(self.registry).map(self.recordsFor.bind(self, name)), 1)\n                : self.recordsFor(name, type);\n            if (answers.length === 0)\n                return;\n            var additionals = [];\n            if (type !== 'ANY') {\n                answers.forEach((answer) => {\n                    if (answer.type !== 'PTR')\n                        return;\n                    additionals = additionals\n                        .concat(self.recordsFor(answer.data, 'SRV'))\n                        .concat(self.recordsFor(answer.data, 'TXT'));\n                });\n                additionals\n                    .filter(function (record) {\n                    return record.type === 'SRV';\n                })\n                    .map(function (record) {\n                    return record.data.target;\n                })\n                    .filter(this.unique())\n                    .forEach(function (target) {\n                    additionals = additionals\n                        .concat(self.recordsFor(target, 'A'))\n                        .concat(self.recordsFor(target, 'AAAA'));\n                });\n            }\n            self.mdns.respond({ answers: answers, additionals: additionals }, (err) => {\n                if (err) {\n                    this.errorCallback(err);\n                }\n            });\n        });\n    }\n    recordsFor(name, type) {\n        if (!(type in this.registry)) {\n            return [];\n        }\n        return this.registry[type].filter((record) => {\n            var _name = ~name.indexOf('.') ? record.name : record.name.split('.')[0];\n            return (0, dns_equal_1.default)(_name, name);\n        });\n    }\n    isDuplicateRecord(a) {\n        return (b) => {\n            return a.type === b.type &&\n                a.name === b.name &&\n                (0, es6_1.default)(a.data, b.data);\n        };\n    }\n    unique() {\n        var set = [];\n        return (obj) => {\n            if (~set.indexOf(obj))\n                return false;\n            set.push(obj);\n            return true;\n        };\n    }\n}\nexports.Server = Server;\nexports.default = Server;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}