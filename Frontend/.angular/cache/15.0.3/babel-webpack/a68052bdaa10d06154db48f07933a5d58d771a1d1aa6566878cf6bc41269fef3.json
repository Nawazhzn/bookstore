{"ast":null,"code":"\"use strict\";\n\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n\n/** @typedef {import(\"terser\").FormatOptions} TerserFormatOptions */\n\n/** @typedef {import(\"terser\").MinifyOptions} TerserOptions */\n\n/** @typedef {import(\"terser\").CompressOptions} TerserCompressOptions */\n\n/** @typedef {import(\"terser\").ECMA} TerserECMA */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsOptions} ExtractCommentsOptions */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsFunction} ExtractCommentsFunction */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsCondition} ExtractCommentsCondition */\n\n/** @typedef {import(\"./index.js\").Input} Input */\n\n/** @typedef {import(\"./index.js\").MinimizedResult} MinimizedResult */\n\n/** @typedef {import(\"./index.js\").PredefinedOptions} PredefinedOptions */\n\n/** @typedef {import(\"./index.js\").CustomOptions} CustomOptions */\n\n/**\n * @typedef {Array<string>} ExtractedComments\n */\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst notSettled = Symbol(`not-settled`);\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\n\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n      if (done) {\n        const isLast = !result.includes(notSettled);\n        if (isLast) resolve( /** @type{T[]} **/\n        result);\n        return;\n      }\n      const [index, task] = value;\n      /**\n       * @param {T} x\n       */\n\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n      task().then(onFulfilled, reject);\n    };\n    Array(limit).fill(0).forEach(next);\n  });\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\nfunction terserMinify(_x, _x2, _x3, _x4) {\n  return _terserMinify.apply(this, arguments);\n}\n/**\n * @returns {string | undefined}\n */\nfunction _terserMinify() {\n  _terserMinify = _asyncToGenerator(function* (input, sourceMap, minimizerOptions, extractComments) {\n    /**\n     * @param {any} value\n     * @returns {boolean}\n     */\n    const isObject = value => {\n      const type = typeof value;\n      return value != null && (type === \"object\" || type === \"function\");\n    };\n    /**\n     * @param {TerserOptions & { sourceMap: undefined } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })} terserOptions\n     * @param {ExtractedComments} extractedComments\n     * @returns {ExtractCommentsFunction}\n     */\n\n    const buildComments = (terserOptions, extractedComments) => {\n      /** @type {{ [index: string]: ExtractCommentsCondition }} */\n      const condition = {};\n      let comments;\n      if (terserOptions.format) {\n        ({\n          comments\n        } = terserOptions.format);\n      } else if (terserOptions.output) {\n        ({\n          comments\n        } = terserOptions.output);\n      }\n      condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n      if (typeof extractComments === \"boolean\" && extractComments) {\n        condition.extract = \"some\";\n      } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n        condition.extract = extractComments;\n      } else if (typeof extractComments === \"function\") {\n        condition.extract = extractComments;\n      } else if (extractComments && isObject(extractComments)) {\n        condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n      } else {\n        // No extract\n        // Preserve using \"commentsOpts\" or \"some\"\n        condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n        condition.extract = false;\n      } // Ensure that both conditions are functions\n\n      [\"preserve\", \"extract\"].forEach(key => {\n        /** @type {undefined | string} */\n        let regexStr;\n        /** @type {undefined | RegExp} */\n\n        let regex;\n        switch (typeof condition[key]) {\n          case \"boolean\":\n            condition[key] = condition[key] ? () => true : () => false;\n            break;\n          case \"function\":\n            break;\n          case \"string\":\n            if (condition[key] === \"all\") {\n              condition[key] = () => true;\n              break;\n            }\n            if (condition[key] === \"some\") {\n              condition[key] = /** @type {ExtractCommentsFunction} */\n              (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n              break;\n            }\n            regexStr = /** @type {string} */\n            condition[key];\n            condition[key] = /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => new RegExp( /** @type {string} */\n            regexStr).test(comment.value);\n            break;\n          default:\n            regex = /** @type {RegExp} */\n            condition[key];\n            condition[key] = /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => /** @type {RegExp} */\n            regex.test(comment.value);\n        }\n      }); // Redefine the comments function to extract and preserve\n      // comments according to the two conditions\n\n      return (astNode, comment) => {\n        if ( /** @type {{ extract: ExtractCommentsFunction }} */\n        condition.extract(astNode, comment)) {\n          const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`; // Don't include duplicate comments\n\n          if (!extractedComments.includes(commentText)) {\n            extractedComments.push(commentText);\n          }\n        }\n        return (/** @type {{ preserve: ExtractCommentsFunction }} */\n          condition.preserve(astNode, comment)\n        );\n      };\n    };\n    /**\n     * @param {PredefinedOptions & TerserOptions} [terserOptions={}]\n     * @returns {TerserOptions & { sourceMap: undefined } & { compress: TerserCompressOptions } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })}\n     */\n\n    const buildTerserOptions = (terserOptions = {}) => {\n      // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n      return {\n        ...terserOptions,\n        compress: typeof terserOptions.compress === \"boolean\" ? terserOptions.compress ? {} : false : {\n          ...terserOptions.compress\n        },\n        // ecma: terserOptions.ecma,\n        // ie8: terserOptions.ie8,\n        // keep_classnames: terserOptions.keep_classnames,\n        // keep_fnames: terserOptions.keep_fnames,\n        mangle: terserOptions.mangle == null ? true : typeof terserOptions.mangle === \"boolean\" ? terserOptions.mangle : {\n          ...terserOptions.mangle\n        },\n        // module: terserOptions.module,\n        // nameCache: { ...terserOptions.toplevel },\n        // the `output` option is deprecated\n        ...(terserOptions.format ? {\n          format: {\n            beautify: false,\n            ...terserOptions.format\n          }\n        } : {\n          output: {\n            beautify: false,\n            ...terserOptions.output\n          }\n        }),\n        parse: {\n          ...terserOptions.parse\n        },\n        // safari10: terserOptions.safari10,\n        // Ignoring sourceMap from options\n        // eslint-disable-next-line no-undefined\n        sourceMap: undefined // toplevel: terserOptions.toplevel\n      };\n    }; // eslint-disable-next-line global-require\n\n    const {\n      minify\n    } = require(\"terser\"); // Copy `terser` options\n\n    const terserOptions = buildTerserOptions(minimizerOptions); // Let terser generate a SourceMap\n\n    if (sourceMap) {\n      // @ts-ignore\n      terserOptions.sourceMap = {\n        asObject: true\n      };\n    }\n    /** @type {ExtractedComments} */\n\n    const extractedComments = [];\n    if (terserOptions.output) {\n      terserOptions.output.comments = buildComments(terserOptions, extractedComments);\n    } else if (terserOptions.format) {\n      terserOptions.format.comments = buildComments(terserOptions, extractedComments);\n    }\n    if (terserOptions.compress) {\n      // More optimizations\n      if (typeof terserOptions.compress.ecma === \"undefined\") {\n        terserOptions.compress.ecma = terserOptions.ecma;\n      } // https://github.com/webpack/webpack/issues/16135\n\n      if (terserOptions.ecma === 5 && typeof terserOptions.compress.arrows === \"undefined\") {\n        terserOptions.compress.arrows = false;\n      }\n    }\n    const [[filename, code]] = Object.entries(input);\n    const result = yield minify({\n      [filename]: code\n    }, terserOptions);\n    return {\n      code: /** @type {string} **/\n      result.code,\n      // @ts-ignore\n      // eslint-disable-next-line no-undefined\n      map: result.map ? /** @type {SourceMapInput} **/\n      result.map : undefined,\n      extractedComments\n    };\n  });\n  return _terserMinify.apply(this, arguments);\n}\nterserMinify.getMinimizerVersion = () => {\n  let packageJson;\n  try {\n    // eslint-disable-next-line global-require\n    packageJson = require(\"terser/package.json\");\n  } catch (error) {// Ignore\n  }\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\nfunction uglifyJsMinify(_x5, _x6, _x7, _x8) {\n  return _uglifyJsMinify.apply(this, arguments);\n}\n/**\n * @returns {string | undefined}\n */\nfunction _uglifyJsMinify() {\n  _uglifyJsMinify = _asyncToGenerator(function* (input, sourceMap, minimizerOptions, extractComments) {\n    /**\n     * @param {any} value\n     * @returns {boolean}\n     */\n    const isObject = value => {\n      const type = typeof value;\n      return value != null && (type === \"object\" || type === \"function\");\n    };\n    /**\n     * @param {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}} uglifyJsOptions\n     * @param {ExtractedComments} extractedComments\n     * @returns {ExtractCommentsFunction}\n     */\n\n    const buildComments = (uglifyJsOptions, extractedComments) => {\n      /** @type {{ [index: string]: ExtractCommentsCondition }} */\n      const condition = {};\n      const {\n        comments\n      } = uglifyJsOptions.output;\n      condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n      if (typeof extractComments === \"boolean\" && extractComments) {\n        condition.extract = \"some\";\n      } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n        condition.extract = extractComments;\n      } else if (typeof extractComments === \"function\") {\n        condition.extract = extractComments;\n      } else if (extractComments && isObject(extractComments)) {\n        condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n      } else {\n        // No extract\n        // Preserve using \"commentsOpts\" or \"some\"\n        condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n        condition.extract = false;\n      } // Ensure that both conditions are functions\n\n      [\"preserve\", \"extract\"].forEach(key => {\n        /** @type {undefined | string} */\n        let regexStr;\n        /** @type {undefined | RegExp} */\n\n        let regex;\n        switch (typeof condition[key]) {\n          case \"boolean\":\n            condition[key] = condition[key] ? () => true : () => false;\n            break;\n          case \"function\":\n            break;\n          case \"string\":\n            if (condition[key] === \"all\") {\n              condition[key] = () => true;\n              break;\n            }\n            if (condition[key] === \"some\") {\n              condition[key] = /** @type {ExtractCommentsFunction} */\n              (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n              break;\n            }\n            regexStr = /** @type {string} */\n            condition[key];\n            condition[key] = /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => new RegExp( /** @type {string} */\n            regexStr).test(comment.value);\n            break;\n          default:\n            regex = /** @type {RegExp} */\n            condition[key];\n            condition[key] = /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => /** @type {RegExp} */\n            regex.test(comment.value);\n        }\n      }); // Redefine the comments function to extract and preserve\n      // comments according to the two conditions\n\n      return (astNode, comment) => {\n        if ( /** @type {{ extract: ExtractCommentsFunction }} */\n        condition.extract(astNode, comment)) {\n          const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`; // Don't include duplicate comments\n\n          if (!extractedComments.includes(commentText)) {\n            extractedComments.push(commentText);\n          }\n        }\n        return (/** @type {{ preserve: ExtractCommentsFunction }} */\n          condition.preserve(astNode, comment)\n        );\n      };\n    };\n    /**\n     * @param {PredefinedOptions & import(\"uglify-js\").MinifyOptions} [uglifyJsOptions={}]\n     * @returns {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}}\n     */\n\n    const buildUglifyJsOptions = (uglifyJsOptions = {}) => {\n      // eslint-disable-next-line no-param-reassign\n      delete minimizerOptions.ecma; // eslint-disable-next-line no-param-reassign\n\n      delete minimizerOptions.module; // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n\n      return {\n        ...uglifyJsOptions,\n        // warnings: uglifyJsOptions.warnings,\n        parse: {\n          ...uglifyJsOptions.parse\n        },\n        compress: typeof uglifyJsOptions.compress === \"boolean\" ? uglifyJsOptions.compress : {\n          ...uglifyJsOptions.compress\n        },\n        mangle: uglifyJsOptions.mangle == null ? true : typeof uglifyJsOptions.mangle === \"boolean\" ? uglifyJsOptions.mangle : {\n          ...uglifyJsOptions.mangle\n        },\n        output: {\n          beautify: false,\n          ...uglifyJsOptions.output\n        },\n        // Ignoring sourceMap from options\n        // eslint-disable-next-line no-undefined\n        sourceMap: undefined // toplevel: uglifyJsOptions.toplevel\n        // nameCache: { ...uglifyJsOptions.toplevel },\n        // ie8: uglifyJsOptions.ie8,\n        // keep_fnames: uglifyJsOptions.keep_fnames,\n      };\n    }; // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n\n    const {\n      minify\n    } = require(\"uglify-js\"); // Copy `uglify-js` options\n\n    const uglifyJsOptions = buildUglifyJsOptions(minimizerOptions); // Let terser generate a SourceMap\n\n    if (sourceMap) {\n      // @ts-ignore\n      uglifyJsOptions.sourceMap = true;\n    }\n    /** @type {ExtractedComments} */\n\n    const extractedComments = []; // @ts-ignore\n\n    uglifyJsOptions.output.comments = buildComments(uglifyJsOptions, extractedComments);\n    const [[filename, code]] = Object.entries(input);\n    const result = yield minify({\n      [filename]: code\n    }, uglifyJsOptions);\n    return {\n      code: result.code,\n      // eslint-disable-next-line no-undefined\n      map: result.map ? JSON.parse(result.map) : undefined,\n      errors: result.error ? [result.error] : [],\n      warnings: result.warnings || [],\n      extractedComments\n    };\n  });\n  return _uglifyJsMinify.apply(this, arguments);\n}\nuglifyJsMinify.getMinimizerVersion = () => {\n  let packageJson;\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"uglify-js/package.json\");\n  } catch (error) {// Ignore\n  }\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\nfunction swcMinify(_x9, _x10, _x11) {\n  return _swcMinify.apply(this, arguments);\n}\n/**\n * @returns {string | undefined}\n */\nfunction _swcMinify() {\n  _swcMinify = _asyncToGenerator(function* (input, sourceMap, minimizerOptions) {\n    /**\n     * @param {PredefinedOptions & import(\"@swc/core\").JsMinifyOptions} [swcOptions={}]\n     * @returns {import(\"@swc/core\").JsMinifyOptions & { sourceMap: undefined } & { compress: import(\"@swc/core\").TerserCompressOptions }}\n     */\n    const buildSwcOptions = (swcOptions = {}) => {\n      // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n      return {\n        ...swcOptions,\n        compress: typeof swcOptions.compress === \"boolean\" ? swcOptions.compress ? {} : false : {\n          ...swcOptions.compress\n        },\n        mangle: swcOptions.mangle == null ? true : typeof swcOptions.mangle === \"boolean\" ? swcOptions.mangle : {\n          ...swcOptions.mangle\n        },\n        // ecma: swcOptions.ecma,\n        // keep_classnames: swcOptions.keep_classnames,\n        // keep_fnames: swcOptions.keep_fnames,\n        // module: swcOptions.module,\n        // safari10: swcOptions.safari10,\n        // toplevel: swcOptions.toplevel\n        // eslint-disable-next-line no-undefined\n        sourceMap: undefined\n      };\n    }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n    const swc = require(\"@swc/core\"); // Copy `swc` options\n\n    const swcOptions = buildSwcOptions(minimizerOptions); // Let `swc` generate a SourceMap\n\n    if (sourceMap) {\n      // @ts-ignore\n      swcOptions.sourceMap = true;\n    }\n    if (swcOptions.compress) {\n      // More optimizations\n      if (typeof swcOptions.compress.ecma === \"undefined\") {\n        swcOptions.compress.ecma = swcOptions.ecma;\n      } // https://github.com/webpack/webpack/issues/16135\n\n      if (swcOptions.ecma === 5 && typeof swcOptions.compress.arrows === \"undefined\") {\n        swcOptions.compress.arrows = false;\n      }\n    }\n    const [[filename, code]] = Object.entries(input);\n    const result = yield swc.minify(code, swcOptions);\n    let map;\n    if (result.map) {\n      map = JSON.parse(result.map); // TODO workaround for swc because `filename` is not preset as in `swc` signature as for `terser`\n\n      map.sources = [filename];\n      delete map.sourcesContent;\n    }\n    return {\n      code: result.code,\n      map\n    };\n  });\n  return _swcMinify.apply(this, arguments);\n}\nswcMinify.getMinimizerVersion = () => {\n  let packageJson;\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"@swc/core/package.json\");\n  } catch (error) {// Ignore\n  }\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\nfunction esbuildMinify(_x12, _x13, _x14) {\n  return _esbuildMinify.apply(this, arguments);\n}\n/**\n * @returns {string | undefined}\n */\nfunction _esbuildMinify() {\n  _esbuildMinify = _asyncToGenerator(function* (input, sourceMap, minimizerOptions) {\n    /**\n     * @param {PredefinedOptions & import(\"esbuild\").TransformOptions} [esbuildOptions={}]\n     * @returns {import(\"esbuild\").TransformOptions}\n     */\n    const buildEsbuildOptions = (esbuildOptions = {}) => {\n      // eslint-disable-next-line no-param-reassign\n      delete esbuildOptions.ecma;\n      if (esbuildOptions.module) {\n        // eslint-disable-next-line no-param-reassign\n        esbuildOptions.format = \"esm\";\n      } // eslint-disable-next-line no-param-reassign\n\n      delete esbuildOptions.module; // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n\n      return {\n        minify: true,\n        legalComments: \"inline\",\n        ...esbuildOptions,\n        sourcemap: false\n      };\n    }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n    const esbuild = require(\"esbuild\"); // Copy `esbuild` options\n\n    const esbuildOptions = buildEsbuildOptions(minimizerOptions); // Let `esbuild` generate a SourceMap\n\n    if (sourceMap) {\n      esbuildOptions.sourcemap = true;\n      esbuildOptions.sourcesContent = false;\n    }\n    const [[filename, code]] = Object.entries(input);\n    esbuildOptions.sourcefile = filename;\n    const result = yield esbuild.transform(code, esbuildOptions);\n    return {\n      code: result.code,\n      // eslint-disable-next-line no-undefined\n      map: result.map ? JSON.parse(result.map) : undefined,\n      warnings: result.warnings.length > 0 ? result.warnings.map(item => {\n        return {\n          name: \"Warning\",\n          source: item.location && item.location.file,\n          line: item.location && item.location.line,\n          column: item.location && item.location.column,\n          plugin: item.pluginName,\n          message: `${item.text}${item.detail ? `\\nDetails:\\n${item.detail}` : \"\"}${item.notes.length > 0 ? `\\n\\nNotes:\\n${item.notes.map(note => `${note.location ? `[${note.location.file}:${note.location.line}:${note.location.column}] ` : \"\"}${note.text}${note.location ? `\\nSuggestion: ${note.location.suggestion}` : \"\"}${note.location ? `\\nLine text:\\n${note.location.lineText}\\n` : \"\"}`).join(\"\\n\")}` : \"\"}`\n        };\n      }) : []\n    };\n  });\n  return _esbuildMinify.apply(this, arguments);\n}\nesbuildMinify.getMinimizerVersion = () => {\n  let packageJson;\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"esbuild/package.json\");\n  } catch (error) {// Ignore\n  }\n  return packageJson && packageJson.version;\n};\nmodule.exports = {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n};","map":{"version":3,"names":["notSettled","Symbol","throttleAll","limit","tasks","Number","isInteger","TypeError","Array","isArray","every","task","Promise","resolve","reject","result","length","fill","entries","next","done","value","isLast","includes","index","onFulfilled","x","then","forEach","terserMinify","input","sourceMap","minimizerOptions","extractComments","isObject","type","buildComments","terserOptions","extractedComments","condition","comments","format","output","preserve","extract","RegExp","key","regexStr","regex","astNode","comment","test","commentText","push","buildTerserOptions","compress","mangle","beautify","parse","undefined","minify","require","asObject","ecma","arrows","filename","code","Object","map","getMinimizerVersion","packageJson","error","version","uglifyJsMinify","uglifyJsOptions","buildUglifyJsOptions","module","JSON","errors","warnings","swcMinify","buildSwcOptions","swcOptions","swc","sources","sourcesContent","esbuildMinify","buildEsbuildOptions","esbuildOptions","legalComments","sourcemap","esbuild","sourcefile","transform","item","name","source","location","file","line","column","plugin","pluginName","message","text","detail","notes","note","suggestion","lineText","join","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/terser-webpack-plugin/dist/utils.js"],"sourcesContent":["\"use strict\";\n\n/** @typedef {import(\"@jridgewell/trace-mapping\").SourceMapInput} SourceMapInput */\n\n/** @typedef {import(\"terser\").FormatOptions} TerserFormatOptions */\n\n/** @typedef {import(\"terser\").MinifyOptions} TerserOptions */\n\n/** @typedef {import(\"terser\").CompressOptions} TerserCompressOptions */\n\n/** @typedef {import(\"terser\").ECMA} TerserECMA */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsOptions} ExtractCommentsOptions */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsFunction} ExtractCommentsFunction */\n\n/** @typedef {import(\"./index.js\").ExtractCommentsCondition} ExtractCommentsCondition */\n\n/** @typedef {import(\"./index.js\").Input} Input */\n\n/** @typedef {import(\"./index.js\").MinimizedResult} MinimizedResult */\n\n/** @typedef {import(\"./index.js\").PredefinedOptions} PredefinedOptions */\n\n/** @typedef {import(\"./index.js\").CustomOptions} CustomOptions */\n\n/**\n * @typedef {Array<string>} ExtractedComments\n */\nconst notSettled = Symbol(`not-settled`);\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\n\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n\n      if (done) {\n        const isLast = !result.includes(notSettled);\n        if (isLast) resolve(\n        /** @type{T[]} **/\n        result);\n        return;\n      }\n\n      const [index, task] = value;\n      /**\n       * @param {T} x\n       */\n\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n\n      task().then(onFulfilled, reject);\n    };\n\n    Array(limit).fill(0).forEach(next);\n  });\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function terserMinify(input, sourceMap, minimizerOptions, extractComments) {\n  /**\n   * @param {any} value\n   * @returns {boolean}\n   */\n  const isObject = value => {\n    const type = typeof value;\n    return value != null && (type === \"object\" || type === \"function\");\n  };\n  /**\n   * @param {TerserOptions & { sourceMap: undefined } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })} terserOptions\n   * @param {ExtractedComments} extractedComments\n   * @returns {ExtractCommentsFunction}\n   */\n\n\n  const buildComments = (terserOptions, extractedComments) => {\n    /** @type {{ [index: string]: ExtractCommentsCondition }} */\n    const condition = {};\n    let comments;\n\n    if (terserOptions.format) {\n      ({\n        comments\n      } = terserOptions.format);\n    } else if (terserOptions.output) {\n      ({\n        comments\n      } = terserOptions.output);\n    }\n\n    condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n\n    if (typeof extractComments === \"boolean\" && extractComments) {\n      condition.extract = \"some\";\n    } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n      condition.extract = extractComments;\n    } else if (typeof extractComments === \"function\") {\n      condition.extract = extractComments;\n    } else if (extractComments && isObject(extractComments)) {\n      condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n    } else {\n      // No extract\n      // Preserve using \"commentsOpts\" or \"some\"\n      condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n      condition.extract = false;\n    } // Ensure that both conditions are functions\n\n\n    [\"preserve\", \"extract\"].forEach(key => {\n      /** @type {undefined | string} */\n      let regexStr;\n      /** @type {undefined | RegExp} */\n\n      let regex;\n\n      switch (typeof condition[key]) {\n        case \"boolean\":\n          condition[key] = condition[key] ? () => true : () => false;\n          break;\n\n        case \"function\":\n          break;\n\n        case \"string\":\n          if (condition[key] === \"all\") {\n            condition[key] = () => true;\n\n            break;\n          }\n\n          if (condition[key] === \"some\") {\n            condition[key] =\n            /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n\n            break;\n          }\n\n          regexStr =\n          /** @type {string} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => new RegExp(\n          /** @type {string} */\n          regexStr).test(comment.value);\n\n          break;\n\n        default:\n          regex =\n          /** @type {RegExp} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) =>\n          /** @type {RegExp} */\n          regex.test(comment.value);\n\n      }\n    }); // Redefine the comments function to extract and preserve\n    // comments according to the two conditions\n\n    return (astNode, comment) => {\n      if (\n      /** @type {{ extract: ExtractCommentsFunction }} */\n      condition.extract(astNode, comment)) {\n        const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`; // Don't include duplicate comments\n\n        if (!extractedComments.includes(commentText)) {\n          extractedComments.push(commentText);\n        }\n      }\n\n      return (\n        /** @type {{ preserve: ExtractCommentsFunction }} */\n        condition.preserve(astNode, comment)\n      );\n    };\n  };\n  /**\n   * @param {PredefinedOptions & TerserOptions} [terserOptions={}]\n   * @returns {TerserOptions & { sourceMap: undefined } & { compress: TerserCompressOptions } & ({ output: TerserFormatOptions & { beautify: boolean } } | { format: TerserFormatOptions & { beautify: boolean } })}\n   */\n\n\n  const buildTerserOptions = (terserOptions = {}) => {\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return { ...terserOptions,\n      compress: typeof terserOptions.compress === \"boolean\" ? terserOptions.compress ? {} : false : { ...terserOptions.compress\n      },\n      // ecma: terserOptions.ecma,\n      // ie8: terserOptions.ie8,\n      // keep_classnames: terserOptions.keep_classnames,\n      // keep_fnames: terserOptions.keep_fnames,\n      mangle: terserOptions.mangle == null ? true : typeof terserOptions.mangle === \"boolean\" ? terserOptions.mangle : { ...terserOptions.mangle\n      },\n      // module: terserOptions.module,\n      // nameCache: { ...terserOptions.toplevel },\n      // the `output` option is deprecated\n      ...(terserOptions.format ? {\n        format: {\n          beautify: false,\n          ...terserOptions.format\n        }\n      } : {\n        output: {\n          beautify: false,\n          ...terserOptions.output\n        }\n      }),\n      parse: { ...terserOptions.parse\n      },\n      // safari10: terserOptions.safari10,\n      // Ignoring sourceMap from options\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined // toplevel: terserOptions.toplevel\n\n    };\n  }; // eslint-disable-next-line global-require\n\n\n  const {\n    minify\n  } = require(\"terser\"); // Copy `terser` options\n\n\n  const terserOptions = buildTerserOptions(minimizerOptions); // Let terser generate a SourceMap\n\n  if (sourceMap) {\n    // @ts-ignore\n    terserOptions.sourceMap = {\n      asObject: true\n    };\n  }\n  /** @type {ExtractedComments} */\n\n\n  const extractedComments = [];\n\n  if (terserOptions.output) {\n    terserOptions.output.comments = buildComments(terserOptions, extractedComments);\n  } else if (terserOptions.format) {\n    terserOptions.format.comments = buildComments(terserOptions, extractedComments);\n  }\n\n  if (terserOptions.compress) {\n    // More optimizations\n    if (typeof terserOptions.compress.ecma === \"undefined\") {\n      terserOptions.compress.ecma = terserOptions.ecma;\n    } // https://github.com/webpack/webpack/issues/16135\n\n\n    if (terserOptions.ecma === 5 && typeof terserOptions.compress.arrows === \"undefined\") {\n      terserOptions.compress.arrows = false;\n    }\n  }\n\n  const [[filename, code]] = Object.entries(input);\n  const result = await minify({\n    [filename]: code\n  }, terserOptions);\n  return {\n    code:\n    /** @type {string} **/\n    result.code,\n    // @ts-ignore\n    // eslint-disable-next-line no-undefined\n    map: result.map ?\n    /** @type {SourceMapInput} **/\n    result.map : undefined,\n    extractedComments\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nterserMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require\n    packageJson = require(\"terser/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function uglifyJsMinify(input, sourceMap, minimizerOptions, extractComments) {\n  /**\n   * @param {any} value\n   * @returns {boolean}\n   */\n  const isObject = value => {\n    const type = typeof value;\n    return value != null && (type === \"object\" || type === \"function\");\n  };\n  /**\n   * @param {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}} uglifyJsOptions\n   * @param {ExtractedComments} extractedComments\n   * @returns {ExtractCommentsFunction}\n   */\n\n\n  const buildComments = (uglifyJsOptions, extractedComments) => {\n    /** @type {{ [index: string]: ExtractCommentsCondition }} */\n    const condition = {};\n    const {\n      comments\n    } = uglifyJsOptions.output;\n    condition.preserve = typeof comments !== \"undefined\" ? comments : false;\n\n    if (typeof extractComments === \"boolean\" && extractComments) {\n      condition.extract = \"some\";\n    } else if (typeof extractComments === \"string\" || extractComments instanceof RegExp) {\n      condition.extract = extractComments;\n    } else if (typeof extractComments === \"function\") {\n      condition.extract = extractComments;\n    } else if (extractComments && isObject(extractComments)) {\n      condition.extract = typeof extractComments.condition === \"boolean\" && extractComments.condition ? \"some\" : typeof extractComments.condition !== \"undefined\" ? extractComments.condition : \"some\";\n    } else {\n      // No extract\n      // Preserve using \"commentsOpts\" or \"some\"\n      condition.preserve = typeof comments !== \"undefined\" ? comments : \"some\";\n      condition.extract = false;\n    } // Ensure that both conditions are functions\n\n\n    [\"preserve\", \"extract\"].forEach(key => {\n      /** @type {undefined | string} */\n      let regexStr;\n      /** @type {undefined | RegExp} */\n\n      let regex;\n\n      switch (typeof condition[key]) {\n        case \"boolean\":\n          condition[key] = condition[key] ? () => true : () => false;\n          break;\n\n        case \"function\":\n          break;\n\n        case \"string\":\n          if (condition[key] === \"all\") {\n            condition[key] = () => true;\n\n            break;\n          }\n\n          if (condition[key] === \"some\") {\n            condition[key] =\n            /** @type {ExtractCommentsFunction} */\n            (astNode, comment) => (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n\n            break;\n          }\n\n          regexStr =\n          /** @type {string} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) => new RegExp(\n          /** @type {string} */\n          regexStr).test(comment.value);\n\n          break;\n\n        default:\n          regex =\n          /** @type {RegExp} */\n          condition[key];\n\n          condition[key] =\n          /** @type {ExtractCommentsFunction} */\n          (astNode, comment) =>\n          /** @type {RegExp} */\n          regex.test(comment.value);\n\n      }\n    }); // Redefine the comments function to extract and preserve\n    // comments according to the two conditions\n\n    return (astNode, comment) => {\n      if (\n      /** @type {{ extract: ExtractCommentsFunction }} */\n      condition.extract(astNode, comment)) {\n        const commentText = comment.type === \"comment2\" ? `/*${comment.value}*/` : `//${comment.value}`; // Don't include duplicate comments\n\n        if (!extractedComments.includes(commentText)) {\n          extractedComments.push(commentText);\n        }\n      }\n\n      return (\n        /** @type {{ preserve: ExtractCommentsFunction }} */\n        condition.preserve(astNode, comment)\n      );\n    };\n  };\n  /**\n   * @param {PredefinedOptions & import(\"uglify-js\").MinifyOptions} [uglifyJsOptions={}]\n   * @returns {import(\"uglify-js\").MinifyOptions & { sourceMap: undefined } & { output: import(\"uglify-js\").OutputOptions & { beautify: boolean }}}\n   */\n\n\n  const buildUglifyJsOptions = (uglifyJsOptions = {}) => {\n    // eslint-disable-next-line no-param-reassign\n    delete minimizerOptions.ecma; // eslint-disable-next-line no-param-reassign\n\n    delete minimizerOptions.module; // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n\n    return { ...uglifyJsOptions,\n      // warnings: uglifyJsOptions.warnings,\n      parse: { ...uglifyJsOptions.parse\n      },\n      compress: typeof uglifyJsOptions.compress === \"boolean\" ? uglifyJsOptions.compress : { ...uglifyJsOptions.compress\n      },\n      mangle: uglifyJsOptions.mangle == null ? true : typeof uglifyJsOptions.mangle === \"boolean\" ? uglifyJsOptions.mangle : { ...uglifyJsOptions.mangle\n      },\n      output: {\n        beautify: false,\n        ...uglifyJsOptions.output\n      },\n      // Ignoring sourceMap from options\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined // toplevel: uglifyJsOptions.toplevel\n      // nameCache: { ...uglifyJsOptions.toplevel },\n      // ie8: uglifyJsOptions.ie8,\n      // keep_fnames: uglifyJsOptions.keep_fnames,\n\n    };\n  }; // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n\n\n  const {\n    minify\n  } = require(\"uglify-js\"); // Copy `uglify-js` options\n\n\n  const uglifyJsOptions = buildUglifyJsOptions(minimizerOptions); // Let terser generate a SourceMap\n\n  if (sourceMap) {\n    // @ts-ignore\n    uglifyJsOptions.sourceMap = true;\n  }\n  /** @type {ExtractedComments} */\n\n\n  const extractedComments = []; // @ts-ignore\n\n  uglifyJsOptions.output.comments = buildComments(uglifyJsOptions, extractedComments);\n  const [[filename, code]] = Object.entries(input);\n  const result = await minify({\n    [filename]: code\n  }, uglifyJsOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    errors: result.error ? [result.error] : [],\n    warnings: result.warnings || [],\n    extractedComments\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nuglifyJsMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"uglify-js/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function swcMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {PredefinedOptions & import(\"@swc/core\").JsMinifyOptions} [swcOptions={}]\n   * @returns {import(\"@swc/core\").JsMinifyOptions & { sourceMap: undefined } & { compress: import(\"@swc/core\").TerserCompressOptions }}\n   */\n  const buildSwcOptions = (swcOptions = {}) => {\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return { ...swcOptions,\n      compress: typeof swcOptions.compress === \"boolean\" ? swcOptions.compress ? {} : false : { ...swcOptions.compress\n      },\n      mangle: swcOptions.mangle == null ? true : typeof swcOptions.mangle === \"boolean\" ? swcOptions.mangle : { ...swcOptions.mangle\n      },\n      // ecma: swcOptions.ecma,\n      // keep_classnames: swcOptions.keep_classnames,\n      // keep_fnames: swcOptions.keep_fnames,\n      // module: swcOptions.module,\n      // safari10: swcOptions.safari10,\n      // toplevel: swcOptions.toplevel\n      // eslint-disable-next-line no-undefined\n      sourceMap: undefined\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n  const swc = require(\"@swc/core\"); // Copy `swc` options\n\n\n  const swcOptions = buildSwcOptions(minimizerOptions); // Let `swc` generate a SourceMap\n\n  if (sourceMap) {\n    // @ts-ignore\n    swcOptions.sourceMap = true;\n  }\n\n  if (swcOptions.compress) {\n    // More optimizations\n    if (typeof swcOptions.compress.ecma === \"undefined\") {\n      swcOptions.compress.ecma = swcOptions.ecma;\n    } // https://github.com/webpack/webpack/issues/16135\n\n\n    if (swcOptions.ecma === 5 && typeof swcOptions.compress.arrows === \"undefined\") {\n      swcOptions.compress.arrows = false;\n    }\n  }\n\n  const [[filename, code]] = Object.entries(input);\n  const result = await swc.minify(code, swcOptions);\n  let map;\n\n  if (result.map) {\n    map = JSON.parse(result.map); // TODO workaround for swc because `filename` is not preset as in `swc` signature as for `terser`\n\n    map.sources = [filename];\n    delete map.sourcesContent;\n  }\n\n  return {\n    code: result.code,\n    map\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nswcMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"@swc/core/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {SourceMapInput | undefined} sourceMap\n * @param {PredefinedOptions & CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function esbuildMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {PredefinedOptions & import(\"esbuild\").TransformOptions} [esbuildOptions={}]\n   * @returns {import(\"esbuild\").TransformOptions}\n   */\n  const buildEsbuildOptions = (esbuildOptions = {}) => {\n    // eslint-disable-next-line no-param-reassign\n    delete esbuildOptions.ecma;\n\n    if (esbuildOptions.module) {\n      // eslint-disable-next-line no-param-reassign\n      esbuildOptions.format = \"esm\";\n    } // eslint-disable-next-line no-param-reassign\n\n\n    delete esbuildOptions.module; // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n\n    return {\n      minify: true,\n      legalComments: \"inline\",\n      ...esbuildOptions,\n      sourcemap: false\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n  const esbuild = require(\"esbuild\"); // Copy `esbuild` options\n\n\n  const esbuildOptions = buildEsbuildOptions(minimizerOptions); // Let `esbuild` generate a SourceMap\n\n  if (sourceMap) {\n    esbuildOptions.sourcemap = true;\n    esbuildOptions.sourcesContent = false;\n  }\n\n  const [[filename, code]] = Object.entries(input);\n  esbuildOptions.sourcefile = filename;\n  const result = await esbuild.transform(code, esbuildOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    warnings: result.warnings.length > 0 ? result.warnings.map(item => {\n      return {\n        name: \"Warning\",\n        source: item.location && item.location.file,\n        line: item.location && item.location.line,\n        column: item.location && item.location.column,\n        plugin: item.pluginName,\n        message: `${item.text}${item.detail ? `\\nDetails:\\n${item.detail}` : \"\"}${item.notes.length > 0 ? `\\n\\nNotes:\\n${item.notes.map(note => `${note.location ? `[${note.location.file}:${note.location.line}:${note.location.column}] ` : \"\"}${note.text}${note.location ? `\\nSuggestion: ${note.location.suggestion}` : \"\"}${note.location ? `\\nLine text:\\n${note.location.lineText}\\n` : \"\"}`).join(\"\\n\")}` : \"\"}`\n      };\n    }) : []\n  };\n}\n/**\n * @returns {string | undefined}\n */\n\n\nesbuildMinify.getMinimizerVersion = () => {\n  let packageJson;\n\n  try {\n    // eslint-disable-next-line global-require, import/no-extraneous-dependencies\n    packageJson = require(\"esbuild/package.json\");\n  } catch (error) {// Ignore\n  }\n\n  return packageJson && packageJson.version;\n};\n\nmodule.exports = {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}