{"ast":null,"code":"/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nconst os = require('os');\nconst path = require('path');\nconst postcss = require('postcss');\nconst fileProtocol = require('../file-protocol');\nconst algerbra = require('../position-algerbra');\nconst ORPHAN_CR_REGEX = /\\r(?!\\n)(.|\\n)?/g;\n\n/**\n * Process the given CSS content into reworked CSS content.\n *\n * @param {string} sourceFile The absolute path of the file being processed\n * @param {string} sourceContent CSS content without source-map\n * @param {{outputSourceMap: boolean, transformDeclaration:function, absSourceMap:object,\n *        sourceMapConsumer:object, removeCR:boolean}} params Named parameters\n * @return {{content: string, map: object}} Reworked CSS and optional source-map\n */\nfunction process(sourceFile, sourceContent, params) {\n  // #107 libsass emits orphan CR not considered newline, postcss does consider newline (content vs source-map mismatch)\n  const correctedContent = params.removeCR && os.EOL !== '\\r' ? sourceContent.replace(ORPHAN_CR_REGEX, ' $1') : sourceContent;\n\n  // IMPORTANT - prepend file protocol to all sources to avoid problems with source map\n  const plugin = Object.assign(() => ({\n    postcssPlugin: 'postcss-resolve-url',\n    prepare: () => {\n      const visited = new Set();\n\n      /**\n       * Given an apparent position find the directory of the original file.\n       *\n       * @param startPosApparent {{line: number, column: number}}\n       * @returns {false|string} Directory of original file or false on invalid\n       */\n      const positionToOriginalDirectory = startPosApparent => {\n        // reverse the original source-map to find the original source file before transpilation\n        const startPosOriginal = !!params.sourceMapConsumer && params.sourceMapConsumer.originalPositionFor(startPosApparent);\n\n        // we require a valid directory for the specified file\n        const directory = !!startPosOriginal && !!startPosOriginal.source && fileProtocol.remove(path.dirname(startPosOriginal.source));\n        return directory;\n      };\n      return {\n        Declaration: declaration => {\n          var prefix,\n            isValid = declaration.value && declaration.value.indexOf('url') >= 0 && !visited.has(declaration);\n          if (isValid) {\n            prefix = declaration.prop + declaration.raws.between;\n            declaration.value = params.transformDeclaration(declaration.value, getPathsAtChar);\n            visited.add(declaration);\n          }\n\n          /**\n           * Create a hash of base path strings.\n           *\n           * Position in the declaration is supported by postcss at the position of the url() statement.\n           *\n           * @param {number} index Index in the declaration value at which to evaluate\n           * @throws Error on invalid source map\n           * @returns {{subString:string, value:string, property:string, selector:string}} Hash of base path strings\n           */\n          function getPathsAtChar(index) {\n            var subString = declaration.value.slice(0, index),\n              posSelector = algerbra.sanitise(declaration.parent.source.start),\n              posProperty = algerbra.sanitise(declaration.source.start),\n              posValue = algerbra.add([posProperty, algerbra.strToOffset(prefix)]),\n              posSubString = algerbra.add([posValue, algerbra.strToOffset(subString)]);\n            var result = {\n              subString: positionToOriginalDirectory(posSubString),\n              value: positionToOriginalDirectory(posValue),\n              property: positionToOriginalDirectory(posProperty),\n              selector: positionToOriginalDirectory(posSelector)\n            };\n            var isValid = [result.subString, result.value, result.property, result.selector].every(Boolean);\n            if (isValid) {\n              return result;\n            } else if (params.sourceMapConsumer) {\n              throw new Error('source-map information is not available at url() declaration ' + (ORPHAN_CR_REGEX.test(sourceContent) ? '(found orphan CR, try removeCR option)' : '(no orphan CR found)'));\n            } else {\n              throw new Error('a valid source-map is not present (ensure preceding loaders output a source-map)');\n            }\n          }\n        }\n      };\n    }\n  }), {\n    postcss: true\n  });\n\n  // IMPORTANT - prepend file protocol to all sources to avoid problems with source map\n  return postcss([plugin]).process(correctedContent, {\n    from: fileProtocol.prepend(sourceFile),\n    map: params.outputSourceMap && {\n      prev: !!params.absSourceMap && fileProtocol.prepend(params.absSourceMap),\n      inline: false,\n      annotation: false,\n      sourcesContent: true // #98 sourcesContent missing from output map\n    }\n  }).then(({\n    css,\n    map\n  }) => ({\n    content: css,\n    map: params.outputSourceMap ? fileProtocol.remove(map.toJSON()) : null\n  }));\n}\nmodule.exports = process;","map":{"version":3,"names":["os","require","path","postcss","fileProtocol","algerbra","ORPHAN_CR_REGEX","process","sourceFile","sourceContent","params","correctedContent","removeCR","EOL","replace","plugin","Object","assign","postcssPlugin","prepare","visited","Set","positionToOriginalDirectory","startPosApparent","startPosOriginal","sourceMapConsumer","originalPositionFor","directory","source","remove","dirname","Declaration","declaration","prefix","isValid","value","indexOf","has","prop","raws","between","transformDeclaration","getPathsAtChar","add","index","subString","slice","posSelector","sanitise","parent","start","posProperty","posValue","strToOffset","posSubString","result","property","selector","every","Boolean","Error","test","from","prepend","map","outputSourceMap","prev","absSourceMap","inline","annotation","sourcesContent","then","css","content","toJSON","module","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/resolve-url-loader/lib/engine/postcss.js"],"sourcesContent":["/*\n * MIT License http://opensource.org/licenses/MIT\n * Author: Ben Holloway @bholloway\n */\n'use strict';\n\nconst os = require('os');\nconst path = require('path');\nconst postcss = require('postcss');\n\nconst fileProtocol = require('../file-protocol');\nconst algerbra = require('../position-algerbra');\n\nconst ORPHAN_CR_REGEX = /\\r(?!\\n)(.|\\n)?/g;\n\n/**\n * Process the given CSS content into reworked CSS content.\n *\n * @param {string} sourceFile The absolute path of the file being processed\n * @param {string} sourceContent CSS content without source-map\n * @param {{outputSourceMap: boolean, transformDeclaration:function, absSourceMap:object,\n *        sourceMapConsumer:object, removeCR:boolean}} params Named parameters\n * @return {{content: string, map: object}} Reworked CSS and optional source-map\n */\nfunction process(sourceFile, sourceContent, params) {\n  // #107 libsass emits orphan CR not considered newline, postcss does consider newline (content vs source-map mismatch)\n  const correctedContent = params.removeCR && (os.EOL !== '\\r') ?\n    sourceContent.replace(ORPHAN_CR_REGEX, ' $1') :\n    sourceContent;\n\n  // IMPORTANT - prepend file protocol to all sources to avoid problems with source map\n  const plugin = Object.assign(\n    () => ({\n      postcssPlugin: 'postcss-resolve-url',\n      prepare: () => {\n        const visited = new Set();\n\n        /**\n         * Given an apparent position find the directory of the original file.\n         *\n         * @param startPosApparent {{line: number, column: number}}\n         * @returns {false|string} Directory of original file or false on invalid\n         */\n        const positionToOriginalDirectory = (startPosApparent) => {\n          // reverse the original source-map to find the original source file before transpilation\n          const startPosOriginal =\n            !!params.sourceMapConsumer &&\n            params.sourceMapConsumer.originalPositionFor(startPosApparent);\n\n          // we require a valid directory for the specified file\n          const directory =\n            !!startPosOriginal &&\n            !!startPosOriginal.source &&\n            fileProtocol.remove(path.dirname(startPosOriginal.source));\n\n          return directory;\n        };\n\n        return {\n          Declaration: (declaration) => {\n            var prefix,\n              isValid = declaration.value && (declaration.value.indexOf('url') >= 0) && !visited.has(declaration);\n            if (isValid) {\n              prefix = declaration.prop + declaration.raws.between;\n              declaration.value = params.transformDeclaration(declaration.value, getPathsAtChar);\n              visited.add(declaration);\n            }\n\n            /**\n             * Create a hash of base path strings.\n             *\n             * Position in the declaration is supported by postcss at the position of the url() statement.\n             *\n             * @param {number} index Index in the declaration value at which to evaluate\n             * @throws Error on invalid source map\n             * @returns {{subString:string, value:string, property:string, selector:string}} Hash of base path strings\n             */\n            function getPathsAtChar(index) {\n              var subString    = declaration.value.slice(0, index),\n                posSelector  = algerbra.sanitise(declaration.parent.source.start),\n                posProperty  = algerbra.sanitise(declaration.source.start),\n                posValue     = algerbra.add([posProperty, algerbra.strToOffset(prefix)]),\n                posSubString = algerbra.add([posValue, algerbra.strToOffset(subString)]);\n\n              var result = {\n                subString: positionToOriginalDirectory(posSubString),\n                value    : positionToOriginalDirectory(posValue),\n                property : positionToOriginalDirectory(posProperty),\n                selector : positionToOriginalDirectory(posSelector)\n              };\n\n              var isValid = [result.subString, result.value, result.property, result.selector].every(Boolean);\n              if (isValid) {\n                return result;\n              }\n              else if (params.sourceMapConsumer) {\n                throw new Error(\n                  'source-map information is not available at url() declaration ' + (\n                    ORPHAN_CR_REGEX.test(sourceContent) ?\n                      '(found orphan CR, try removeCR option)' :\n                      '(no orphan CR found)'\n                  )\n                );\n              } else {\n                throw new Error('a valid source-map is not present (ensure preceding loaders output a source-map)');\n              }\n            }\n          }\n        };\n      }\n    }),\n    { postcss: true }\n  );\n\n  // IMPORTANT - prepend file protocol to all sources to avoid problems with source map\n  return postcss([plugin])\n    .process(correctedContent, {\n      from: fileProtocol.prepend(sourceFile),\n      map : params.outputSourceMap && {\n        prev          : !!params.absSourceMap && fileProtocol.prepend(params.absSourceMap),\n        inline        : false,\n        annotation    : false,\n        sourcesContent: true  // #98 sourcesContent missing from output map\n      }\n    })\n    .then(({css, map}) => ({\n      content: css,\n      map    : params.outputSourceMap ? fileProtocol.remove(map.toJSON()) : null\n    }));\n}\n\nmodule.exports = process;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}