{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst path = require('path');\nconst pathType = require('path-type');\nconst getExtensions = extensions => extensions.length > 1 ? `{${extensions.join(',')}}` : extensions[0];\nconst getPath = (filepath, cwd) => {\n  const pth = filepath[0] === '!' ? filepath.slice(1) : filepath;\n  return path.isAbsolute(pth) ? pth : path.join(cwd, pth);\n};\nconst addExtensions = (file, extensions) => {\n  if (path.extname(file)) {\n    return `**/${file}`;\n  }\n  return `**/${file}.${getExtensions(extensions)}`;\n};\nconst getGlob = (directory, options) => {\n  if (options.files && !Array.isArray(options.files)) {\n    throw new TypeError(`Expected \\`files\\` to be of type \\`Array\\` but received type \\`${typeof options.files}\\``);\n  }\n  if (options.extensions && !Array.isArray(options.extensions)) {\n    throw new TypeError(`Expected \\`extensions\\` to be of type \\`Array\\` but received type \\`${typeof options.extensions}\\``);\n  }\n  if (options.files && options.extensions) {\n    return options.files.map(x => path.posix.join(directory, addExtensions(x, options.extensions)));\n  }\n  if (options.files) {\n    return options.files.map(x => path.posix.join(directory, `**/${x}`));\n  }\n  if (options.extensions) {\n    return [path.posix.join(directory, `**/*.${getExtensions(options.extensions)}`)];\n  }\n  return [path.posix.join(directory, '**')];\n};\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (input, options) {\n    options = {\n      cwd: process.cwd(),\n      ...options\n    };\n    if (typeof options.cwd !== 'string') {\n      throw new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n    }\n    const globs = yield Promise.all([].concat(input).map( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (x) {\n        const isDirectory = yield pathType.isDirectory(getPath(x, options.cwd));\n        return isDirectory ? getGlob(x, options) : x;\n      });\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()));\n    return [].concat.apply([], globs); // eslint-disable-line prefer-spread\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports.sync = (input, options) => {\n  options = {\n    cwd: process.cwd(),\n    ...options\n  };\n  if (typeof options.cwd !== 'string') {\n    throw new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n  }\n  const globs = [].concat(input).map(x => pathType.isDirectorySync(getPath(x, options.cwd)) ? getGlob(x, options) : x);\n  return [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};","map":{"version":3,"names":["path","require","pathType","getExtensions","extensions","length","join","getPath","filepath","cwd","pth","slice","isAbsolute","addExtensions","file","extname","getGlob","directory","options","files","Array","isArray","TypeError","map","x","posix","module","exports","input","process","globs","Promise","all","concat","isDirectory","apply","sync","isDirectorySync"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/dir-glob/index.js"],"sourcesContent":["'use strict';\nconst path = require('path');\nconst pathType = require('path-type');\n\nconst getExtensions = extensions => extensions.length > 1 ? `{${extensions.join(',')}}` : extensions[0];\n\nconst getPath = (filepath, cwd) => {\n\tconst pth = filepath[0] === '!' ? filepath.slice(1) : filepath;\n\treturn path.isAbsolute(pth) ? pth : path.join(cwd, pth);\n};\n\nconst addExtensions = (file, extensions) => {\n\tif (path.extname(file)) {\n\t\treturn `**/${file}`;\n\t}\n\n\treturn `**/${file}.${getExtensions(extensions)}`;\n};\n\nconst getGlob = (directory, options) => {\n\tif (options.files && !Array.isArray(options.files)) {\n\t\tthrow new TypeError(`Expected \\`files\\` to be of type \\`Array\\` but received type \\`${typeof options.files}\\``);\n\t}\n\n\tif (options.extensions && !Array.isArray(options.extensions)) {\n\t\tthrow new TypeError(`Expected \\`extensions\\` to be of type \\`Array\\` but received type \\`${typeof options.extensions}\\``);\n\t}\n\n\tif (options.files && options.extensions) {\n\t\treturn options.files.map(x => path.posix.join(directory, addExtensions(x, options.extensions)));\n\t}\n\n\tif (options.files) {\n\t\treturn options.files.map(x => path.posix.join(directory, `**/${x}`));\n\t}\n\n\tif (options.extensions) {\n\t\treturn [path.posix.join(directory, `**/*.${getExtensions(options.extensions)}`)];\n\t}\n\n\treturn [path.posix.join(directory, '**')];\n};\n\nmodule.exports = async (input, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\t...options\n\t};\n\n\tif (typeof options.cwd !== 'string') {\n\t\tthrow new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n\t}\n\n\tconst globs = await Promise.all([].concat(input).map(async x => {\n\t\tconst isDirectory = await pathType.isDirectory(getPath(x, options.cwd));\n\t\treturn isDirectory ? getGlob(x, options) : x;\n\t}));\n\n\treturn [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};\n\nmodule.exports.sync = (input, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\t...options\n\t};\n\n\tif (typeof options.cwd !== 'string') {\n\t\tthrow new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n\t}\n\n\tconst globs = [].concat(input).map(x => pathType.isDirectorySync(getPath(x, options.cwd)) ? getGlob(x, options) : x);\n\n\treturn [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}