{"ast":null,"code":"/**\n * Karma middleware is responsible for serving:\n * - client.html (the entrypoint for capturing a browser)\n * - debug.html\n * - context.html (the execution context, loaded within an iframe)\n * - karma.js\n *\n * The main part is generating context.html, as it contains:\n * - generating mappings\n * - including <script> and <link> tags\n * - setting propert caching headers\n */\n\nconst url = require('url');\nconst log = require('../logger').create('middleware:karma');\nconst stripHost = require('./strip_host').stripHost;\nconst common = require('./common');\nconst VERSION = require('../constants').VERSION;\nconst SCRIPT_TYPE = {\n  js: 'text/javascript',\n  module: 'module'\n};\nconst FILE_TYPES = ['css', 'html', 'js', 'module', 'dom'];\nfunction filePathToUrlPath(filePath, basePath, urlRoot, proxyPath) {\n  if (filePath.startsWith(basePath)) {\n    return proxyPath + urlRoot.slice(1) + 'base' + filePath.slice(basePath.length);\n  }\n  return proxyPath + urlRoot.slice(1) + 'absolute' + filePath;\n}\nfunction getQuery(urlStr) {\n  // eslint-disable-next-line node/no-deprecated-api\n  return url.parse(urlStr, true).query || {};\n}\nfunction getXUACompatibleMetaElement(url) {\n  const query = getQuery(url);\n  if (query['x-ua-compatible']) {\n    return `<meta http-equiv=\"X-UA-Compatible\" content=\"${query['x-ua-compatible']}\"/>`;\n  }\n  return '';\n}\nfunction getXUACompatibleUrl(url) {\n  const query = getQuery(url);\n  if (query['x-ua-compatible']) {\n    return '?x-ua-compatible=' + encodeURIComponent(query['x-ua-compatible']);\n  }\n  return '';\n}\nfunction createKarmaMiddleware(filesPromise, serveStaticFile, serveFile, injector, basePath, urlRoot, upstreamProxy, browserSocketTimeout) {\n  const proxyPath = upstreamProxy ? upstreamProxy.path : '/';\n  return function (request, response, next) {\n    // These config values should be up to date on every request\n    const client = injector.get('config.client');\n    const customContextFile = injector.get('config.customContextFile');\n    const customDebugFile = injector.get('config.customDebugFile');\n    const customClientContextFile = injector.get('config.customClientContextFile');\n    const includeCrossOriginAttribute = injector.get('config.crossOriginAttribute');\n    const normalizedUrl = stripHost(request.url) || request.url;\n    // For backwards compatibility in middleware plugins, remove in v4.\n    request.normalizedUrl = normalizedUrl;\n    let requestUrl = normalizedUrl.replace(/\\?.*/, '');\n    const requestedRangeHeader = request.headers.range;\n\n    // redirect /__karma__ to /__karma__ (trailing slash)\n    if (requestUrl === urlRoot.slice(0, -1)) {\n      response.setHeader('Location', proxyPath + urlRoot.slice(1));\n      response.writeHead(301);\n      return response.end('MOVED PERMANENTLY');\n    }\n\n    // ignore urls outside urlRoot\n    if (!requestUrl.startsWith(urlRoot)) {\n      return next();\n    }\n\n    // remove urlRoot prefix\n    requestUrl = requestUrl.slice(urlRoot.length - 1);\n\n    // serve client.html\n    if (requestUrl === '/') {\n      // redirect client_with_context.html\n      if (!client.useIframe && client.runInParent) {\n        requestUrl = '/client_with_context.html';\n      } else {\n        // serve client.html\n        return serveStaticFile('/client.html', requestedRangeHeader, response, data => data.replace('%X_UA_COMPATIBLE%', getXUACompatibleMetaElement(request.url)).replace('%X_UA_COMPATIBLE_URL%', getXUACompatibleUrl(request.url)));\n      }\n    }\n    if (['/karma.js', '/context.js', '/debug.js'].includes(requestUrl)) {\n      return serveStaticFile(requestUrl, requestedRangeHeader, response, data => data.replace('%KARMA_URL_ROOT%', urlRoot).replace('%KARMA_VERSION%', VERSION).replace('%KARMA_PROXY_PATH%', proxyPath).replace('%BROWSER_SOCKET_TIMEOUT%', browserSocketTimeout));\n    }\n\n    // serve the favicon\n    if (requestUrl === '/favicon.ico') {\n      return serveStaticFile(requestUrl, requestedRangeHeader, response);\n    }\n\n    // serve context.html - execution context within the iframe\n    // or debug.html - execution context without channel to the server\n    const isRequestingContextFile = requestUrl === '/context.html';\n    const isRequestingDebugFile = requestUrl === '/debug.html';\n    const isRequestingClientContextFile = requestUrl === '/client_with_context.html';\n    if (isRequestingContextFile || isRequestingDebugFile || isRequestingClientContextFile) {\n      return filesPromise.then(files => {\n        let fileServer;\n        let requestedFileUrl;\n        log.debug('custom files', customContextFile, customDebugFile, customClientContextFile);\n        if (isRequestingContextFile && customContextFile) {\n          log.debug(`Serving customContextFile ${customContextFile}`);\n          fileServer = serveFile;\n          requestedFileUrl = customContextFile;\n        } else if (isRequestingDebugFile && customDebugFile) {\n          log.debug(`Serving customDebugFile ${customDebugFile}`);\n          fileServer = serveFile;\n          requestedFileUrl = customDebugFile;\n        } else if (isRequestingClientContextFile && customClientContextFile) {\n          log.debug(`Serving customClientContextFile ${customClientContextFile}`);\n          fileServer = serveFile;\n          requestedFileUrl = customClientContextFile;\n        } else {\n          log.debug(`Serving static request ${requestUrl}`);\n          fileServer = serveStaticFile;\n          requestedFileUrl = requestUrl;\n        }\n        fileServer(requestedFileUrl, requestedRangeHeader, response, function (data) {\n          common.setNoCacheHeaders(response);\n          const scriptTags = [];\n          for (const file of files.included) {\n            let filePath = file.path;\n            const fileType = file.type || file.detectType();\n            if (!FILE_TYPES.includes(fileType)) {\n              if (file.type == null) {\n                log.warn('Unable to determine file type from the file extension, defaulting to js.\\n' + `  To silence the warning specify a valid type for ${file.originalPath} in the configuration file.\\n` + '  See https://karma-runner.github.io/latest/config/files.html');\n              } else {\n                log.warn(`Invalid file type (${file.type || 'empty string'}), defaulting to js.`);\n              }\n            }\n            if (!file.isUrl) {\n              filePath = filePathToUrlPath(filePath, basePath, urlRoot, proxyPath);\n              if (requestUrl === '/context.html') {\n                filePath += '?' + file.sha;\n              }\n            }\n            const integrityAttribute = file.integrity ? ` integrity=\"${file.integrity}\"` : '';\n            const crossOriginAttribute = includeCrossOriginAttribute ? ' crossorigin=\"anonymous\"' : '';\n            if (fileType === 'css') {\n              scriptTags.push(`<link type=\"text/css\" href=\"${filePath}\" rel=\"stylesheet\"${integrityAttribute}${crossOriginAttribute}>`);\n            } else if (fileType === 'dom') {\n              scriptTags.push(file.content);\n            } else if (fileType === 'html') {\n              scriptTags.push(`<link href=\"${filePath}\" rel=\"import\"${integrityAttribute}${crossOriginAttribute}>`);\n            } else {\n              const scriptType = SCRIPT_TYPE[fileType] || 'text/javascript';\n              if (fileType === 'module') {\n                scriptTags.push(`<script onerror=\"throw 'Error loading ${filePath}'\" type=\"${scriptType}\" src=\"${filePath}\"${integrityAttribute}${crossOriginAttribute}></script>`);\n              } else {\n                scriptTags.push(`<script type=\"${scriptType}\" src=\"${filePath}\"${integrityAttribute}${crossOriginAttribute}></script>`);\n              }\n            }\n          }\n          const scriptUrls = [];\n          // For client_with_context, html elements are not added directly through an iframe.\n          // Instead, scriptTags is stored to window.__karma__.scriptUrls first. Later, the\n          // client will read window.__karma__.scriptUrls and dynamically add them to the DOM\n          // using DOMParser.\n          if (requestUrl === '/client_with_context.html') {\n            for (const script of scriptTags) {\n              scriptUrls.push(\n              // Escape characters with special roles (tags) in HTML. Open angle brackets are parsed as tags\n              // immediately, even if it is within double quotations in browsers\n              script.replace(/</g, '\\\\x3C').replace(/>/g, '\\\\x3E'));\n            }\n          }\n          const mappings = data.includes('%MAPPINGS%') ? files.served.map(file => {\n            const filePath = filePathToUrlPath(file.path, basePath, urlRoot, proxyPath).replace(/\\\\/g, '\\\\\\\\') // Windows paths contain backslashes and generate bad IDs if not escaped\n            .replace(/'/g, '\\\\\\''); // Escape single quotes - double quotes should not be allowed!\n\n            return `  '${filePath}': '${file.sha}'`;\n          }) : [];\n          return data.replace('%SCRIPTS%', () => scriptTags.join('\\n')).replace('%CLIENT_CONFIG%', 'window.__karma__.config = ' + JSON.stringify(client) + ';\\n').replace('%SCRIPT_URL_ARRAY%', () => 'window.__karma__.scriptUrls = ' + JSON.stringify(scriptUrls) + ';\\n').replace('%MAPPINGS%', () => 'window.__karma__.files = {\\n' + mappings.join(',\\n') + '\\n};\\n').replace('%X_UA_COMPATIBLE%', getXUACompatibleMetaElement(request.url));\n        });\n      });\n    } else if (requestUrl === '/context.json') {\n      return filesPromise.then(files => {\n        common.setNoCacheHeaders(response);\n        response.writeHead(200);\n        response.end(JSON.stringify({\n          files: files.included.map(file => filePathToUrlPath(file.path + '?' + file.sha, basePath, urlRoot, proxyPath))\n        }));\n      });\n    }\n    return next();\n  };\n}\ncreateKarmaMiddleware.$inject = ['filesPromise', 'serveStaticFile', 'serveFile', 'injector', 'config.basePath', 'config.urlRoot', 'config.upstreamProxy', 'config.browserSocketTimeout'];\n\n// PUBLIC API\nexports.create = createKarmaMiddleware;","map":{"version":3,"names":["url","require","log","create","stripHost","common","VERSION","SCRIPT_TYPE","js","module","FILE_TYPES","filePathToUrlPath","filePath","basePath","urlRoot","proxyPath","startsWith","slice","length","getQuery","urlStr","parse","query","getXUACompatibleMetaElement","getXUACompatibleUrl","encodeURIComponent","createKarmaMiddleware","filesPromise","serveStaticFile","serveFile","injector","upstreamProxy","browserSocketTimeout","path","request","response","next","client","get","customContextFile","customDebugFile","customClientContextFile","includeCrossOriginAttribute","normalizedUrl","requestUrl","replace","requestedRangeHeader","headers","range","setHeader","writeHead","end","useIframe","runInParent","data","includes","isRequestingContextFile","isRequestingDebugFile","isRequestingClientContextFile","then","files","fileServer","requestedFileUrl","debug","setNoCacheHeaders","scriptTags","file","included","fileType","type","detectType","warn","originalPath","isUrl","sha","integrityAttribute","integrity","crossOriginAttribute","push","content","scriptType","scriptUrls","script","mappings","served","map","join","JSON","stringify","$inject","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/karma/lib/middleware/karma.js"],"sourcesContent":["/**\n * Karma middleware is responsible for serving:\n * - client.html (the entrypoint for capturing a browser)\n * - debug.html\n * - context.html (the execution context, loaded within an iframe)\n * - karma.js\n *\n * The main part is generating context.html, as it contains:\n * - generating mappings\n * - including <script> and <link> tags\n * - setting propert caching headers\n */\n\nconst url = require('url')\n\nconst log = require('../logger').create('middleware:karma')\nconst stripHost = require('./strip_host').stripHost\nconst common = require('./common')\n\nconst VERSION = require('../constants').VERSION\nconst SCRIPT_TYPE = {\n  js: 'text/javascript',\n  module: 'module'\n}\nconst FILE_TYPES = [\n  'css',\n  'html',\n  'js',\n  'module',\n  'dom'\n]\n\nfunction filePathToUrlPath (filePath, basePath, urlRoot, proxyPath) {\n  if (filePath.startsWith(basePath)) {\n    return proxyPath + urlRoot.slice(1) + 'base' + filePath.slice(basePath.length)\n  }\n  return proxyPath + urlRoot.slice(1) + 'absolute' + filePath\n}\n\nfunction getQuery (urlStr) {\n  // eslint-disable-next-line node/no-deprecated-api\n  return url.parse(urlStr, true).query || {}\n}\n\nfunction getXUACompatibleMetaElement (url) {\n  const query = getQuery(url)\n  if (query['x-ua-compatible']) {\n    return `<meta http-equiv=\"X-UA-Compatible\" content=\"${query['x-ua-compatible']}\"/>`\n  }\n  return ''\n}\n\nfunction getXUACompatibleUrl (url) {\n  const query = getQuery(url)\n  if (query['x-ua-compatible']) {\n    return '?x-ua-compatible=' + encodeURIComponent(query['x-ua-compatible'])\n  }\n  return ''\n}\n\nfunction createKarmaMiddleware (\n  filesPromise,\n  serveStaticFile,\n  serveFile,\n  injector,\n  basePath,\n  urlRoot,\n  upstreamProxy,\n  browserSocketTimeout\n) {\n  const proxyPath = upstreamProxy ? upstreamProxy.path : '/'\n  return function (request, response, next) {\n    // These config values should be up to date on every request\n    const client = injector.get('config.client')\n    const customContextFile = injector.get('config.customContextFile')\n    const customDebugFile = injector.get('config.customDebugFile')\n    const customClientContextFile = injector.get('config.customClientContextFile')\n    const includeCrossOriginAttribute = injector.get('config.crossOriginAttribute')\n\n    const normalizedUrl = stripHost(request.url) || request.url\n    // For backwards compatibility in middleware plugins, remove in v4.\n    request.normalizedUrl = normalizedUrl\n\n    let requestUrl = normalizedUrl.replace(/\\?.*/, '')\n    const requestedRangeHeader = request.headers.range\n\n    // redirect /__karma__ to /__karma__ (trailing slash)\n    if (requestUrl === urlRoot.slice(0, -1)) {\n      response.setHeader('Location', proxyPath + urlRoot.slice(1))\n      response.writeHead(301)\n      return response.end('MOVED PERMANENTLY')\n    }\n\n    // ignore urls outside urlRoot\n    if (!requestUrl.startsWith(urlRoot)) {\n      return next()\n    }\n\n    // remove urlRoot prefix\n    requestUrl = requestUrl.slice(urlRoot.length - 1)\n\n    // serve client.html\n    if (requestUrl === '/') {\n      // redirect client_with_context.html\n      if (!client.useIframe && client.runInParent) {\n        requestUrl = '/client_with_context.html'\n      } else { // serve client.html\n        return serveStaticFile('/client.html', requestedRangeHeader, response, (data) =>\n          data\n            .replace('%X_UA_COMPATIBLE%', getXUACompatibleMetaElement(request.url))\n            .replace('%X_UA_COMPATIBLE_URL%', getXUACompatibleUrl(request.url)))\n      }\n    }\n\n    if (['/karma.js', '/context.js', '/debug.js'].includes(requestUrl)) {\n      return serveStaticFile(requestUrl, requestedRangeHeader, response, (data) =>\n        data\n          .replace('%KARMA_URL_ROOT%', urlRoot)\n          .replace('%KARMA_VERSION%', VERSION)\n          .replace('%KARMA_PROXY_PATH%', proxyPath)\n          .replace('%BROWSER_SOCKET_TIMEOUT%', browserSocketTimeout))\n    }\n\n    // serve the favicon\n    if (requestUrl === '/favicon.ico') {\n      return serveStaticFile(requestUrl, requestedRangeHeader, response)\n    }\n\n    // serve context.html - execution context within the iframe\n    // or debug.html - execution context without channel to the server\n    const isRequestingContextFile = requestUrl === '/context.html'\n    const isRequestingDebugFile = requestUrl === '/debug.html'\n    const isRequestingClientContextFile = requestUrl === '/client_with_context.html'\n    if (isRequestingContextFile || isRequestingDebugFile || isRequestingClientContextFile) {\n      return filesPromise.then((files) => {\n        let fileServer\n        let requestedFileUrl\n        log.debug('custom files', customContextFile, customDebugFile, customClientContextFile)\n        if (isRequestingContextFile && customContextFile) {\n          log.debug(`Serving customContextFile ${customContextFile}`)\n          fileServer = serveFile\n          requestedFileUrl = customContextFile\n        } else if (isRequestingDebugFile && customDebugFile) {\n          log.debug(`Serving customDebugFile ${customDebugFile}`)\n          fileServer = serveFile\n          requestedFileUrl = customDebugFile\n        } else if (isRequestingClientContextFile && customClientContextFile) {\n          log.debug(`Serving customClientContextFile ${customClientContextFile}`)\n          fileServer = serveFile\n          requestedFileUrl = customClientContextFile\n        } else {\n          log.debug(`Serving static request ${requestUrl}`)\n          fileServer = serveStaticFile\n          requestedFileUrl = requestUrl\n        }\n\n        fileServer(requestedFileUrl, requestedRangeHeader, response, function (data) {\n          common.setNoCacheHeaders(response)\n\n          const scriptTags = []\n          for (const file of files.included) {\n            let filePath = file.path\n            const fileType = file.type || file.detectType()\n\n            if (!FILE_TYPES.includes(fileType)) {\n              if (file.type == null) {\n                log.warn(\n                  'Unable to determine file type from the file extension, defaulting to js.\\n' +\n                  `  To silence the warning specify a valid type for ${file.originalPath} in the configuration file.\\n` +\n                  '  See https://karma-runner.github.io/latest/config/files.html'\n                )\n              } else {\n                log.warn(`Invalid file type (${file.type || 'empty string'}), defaulting to js.`)\n              }\n            }\n\n            if (!file.isUrl) {\n              filePath = filePathToUrlPath(filePath, basePath, urlRoot, proxyPath)\n\n              if (requestUrl === '/context.html') {\n                filePath += '?' + file.sha\n              }\n            }\n\n            const integrityAttribute = file.integrity ? ` integrity=\"${file.integrity}\"` : ''\n            const crossOriginAttribute = includeCrossOriginAttribute ? ' crossorigin=\"anonymous\"' : ''\n            if (fileType === 'css') {\n              scriptTags.push(`<link type=\"text/css\" href=\"${filePath}\" rel=\"stylesheet\"${integrityAttribute}${crossOriginAttribute}>`)\n            } else if (fileType === 'dom') {\n              scriptTags.push(file.content)\n            } else if (fileType === 'html') {\n              scriptTags.push(`<link href=\"${filePath}\" rel=\"import\"${integrityAttribute}${crossOriginAttribute}>`)\n            } else {\n              const scriptType = (SCRIPT_TYPE[fileType] || 'text/javascript')\n              if (fileType === 'module') {\n                scriptTags.push(`<script onerror=\"throw 'Error loading ${filePath}'\" type=\"${scriptType}\" src=\"${filePath}\"${integrityAttribute}${crossOriginAttribute}></script>`)\n              } else {\n                scriptTags.push(`<script type=\"${scriptType}\" src=\"${filePath}\"${integrityAttribute}${crossOriginAttribute}></script>`)\n              }\n            }\n          }\n\n          const scriptUrls = []\n          // For client_with_context, html elements are not added directly through an iframe.\n          // Instead, scriptTags is stored to window.__karma__.scriptUrls first. Later, the\n          // client will read window.__karma__.scriptUrls and dynamically add them to the DOM\n          // using DOMParser.\n          if (requestUrl === '/client_with_context.html') {\n            for (const script of scriptTags) {\n              scriptUrls.push(\n                // Escape characters with special roles (tags) in HTML. Open angle brackets are parsed as tags\n                // immediately, even if it is within double quotations in browsers\n                script.replace(/</g, '\\\\x3C').replace(/>/g, '\\\\x3E'))\n            }\n          }\n\n          const mappings = data.includes('%MAPPINGS%') ? files.served.map((file) => {\n            const filePath = filePathToUrlPath(file.path, basePath, urlRoot, proxyPath)\n              .replace(/\\\\/g, '\\\\\\\\') // Windows paths contain backslashes and generate bad IDs if not escaped\n              .replace(/'/g, '\\\\\\'') // Escape single quotes - double quotes should not be allowed!\n\n            return `  '${filePath}': '${file.sha}'`\n          }) : []\n\n          return data\n            .replace('%SCRIPTS%', () => scriptTags.join('\\n'))\n            .replace('%CLIENT_CONFIG%', 'window.__karma__.config = ' + JSON.stringify(client) + ';\\n')\n            .replace('%SCRIPT_URL_ARRAY%', () => 'window.__karma__.scriptUrls = ' + JSON.stringify(scriptUrls) + ';\\n')\n            .replace('%MAPPINGS%', () => 'window.__karma__.files = {\\n' + mappings.join(',\\n') + '\\n};\\n')\n            .replace('%X_UA_COMPATIBLE%', getXUACompatibleMetaElement(request.url))\n        })\n      })\n    } else if (requestUrl === '/context.json') {\n      return filesPromise.then((files) => {\n        common.setNoCacheHeaders(response)\n        response.writeHead(200)\n        response.end(JSON.stringify({\n          files: files.included.map((file) => filePathToUrlPath(file.path + '?' + file.sha, basePath, urlRoot, proxyPath))\n        }))\n      })\n    }\n\n    return next()\n  }\n}\n\ncreateKarmaMiddleware.$inject = [\n  'filesPromise',\n  'serveStaticFile',\n  'serveFile',\n  'injector',\n  'config.basePath',\n  'config.urlRoot',\n  'config.upstreamProxy',\n  'config.browserSocketTimeout'\n]\n\n// PUBLIC API\nexports.create = createKarmaMiddleware\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}