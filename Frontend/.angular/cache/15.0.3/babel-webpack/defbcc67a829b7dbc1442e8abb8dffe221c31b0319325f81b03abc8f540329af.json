{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst SocketIO = require('socket.io');\nconst di = require('di');\nconst util = require('util');\nconst spawn = require('child_process').spawn;\nconst tmp = require('tmp');\nconst fs = require('fs');\nconst path = require('path');\nconst NetUtils = require('./utils/net-utils');\nconst root = global || window || this;\nconst cfg = require('./config');\nconst logger = require('./logger');\nconst constant = require('./constants');\nconst watcher = require('./watcher');\nconst plugin = require('./plugin');\nconst createServeFile = require('./web-server').createServeFile;\nconst createServeStaticFile = require('./web-server').createServeStaticFile;\nconst createFilesPromise = require('./web-server').createFilesPromise;\nconst createWebServer = require('./web-server').createWebServer;\nconst preprocessor = require('./preprocessor');\nconst Launcher = require('./launcher').Launcher;\nconst FileList = require('./file-list');\nconst reporter = require('./reporter');\nconst helper = require('./helper');\nconst events = require('./events');\nconst KarmaEventEmitter = events.EventEmitter;\nconst EventEmitter = require('events').EventEmitter;\nconst Executor = require('./executor');\nconst Browser = require('./browser');\nconst BrowserCollection = require('./browser_collection');\nconst EmitterWrapper = require('./emitter_wrapper');\nconst processWrapper = new EmitterWrapper(process);\nfunction createSocketIoServer(webServer, executor, config) {\n  const server = new SocketIO.Server(webServer, {\n    // avoid destroying http upgrades from socket.io to get proxied websockets working\n    destroyUpgrade: false,\n    path: config.urlRoot + 'socket.io/',\n    transports: config.transports,\n    forceJSONP: config.forceJSONP,\n    // Default is 5000 in socket.io v2.x and v3.x.\n    pingTimeout: config.pingTimeout || 5000,\n    // Default in v2 is 1e8 and coverage results can fail at 1e6\n    maxHttpBufferSize: 1e8\n  });\n\n  // hack to overcome circular dependency\n  executor.socketIoSockets = server.sockets;\n  return server;\n}\nclass Server extends KarmaEventEmitter {\n  constructor(cliOptionsOrConfig, done) {\n    super();\n    cliOptionsOrConfig = cliOptionsOrConfig || {};\n    this.log = logger.create('karma-server');\n    done = helper.isFunction(done) ? done : process.exit;\n    this.loadErrors = [];\n    let config;\n    if (cliOptionsOrConfig instanceof cfg.Config) {\n      config = cliOptionsOrConfig;\n    } else {\n      logger.setupFromConfig({\n        colors: cliOptionsOrConfig.colors,\n        logLevel: cliOptionsOrConfig.logLevel\n      });\n      const deprecatedCliOptionsMessage = 'Passing raw CLI options to `new Server(config, done)` is ' + 'deprecated. Use ' + '`parseConfig(configFilePath, cliOptions, {promiseConfig: true, throwErrors: true})` ' + 'to prepare a processed `Config` instance and pass that as the ' + '`config` argument instead.';\n      this.log.warn(deprecatedCliOptionsMessage);\n      try {\n        config = cfg.parseConfig(cliOptionsOrConfig.configFile, cliOptionsOrConfig, {\n          promiseConfig: false,\n          throwErrors: true\n        });\n      } catch (parseConfigError) {\n        // TODO: change how `done` falls back to exit in next major version\n        //  SEE: https://github.com/karma-runner/karma/pull/3635#discussion_r565399378\n        done(1);\n        return;\n      }\n    }\n    this.log.debug('Final config', util.inspect(config, false, /** depth **/null));\n    if (!config.autoWatch && !config.singleRun) {\n      this.log.warn('`autowatch` and `singleRun` are both `false`. In order to execute tests use `karma run`.');\n    }\n    let modules = [{\n      helper: ['value', helper],\n      logger: ['value', logger],\n      done: ['value', done || process.exit],\n      emitter: ['value', this],\n      server: ['value', this],\n      watcher: ['value', watcher],\n      launcher: ['factory', Launcher.factory],\n      config: ['value', config],\n      instantiatePlugin: ['factory', plugin.createInstantiatePlugin],\n      preprocess: ['factory', preprocessor.createPriorityPreprocessor],\n      fileList: ['factory', FileList.factory],\n      webServer: ['factory', createWebServer],\n      serveFile: ['factory', createServeFile],\n      serveStaticFile: ['factory', createServeStaticFile],\n      filesPromise: ['factory', createFilesPromise],\n      socketServer: ['factory', createSocketIoServer],\n      executor: ['factory', Executor.factory],\n      // TODO: Deprecated. Remove in the next major\n      customFileHandlers: ['value', []],\n      reporter: ['factory', reporter.createReporters],\n      capturedBrowsers: ['factory', BrowserCollection.factory],\n      args: ['value', {}],\n      timer: ['value', {\n        setTimeout() {\n          return setTimeout.apply(root, arguments);\n        },\n        clearTimeout\n      }]\n    }];\n    this.on('load_error', (type, name) => {\n      this.log.debug(`Registered a load error of type ${type} with name ${name}`);\n      this.loadErrors.push([type, name]);\n    });\n    modules = modules.concat(plugin.resolve(config.plugins, this));\n    this._injector = new di.Injector(modules);\n  }\n  start() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const config = _this.get('config');\n      try {\n        _this._boundServer = yield NetUtils.bindAvailablePort(config.port, config.listenAddress);\n        _this._boundServer.on('connection', socket => {\n          // Attach an error handler to avoid UncaughtException errors.\n          socket.on('error', err => {\n            // Errors on this socket are retried, ignore them\n            _this.log.debug('Ignoring error on webserver connection: ' + err);\n          });\n        });\n        config.port = _this._boundServer.address().port;\n        yield _this._injector.invoke(_this._start, _this);\n      } catch (err) {\n        _this.log.error(`Server start failed on port ${config.port}: ${err}`);\n        _this._close(1);\n      }\n    })();\n  }\n  get(token) {\n    return this._injector.get(token);\n  }\n  refreshFiles() {\n    return this._fileList ? this._fileList.refresh() : Promise.resolve();\n  }\n  refreshFile(path) {\n    return this._fileList ? this._fileList.changeFile(path) : Promise.resolve();\n  }\n  emitExitAsync(code) {\n    const name = 'exit';\n    let pending = this.listeners(name).length;\n    const deferred = helper.defer();\n    function resolve() {\n      deferred.resolve(code);\n    }\n    try {\n      this.emit(name, newCode => {\n        if (newCode && typeof newCode === 'number') {\n          // Only update code if it is given and not zero\n          code = newCode;\n        }\n        if (! --pending) {\n          resolve();\n        }\n      });\n      if (!pending) {\n        resolve();\n      }\n    } catch (err) {\n      deferred.reject(err);\n    }\n    return deferred.promise;\n  }\n  _start(config, launcher, preprocess, fileList, capturedBrowsers, executor, done) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (config.detached) {\n        _this2._detach(config, done);\n        return;\n      }\n      _this2._fileList = fileList;\n      yield Promise.all(config.frameworks.map(framework => _this2._injector.get('framework:' + framework)));\n      const webServer = _this2._injector.get('webServer');\n      const socketServer = _this2._injector.get('socketServer');\n      const singleRunDoneBrowsers = Object.create(null);\n      const singleRunBrowsers = new BrowserCollection(new EventEmitter());\n      let singleRunBrowserNotCaptured = false;\n      webServer.on('error', err => {\n        _this2.log.error(`Webserver fail ${err}`);\n        _this2._close(1);\n      });\n      const afterPreprocess = () => {\n        if (config.autoWatch) {\n          const watcher = _this2.get('watcher');\n          _this2._injector.invoke(watcher);\n        }\n        webServer.listen(_this2._boundServer, () => {\n          _this2.log.info(`Karma v${constant.VERSION} server started at ${config.protocol}//${config.hostname}:${config.port}${config.urlRoot}`);\n          _this2.emit('listening', config.port);\n          if (config.browsers && config.browsers.length) {\n            _this2._injector.invoke(launcher.launch, launcher).forEach(browserLauncher => {\n              singleRunDoneBrowsers[browserLauncher.id] = false;\n            });\n          }\n          if (_this2.loadErrors.length > 0) {\n            _this2.log.error(new Error(`Found ${_this2.loadErrors.length} load error${_this2.loadErrors.length === 1 ? '' : 's'}`));\n            _this2._close(1);\n          }\n        });\n      };\n      fileList.refresh().then(afterPreprocess, err => {\n        _this2.log.error('Error during file loading or preprocessing\\n' + err.stack || err);\n        afterPreprocess();\n      });\n      _this2.on('browsers_change', () => socketServer.sockets.emit('info', capturedBrowsers.serialize()));\n      _this2.on('browser_register', browser => {\n        launcher.markCaptured(browser.id);\n        if (launcher.areAllCaptured()) {\n          _this2.emit('browsers_ready');\n          if (config.autoWatch) {\n            executor.schedule();\n          }\n        }\n      });\n      if (config.browserConsoleLogOptions && config.browserConsoleLogOptions.path) {\n        const configLevel = config.browserConsoleLogOptions.level || 'debug';\n        const configFormat = config.browserConsoleLogOptions.format || '%b %T: %m';\n        const configPath = config.browserConsoleLogOptions.path;\n        const configPathDir = path.dirname(configPath);\n        if (!fs.existsSync(configPathDir)) fs.mkdirSync(configPathDir, {\n          recursive: true\n        });\n        _this2.log.info(`Writing browser console to file: ${configPath}`);\n        const browserLogFile = fs.openSync(configPath, 'w+');\n        const levels = ['log', 'error', 'warn', 'info', 'debug'];\n        _this2.on('browser_log', function (browser, message, level) {\n          if (levels.indexOf(level.toLowerCase()) > levels.indexOf(configLevel)) {\n            return;\n          }\n          if (!helper.isString(message)) {\n            message = util.inspect(message, {\n              showHidden: false,\n              colors: false\n            });\n          }\n          const logMap = {\n            '%m': message,\n            '%t': level.toLowerCase(),\n            '%T': level.toUpperCase(),\n            '%b': browser\n          };\n          const logString = configFormat.replace(/%[mtTb]/g, m => logMap[m]);\n          this.log.debug(`Writing browser console line: ${logString}`);\n          fs.writeSync(browserLogFile, logString + '\\n');\n        });\n      }\n      socketServer.sockets.on('connection', socket => {\n        _this2.log.debug(`A browser has connected on socket ${socket.id}`);\n        const replySocketEvents = events.bufferEvents(socket, ['start', 'info', 'karma_error', 'result', 'complete']);\n        socket.on('error', err => {\n          _this2.log.debug('karma server socket error: ' + err);\n        });\n        socket.on('register', info => {\n          const knownBrowser = info.id ? capturedBrowsers.getById(info.id) || singleRunBrowsers.getById(info.id) : null;\n          if (knownBrowser) {\n            knownBrowser.reconnect(socket, info.isSocketReconnect);\n          } else {\n            const newBrowser = _this2._injector.createChild([{\n              id: ['value', info.id || null],\n              fullName: ['value', helper.isDefined(info.displayName) ? info.displayName : info.name],\n              socket: ['value', socket]\n            }]).invoke(Browser.factory);\n            newBrowser.init();\n            if (config.singleRun) {\n              newBrowser.execute();\n              singleRunBrowsers.add(newBrowser);\n            }\n          }\n          replySocketEvents();\n        });\n      });\n      const emitRunCompleteIfAllBrowsersDone = () => {\n        if (Object.keys(singleRunDoneBrowsers).every(key => singleRunDoneBrowsers[key])) {\n          _this2.emit('run_complete', singleRunBrowsers, singleRunBrowsers.getResults(singleRunBrowserNotCaptured, config));\n        }\n      };\n      _this2.on('browser_complete', completedBrowser => {\n        if (completedBrowser.lastResult.disconnected && completedBrowser.disconnectsCount <= config.browserDisconnectTolerance) {\n          _this2.log.info(`Restarting ${completedBrowser.name} (${completedBrowser.disconnectsCount} of ${config.browserDisconnectTolerance} attempts)`);\n          if (!launcher.restart(completedBrowser.id)) {\n            _this2.emit('browser_restart_failure', completedBrowser);\n          }\n        } else {\n          _this2.emit('browser_complete_with_no_more_retries', completedBrowser);\n        }\n      });\n      _this2.on('stop', done => {\n        _this2.log.debug('Received stop event, exiting.');\n        _this2._close();\n        done();\n      });\n      if (config.singleRun) {\n        _this2.on('browser_restart_failure', completedBrowser => {\n          singleRunDoneBrowsers[completedBrowser.id] = true;\n          emitRunCompleteIfAllBrowsersDone();\n        });\n\n        // This is the normal exit trigger.\n        _this2.on('browser_complete_with_no_more_retries', function (completedBrowser) {\n          singleRunDoneBrowsers[completedBrowser.id] = true;\n          if (launcher.kill(completedBrowser.id)) {\n            completedBrowser.remove();\n          }\n          emitRunCompleteIfAllBrowsersDone();\n        });\n        _this2.on('browser_process_failure', browserLauncher => {\n          singleRunDoneBrowsers[browserLauncher.id] = true;\n          singleRunBrowserNotCaptured = true;\n          emitRunCompleteIfAllBrowsersDone();\n        });\n        _this2.on('run_complete', (browsers, results) => {\n          _this2.log.debug('Run complete, exiting.');\n          _this2._close(results.exitCode);\n        });\n        _this2.emit('run_start', singleRunBrowsers);\n      }\n      if (config.autoWatch) {\n        _this2.on('file_list_modified', () => {\n          _this2.log.debug('List of files has changed, trying to execute');\n          if (config.restartOnFileChange) {\n            socketServer.sockets.emit('stop');\n          }\n          executor.schedule();\n        });\n      }\n      processWrapper.on('SIGINT', () => _this2._close());\n      processWrapper.on('SIGTERM', () => _this2._close());\n      const reportError = error => {\n        _this2.log.error(error);\n        process.emit('infrastructure_error', error);\n        _this2._close(1);\n      };\n      processWrapper.on('unhandledRejection', error => {\n        _this2.log.error(`UnhandledRejection: ${error.stack || error.message || String(error)}`);\n        reportError(error);\n      });\n      processWrapper.on('uncaughtException', error => {\n        _this2.log.error(`UncaughtException: ${error.stack || error.message || String(error)}`);\n        reportError(error);\n      });\n    })();\n  }\n  _detach(config, done) {\n    const tmpFile = tmp.fileSync({\n      keep: true\n    });\n    this.log.info('Starting karma detached');\n    this.log.info('Run \"karma stop\" to stop the server.');\n    this.log.debug(`Writing config to tmp-file ${tmpFile.name}`);\n    config.detached = false;\n    try {\n      fs.writeFileSync(tmpFile.name, JSON.stringify(config), 'utf8');\n    } catch (e) {\n      this.log.error(\"Couldn't write temporary configuration file\");\n      done(1);\n      return;\n    }\n    const child = spawn(process.argv[0], [path.resolve(__dirname, '../lib/detached.js'), tmpFile.name], {\n      detached: true,\n      stdio: 'ignore'\n    });\n    child.unref();\n  }\n\n  /**\n   * Cleanup all resources allocated by Karma and call the `done` callback\n   * with the result of the tests execution.\n   *\n   * @param [exitCode] - Optional exit code. If omitted will be computed by\n   * 'exit' event listeners.\n   */\n  _close(exitCode) {\n    const webServer = this._injector.get('webServer');\n    const socketServer = this._injector.get('socketServer');\n    const done = this._injector.get('done');\n    const webServerCloseTimeout = 3000;\n    const sockets = socketServer.sockets.sockets;\n    Object.keys(sockets).forEach(id => {\n      const socket = sockets[id];\n      socket.removeAllListeners('disconnect');\n      if (!socket.disconnected) {\n        process.nextTick(socket.disconnect.bind(socket));\n      }\n    });\n    this.emitExitAsync(exitCode).catch(err => {\n      this.log.error('Error while calling exit event listeners\\n' + err.stack || err);\n      return 1;\n    }).then(code => {\n      socketServer.sockets.removeAllListeners();\n      socketServer.close();\n      let removeAllListenersDone = false;\n      const removeAllListeners = () => {\n        if (removeAllListenersDone) {\n          return;\n        }\n        removeAllListenersDone = true;\n        webServer.removeAllListeners();\n        processWrapper.removeAllListeners();\n        done(code || 0);\n      };\n      const closeTimeout = setTimeout(removeAllListeners, webServerCloseTimeout);\n      webServer.close(() => {\n        clearTimeout(closeTimeout);\n        removeAllListeners();\n      });\n    });\n  }\n  stop() {\n    return this.emitAsync('stop');\n  }\n}\nServer.prototype._start.$inject = ['config', 'launcher', 'preprocess', 'fileList', 'capturedBrowsers', 'executor', 'done'];\nmodule.exports = Server;","map":{"version":3,"names":["SocketIO","require","di","util","spawn","tmp","fs","path","NetUtils","root","global","window","cfg","logger","constant","watcher","plugin","createServeFile","createServeStaticFile","createFilesPromise","createWebServer","preprocessor","Launcher","FileList","reporter","helper","events","KarmaEventEmitter","EventEmitter","Executor","Browser","BrowserCollection","EmitterWrapper","processWrapper","process","createSocketIoServer","webServer","executor","config","server","Server","destroyUpgrade","urlRoot","transports","forceJSONP","pingTimeout","maxHttpBufferSize","socketIoSockets","sockets","constructor","cliOptionsOrConfig","done","log","create","isFunction","exit","loadErrors","Config","setupFromConfig","colors","logLevel","deprecatedCliOptionsMessage","warn","parseConfig","configFile","promiseConfig","throwErrors","parseConfigError","debug","inspect","autoWatch","singleRun","modules","emitter","launcher","factory","instantiatePlugin","createInstantiatePlugin","preprocess","createPriorityPreprocessor","fileList","serveFile","serveStaticFile","filesPromise","socketServer","customFileHandlers","createReporters","capturedBrowsers","args","timer","setTimeout","apply","arguments","clearTimeout","on","type","name","push","concat","resolve","plugins","_injector","Injector","start","get","_boundServer","bindAvailablePort","port","listenAddress","socket","err","address","invoke","_start","error","_close","token","refreshFiles","_fileList","refresh","Promise","refreshFile","changeFile","emitExitAsync","code","pending","listeners","length","deferred","defer","emit","newCode","reject","promise","detached","_detach","all","frameworks","map","framework","singleRunDoneBrowsers","Object","singleRunBrowsers","singleRunBrowserNotCaptured","afterPreprocess","listen","info","VERSION","protocol","hostname","browsers","launch","forEach","browserLauncher","id","Error","then","stack","serialize","browser","markCaptured","areAllCaptured","schedule","browserConsoleLogOptions","configLevel","level","configFormat","format","configPath","configPathDir","dirname","existsSync","mkdirSync","recursive","browserLogFile","openSync","levels","message","indexOf","toLowerCase","isString","showHidden","logMap","toUpperCase","logString","replace","m","writeSync","replySocketEvents","bufferEvents","knownBrowser","getById","reconnect","isSocketReconnect","newBrowser","createChild","fullName","isDefined","displayName","init","execute","add","emitRunCompleteIfAllBrowsersDone","keys","every","key","getResults","completedBrowser","lastResult","disconnected","disconnectsCount","browserDisconnectTolerance","restart","kill","remove","results","exitCode","restartOnFileChange","reportError","String","tmpFile","fileSync","keep","writeFileSync","JSON","stringify","e","child","argv","__dirname","stdio","unref","webServerCloseTimeout","removeAllListeners","nextTick","disconnect","bind","catch","close","removeAllListenersDone","closeTimeout","stop","emitAsync","prototype","$inject","module","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/karma/lib/server.js"],"sourcesContent":["'use strict'\n\nconst SocketIO = require('socket.io')\nconst di = require('di')\nconst util = require('util')\nconst spawn = require('child_process').spawn\nconst tmp = require('tmp')\nconst fs = require('fs')\nconst path = require('path')\n\nconst NetUtils = require('./utils/net-utils')\nconst root = global || window || this\n\nconst cfg = require('./config')\nconst logger = require('./logger')\nconst constant = require('./constants')\nconst watcher = require('./watcher')\nconst plugin = require('./plugin')\n\nconst createServeFile = require('./web-server').createServeFile\nconst createServeStaticFile = require('./web-server').createServeStaticFile\nconst createFilesPromise = require('./web-server').createFilesPromise\nconst createWebServer = require('./web-server').createWebServer\nconst preprocessor = require('./preprocessor')\nconst Launcher = require('./launcher').Launcher\nconst FileList = require('./file-list')\nconst reporter = require('./reporter')\nconst helper = require('./helper')\nconst events = require('./events')\nconst KarmaEventEmitter = events.EventEmitter\nconst EventEmitter = require('events').EventEmitter\nconst Executor = require('./executor')\nconst Browser = require('./browser')\nconst BrowserCollection = require('./browser_collection')\nconst EmitterWrapper = require('./emitter_wrapper')\nconst processWrapper = new EmitterWrapper(process)\n\nfunction createSocketIoServer (webServer, executor, config) {\n  const server = new SocketIO.Server(webServer, {\n    // avoid destroying http upgrades from socket.io to get proxied websockets working\n    destroyUpgrade: false,\n    path: config.urlRoot + 'socket.io/',\n    transports: config.transports,\n    forceJSONP: config.forceJSONP,\n    // Default is 5000 in socket.io v2.x and v3.x.\n    pingTimeout: config.pingTimeout || 5000,\n    // Default in v2 is 1e8 and coverage results can fail at 1e6\n    maxHttpBufferSize: 1e8\n  })\n\n  // hack to overcome circular dependency\n  executor.socketIoSockets = server.sockets\n\n  return server\n}\n\nclass Server extends KarmaEventEmitter {\n  constructor (cliOptionsOrConfig, done) {\n    super()\n    cliOptionsOrConfig = cliOptionsOrConfig || {}\n    this.log = logger.create('karma-server')\n    done = helper.isFunction(done) ? done : process.exit\n    this.loadErrors = []\n\n    let config\n    if (cliOptionsOrConfig instanceof cfg.Config) {\n      config = cliOptionsOrConfig\n    } else {\n      logger.setupFromConfig({\n        colors: cliOptionsOrConfig.colors,\n        logLevel: cliOptionsOrConfig.logLevel\n      })\n      const deprecatedCliOptionsMessage =\n        'Passing raw CLI options to `new Server(config, done)` is ' +\n        'deprecated. Use ' +\n        '`parseConfig(configFilePath, cliOptions, {promiseConfig: true, throwErrors: true})` ' +\n        'to prepare a processed `Config` instance and pass that as the ' +\n        '`config` argument instead.'\n      this.log.warn(deprecatedCliOptionsMessage)\n      try {\n        config = cfg.parseConfig(\n          cliOptionsOrConfig.configFile,\n          cliOptionsOrConfig,\n          {\n            promiseConfig: false,\n            throwErrors: true\n          }\n        )\n      } catch (parseConfigError) {\n        // TODO: change how `done` falls back to exit in next major version\n        //  SEE: https://github.com/karma-runner/karma/pull/3635#discussion_r565399378\n        done(1)\n        return\n      }\n    }\n\n    this.log.debug('Final config', util.inspect(config, false, /** depth **/ null))\n\n    if (!config.autoWatch && !config.singleRun) {\n      this.log.warn('`autowatch` and `singleRun` are both `false`. In order to execute tests use `karma run`.')\n    }\n\n    let modules = [{\n      helper: ['value', helper],\n      logger: ['value', logger],\n      done: ['value', done || process.exit],\n      emitter: ['value', this],\n      server: ['value', this],\n      watcher: ['value', watcher],\n      launcher: ['factory', Launcher.factory],\n      config: ['value', config],\n      instantiatePlugin: ['factory', plugin.createInstantiatePlugin],\n      preprocess: ['factory', preprocessor.createPriorityPreprocessor],\n      fileList: ['factory', FileList.factory],\n      webServer: ['factory', createWebServer],\n      serveFile: ['factory', createServeFile],\n      serveStaticFile: ['factory', createServeStaticFile],\n      filesPromise: ['factory', createFilesPromise],\n      socketServer: ['factory', createSocketIoServer],\n      executor: ['factory', Executor.factory],\n      // TODO: Deprecated. Remove in the next major\n      customFileHandlers: ['value', []],\n      reporter: ['factory', reporter.createReporters],\n      capturedBrowsers: ['factory', BrowserCollection.factory],\n      args: ['value', {}],\n      timer: ['value', {\n        setTimeout () {\n          return setTimeout.apply(root, arguments)\n        },\n        clearTimeout\n      }]\n    }]\n\n    this.on('load_error', (type, name) => {\n      this.log.debug(`Registered a load error of type ${type} with name ${name}`)\n      this.loadErrors.push([type, name])\n    })\n\n    modules = modules.concat(plugin.resolve(config.plugins, this))\n    this._injector = new di.Injector(modules)\n  }\n\n  async start () {\n    const config = this.get('config')\n    try {\n      this._boundServer = await NetUtils.bindAvailablePort(config.port, config.listenAddress)\n      this._boundServer.on('connection', (socket) => {\n        // Attach an error handler to avoid UncaughtException errors.\n        socket.on('error', (err) => {\n          // Errors on this socket are retried, ignore them\n          this.log.debug('Ignoring error on webserver connection: ' + err)\n        })\n      })\n      config.port = this._boundServer.address().port\n      await this._injector.invoke(this._start, this)\n    } catch (err) {\n      this.log.error(`Server start failed on port ${config.port}: ${err}`)\n      this._close(1)\n    }\n  }\n\n  get (token) {\n    return this._injector.get(token)\n  }\n\n  refreshFiles () {\n    return this._fileList ? this._fileList.refresh() : Promise.resolve()\n  }\n\n  refreshFile (path) {\n    return this._fileList ? this._fileList.changeFile(path) : Promise.resolve()\n  }\n\n  emitExitAsync (code) {\n    const name = 'exit'\n    let pending = this.listeners(name).length\n    const deferred = helper.defer()\n\n    function resolve () {\n      deferred.resolve(code)\n    }\n\n    try {\n      this.emit(name, (newCode) => {\n        if (newCode && typeof newCode === 'number') {\n          // Only update code if it is given and not zero\n          code = newCode\n        }\n        if (!--pending) {\n          resolve()\n        }\n      })\n\n      if (!pending) {\n        resolve()\n      }\n    } catch (err) {\n      deferred.reject(err)\n    }\n    return deferred.promise\n  }\n\n  async _start (config, launcher, preprocess, fileList, capturedBrowsers, executor, done) {\n    if (config.detached) {\n      this._detach(config, done)\n      return\n    }\n\n    this._fileList = fileList\n\n    await Promise.all(\n      config.frameworks.map((framework) => this._injector.get('framework:' + framework))\n    )\n\n    const webServer = this._injector.get('webServer')\n    const socketServer = this._injector.get('socketServer')\n\n    const singleRunDoneBrowsers = Object.create(null)\n    const singleRunBrowsers = new BrowserCollection(new EventEmitter())\n    let singleRunBrowserNotCaptured = false\n\n    webServer.on('error', (err) => {\n      this.log.error(`Webserver fail ${err}`)\n      this._close(1)\n    })\n\n    const afterPreprocess = () => {\n      if (config.autoWatch) {\n        const watcher = this.get('watcher')\n        this._injector.invoke(watcher)\n      }\n\n      webServer.listen(this._boundServer, () => {\n        this.log.info(`Karma v${constant.VERSION} server started at ${config.protocol}//${config.hostname}:${config.port}${config.urlRoot}`)\n\n        this.emit('listening', config.port)\n        if (config.browsers && config.browsers.length) {\n          this._injector.invoke(launcher.launch, launcher).forEach((browserLauncher) => {\n            singleRunDoneBrowsers[browserLauncher.id] = false\n          })\n        }\n        if (this.loadErrors.length > 0) {\n          this.log.error(new Error(`Found ${this.loadErrors.length} load error${this.loadErrors.length === 1 ? '' : 's'}`))\n          this._close(1)\n        }\n      })\n    }\n\n    fileList.refresh().then(afterPreprocess, (err) => {\n      this.log.error('Error during file loading or preprocessing\\n' + err.stack || err)\n      afterPreprocess()\n    })\n\n    this.on('browsers_change', () => socketServer.sockets.emit('info', capturedBrowsers.serialize()))\n\n    this.on('browser_register', (browser) => {\n      launcher.markCaptured(browser.id)\n\n      if (launcher.areAllCaptured()) {\n        this.emit('browsers_ready')\n\n        if (config.autoWatch) {\n          executor.schedule()\n        }\n      }\n    })\n\n    if (config.browserConsoleLogOptions && config.browserConsoleLogOptions.path) {\n      const configLevel = config.browserConsoleLogOptions.level || 'debug'\n      const configFormat = config.browserConsoleLogOptions.format || '%b %T: %m'\n      const configPath = config.browserConsoleLogOptions.path\n      const configPathDir = path.dirname(configPath)\n      if (!fs.existsSync(configPathDir)) fs.mkdirSync(configPathDir, { recursive: true })\n      this.log.info(`Writing browser console to file: ${configPath}`)\n      const browserLogFile = fs.openSync(configPath, 'w+')\n      const levels = ['log', 'error', 'warn', 'info', 'debug']\n      this.on('browser_log', function (browser, message, level) {\n        if (levels.indexOf(level.toLowerCase()) > levels.indexOf(configLevel)) {\n          return\n        }\n        if (!helper.isString(message)) {\n          message = util.inspect(message, { showHidden: false, colors: false })\n        }\n        const logMap = { '%m': message, '%t': level.toLowerCase(), '%T': level.toUpperCase(), '%b': browser }\n        const logString = configFormat.replace(/%[mtTb]/g, (m) => logMap[m])\n        this.log.debug(`Writing browser console line: ${logString}`)\n        fs.writeSync(browserLogFile, logString + '\\n')\n      })\n    }\n\n    socketServer.sockets.on('connection', (socket) => {\n      this.log.debug(`A browser has connected on socket ${socket.id}`)\n\n      const replySocketEvents = events.bufferEvents(socket, ['start', 'info', 'karma_error', 'result', 'complete'])\n\n      socket.on('error', (err) => {\n        this.log.debug('karma server socket error: ' + err)\n      })\n\n      socket.on('register', (info) => {\n        const knownBrowser = info.id ? (capturedBrowsers.getById(info.id) || singleRunBrowsers.getById(info.id)) : null\n\n        if (knownBrowser) {\n          knownBrowser.reconnect(socket, info.isSocketReconnect)\n        } else {\n          const newBrowser = this._injector.createChild([{\n            id: ['value', info.id || null],\n            fullName: ['value', (helper.isDefined(info.displayName) ? info.displayName : info.name)],\n            socket: ['value', socket]\n          }]).invoke(Browser.factory)\n\n          newBrowser.init()\n\n          if (config.singleRun) {\n            newBrowser.execute()\n            singleRunBrowsers.add(newBrowser)\n          }\n        }\n\n        replySocketEvents()\n      })\n    })\n\n    const emitRunCompleteIfAllBrowsersDone = () => {\n      if (Object.keys(singleRunDoneBrowsers).every((key) => singleRunDoneBrowsers[key])) {\n        this.emit('run_complete', singleRunBrowsers, singleRunBrowsers.getResults(singleRunBrowserNotCaptured, config))\n      }\n    }\n\n    this.on('browser_complete', (completedBrowser) => {\n      if (completedBrowser.lastResult.disconnected && completedBrowser.disconnectsCount <= config.browserDisconnectTolerance) {\n        this.log.info(`Restarting ${completedBrowser.name} (${completedBrowser.disconnectsCount} of ${config.browserDisconnectTolerance} attempts)`)\n\n        if (!launcher.restart(completedBrowser.id)) {\n          this.emit('browser_restart_failure', completedBrowser)\n        }\n      } else {\n        this.emit('browser_complete_with_no_more_retries', completedBrowser)\n      }\n    })\n\n    this.on('stop', (done) => {\n      this.log.debug('Received stop event, exiting.')\n      this._close()\n      done()\n    })\n\n    if (config.singleRun) {\n      this.on('browser_restart_failure', (completedBrowser) => {\n        singleRunDoneBrowsers[completedBrowser.id] = true\n        emitRunCompleteIfAllBrowsersDone()\n      })\n\n      // This is the normal exit trigger.\n      this.on('browser_complete_with_no_more_retries', function (completedBrowser) {\n        singleRunDoneBrowsers[completedBrowser.id] = true\n\n        if (launcher.kill(completedBrowser.id)) {\n          completedBrowser.remove()\n        }\n\n        emitRunCompleteIfAllBrowsersDone()\n      })\n\n      this.on('browser_process_failure', (browserLauncher) => {\n        singleRunDoneBrowsers[browserLauncher.id] = true\n        singleRunBrowserNotCaptured = true\n\n        emitRunCompleteIfAllBrowsersDone()\n      })\n\n      this.on('run_complete', (browsers, results) => {\n        this.log.debug('Run complete, exiting.')\n        this._close(results.exitCode)\n      })\n\n      this.emit('run_start', singleRunBrowsers)\n    }\n\n    if (config.autoWatch) {\n      this.on('file_list_modified', () => {\n        this.log.debug('List of files has changed, trying to execute')\n        if (config.restartOnFileChange) {\n          socketServer.sockets.emit('stop')\n        }\n        executor.schedule()\n      })\n    }\n\n    processWrapper.on('SIGINT', () => this._close())\n    processWrapper.on('SIGTERM', () => this._close())\n\n    const reportError = (error) => {\n      this.log.error(error)\n      process.emit('infrastructure_error', error)\n      this._close(1)\n    }\n\n    processWrapper.on('unhandledRejection', (error) => {\n      this.log.error(`UnhandledRejection: ${error.stack || error.message || String(error)}`)\n      reportError(error)\n    })\n\n    processWrapper.on('uncaughtException', (error) => {\n      this.log.error(`UncaughtException: ${error.stack || error.message || String(error)}`)\n      reportError(error)\n    })\n  }\n\n  _detach (config, done) {\n    const tmpFile = tmp.fileSync({ keep: true })\n    this.log.info('Starting karma detached')\n    this.log.info('Run \"karma stop\" to stop the server.')\n    this.log.debug(`Writing config to tmp-file ${tmpFile.name}`)\n    config.detached = false\n    try {\n      fs.writeFileSync(tmpFile.name, JSON.stringify(config), 'utf8')\n    } catch (e) {\n      this.log.error(\"Couldn't write temporary configuration file\")\n      done(1)\n      return\n    }\n    const child = spawn(process.argv[0], [path.resolve(__dirname, '../lib/detached.js'), tmpFile.name], {\n      detached: true,\n      stdio: 'ignore'\n    })\n    child.unref()\n  }\n\n  /**\n   * Cleanup all resources allocated by Karma and call the `done` callback\n   * with the result of the tests execution.\n   *\n   * @param [exitCode] - Optional exit code. If omitted will be computed by\n   * 'exit' event listeners.\n   */\n  _close (exitCode) {\n    const webServer = this._injector.get('webServer')\n    const socketServer = this._injector.get('socketServer')\n    const done = this._injector.get('done')\n\n    const webServerCloseTimeout = 3000\n    const sockets = socketServer.sockets.sockets\n\n    Object.keys(sockets).forEach((id) => {\n      const socket = sockets[id]\n      socket.removeAllListeners('disconnect')\n      if (!socket.disconnected) {\n        process.nextTick(socket.disconnect.bind(socket))\n      }\n    })\n\n    this.emitExitAsync(exitCode).catch((err) => {\n      this.log.error('Error while calling exit event listeners\\n' + err.stack || err)\n      return 1\n    }).then((code) => {\n      socketServer.sockets.removeAllListeners()\n      socketServer.close()\n\n      let removeAllListenersDone = false\n      const removeAllListeners = () => {\n        if (removeAllListenersDone) {\n          return\n        }\n        removeAllListenersDone = true\n        webServer.removeAllListeners()\n        processWrapper.removeAllListeners()\n        done(code || 0)\n      }\n\n      const closeTimeout = setTimeout(removeAllListeners, webServerCloseTimeout)\n\n      webServer.close(() => {\n        clearTimeout(closeTimeout)\n        removeAllListeners()\n      })\n    })\n  }\n\n  stop () {\n    return this.emitAsync('stop')\n  }\n}\n\nServer.prototype._start.$inject = ['config', 'launcher', 'preprocess', 'fileList', 'capturedBrowsers', 'executor', 'done']\n\nmodule.exports = Server\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}