{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformSupportedBrowsersToTargets = void 0;\n/**\n * Transform browserlists result to esbuild target.\n * @see https://esbuild.github.io/api/#target\n */\nfunction transformSupportedBrowsersToTargets(supportedBrowsers) {\n  const transformed = [];\n  // https://esbuild.github.io/api/#target\n  const esBuildSupportedBrowsers = new Set(['chrome', 'edge', 'firefox', 'ie', 'ios', 'node', 'opera', 'safari']);\n  for (const browser of supportedBrowsers) {\n    let [browserName, version] = browser.toLowerCase().split(' ');\n    // browserslist uses the name `ios_saf` for iOS Safari whereas esbuild uses `ios`\n    if (browserName === 'ios_saf') {\n      browserName = 'ios';\n    }\n    // browserslist uses ranges `15.2-15.3` versions but only the lowest is required\n    // to perform minimum supported feature checks. esbuild also expects a single version.\n    [version] = version.split('-');\n    if (esBuildSupportedBrowsers.has(browserName)) {\n      if (browserName === 'safari' && version === 'TP') {\n        // esbuild only supports numeric versions so `TP` is converted to a high number (999) since\n        // a Technology Preview (TP) of Safari is assumed to support all currently known features.\n        version = '999';\n      } else if (!version.includes('.')) {\n        // A lone major version is considered by esbuild to include all minor versions. However,\n        // browserslist does not and is also inconsistent in its `.0` version naming. For example,\n        // Safari 15.0 is named `safari 15` but Safari 16.0 is named `safari 16.0`.\n        version += '.0';\n      }\n      transformed.push(browserName + version);\n    }\n  }\n  return transformed;\n}\nexports.transformSupportedBrowsersToTargets = transformSupportedBrowsersToTargets;","map":{"version":3,"names":["Object","defineProperty","exports","value","transformSupportedBrowsersToTargets","supportedBrowsers","transformed","esBuildSupportedBrowsers","Set","browser","browserName","version","toLowerCase","split","has","includes","push"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@angular-devkit/build-angular/src/utils/esbuild-targets.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformSupportedBrowsersToTargets = void 0;\n/**\n * Transform browserlists result to esbuild target.\n * @see https://esbuild.github.io/api/#target\n */\nfunction transformSupportedBrowsersToTargets(supportedBrowsers) {\n    const transformed = [];\n    // https://esbuild.github.io/api/#target\n    const esBuildSupportedBrowsers = new Set([\n        'chrome',\n        'edge',\n        'firefox',\n        'ie',\n        'ios',\n        'node',\n        'opera',\n        'safari',\n    ]);\n    for (const browser of supportedBrowsers) {\n        let [browserName, version] = browser.toLowerCase().split(' ');\n        // browserslist uses the name `ios_saf` for iOS Safari whereas esbuild uses `ios`\n        if (browserName === 'ios_saf') {\n            browserName = 'ios';\n        }\n        // browserslist uses ranges `15.2-15.3` versions but only the lowest is required\n        // to perform minimum supported feature checks. esbuild also expects a single version.\n        [version] = version.split('-');\n        if (esBuildSupportedBrowsers.has(browserName)) {\n            if (browserName === 'safari' && version === 'TP') {\n                // esbuild only supports numeric versions so `TP` is converted to a high number (999) since\n                // a Technology Preview (TP) of Safari is assumed to support all currently known features.\n                version = '999';\n            }\n            else if (!version.includes('.')) {\n                // A lone major version is considered by esbuild to include all minor versions. However,\n                // browserslist does not and is also inconsistent in its `.0` version naming. For example,\n                // Safari 15.0 is named `safari 15` but Safari 16.0 is named `safari 16.0`.\n                version += '.0';\n            }\n            transformed.push(browserName + version);\n        }\n    }\n    return transformed;\n}\nexports.transformSupportedBrowsersToTargets = transformSupportedBrowsersToTargets;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,mCAAmC,GAAG,KAAK,CAAC;AACpD;AACA;AACA;AACA;AACA,SAASA,mCAAmC,CAACC,iBAAiB,EAAE;EAC5D,MAAMC,WAAW,GAAG,EAAE;EACtB;EACA,MAAMC,wBAAwB,GAAG,IAAIC,GAAG,CAAC,CACrC,QAAQ,EACR,MAAM,EACN,SAAS,EACT,IAAI,EACJ,KAAK,EACL,MAAM,EACN,OAAO,EACP,QAAQ,CACX,CAAC;EACF,KAAK,MAAMC,OAAO,IAAIJ,iBAAiB,EAAE;IACrC,IAAI,CAACK,WAAW,EAAEC,OAAO,CAAC,GAAGF,OAAO,CAACG,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC;IAC7D;IACA,IAAIH,WAAW,KAAK,SAAS,EAAE;MAC3BA,WAAW,GAAG,KAAK;IACvB;IACA;IACA;IACA,CAACC,OAAO,CAAC,GAAGA,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC;IAC9B,IAAIN,wBAAwB,CAACO,GAAG,CAACJ,WAAW,CAAC,EAAE;MAC3C,IAAIA,WAAW,KAAK,QAAQ,IAAIC,OAAO,KAAK,IAAI,EAAE;QAC9C;QACA;QACAA,OAAO,GAAG,KAAK;MACnB,CAAC,MACI,IAAI,CAACA,OAAO,CAACI,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC7B;QACA;QACA;QACAJ,OAAO,IAAI,IAAI;MACnB;MACAL,WAAW,CAACU,IAAI,CAACN,WAAW,GAAGC,OAAO,CAAC;IAC3C;EACJ;EACA,OAAOL,WAAW;AACtB;AACAJ,OAAO,CAACE,mCAAmC,GAAGA,mCAAmC"},"metadata":{},"sourceType":"script","externalDependencies":[]}