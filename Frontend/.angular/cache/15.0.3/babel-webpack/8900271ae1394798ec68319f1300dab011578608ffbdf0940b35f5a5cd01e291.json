{"ast":null,"code":"'use strict';\n\nconst BrowserResult = require('./browser_result');\nconst helper = require('./helper');\nclass BrowserCollection {\n  constructor(emitter, browsers = []) {\n    this.browsers = browsers;\n    this.emitter = emitter;\n  }\n  add(browser) {\n    this.browsers.push(browser);\n    this.emitter.emit('browsers_change', this);\n  }\n  remove(browser) {\n    if (helper.arrayRemove(this.browsers, browser)) {\n      this.emitter.emit('browsers_change', this);\n      return true;\n    }\n    return false;\n  }\n  getById(browserId) {\n    return this.browsers.find(browser => browser.id === browserId) || null;\n  }\n  getNonReady() {\n    return this.browsers.filter(browser => !browser.isConnected());\n  }\n  areAllReady() {\n    return this.browsers.every(browser => browser.isConnected());\n  }\n  serialize() {\n    return this.browsers.map(browser => browser.serialize());\n  }\n  calculateExitCode(results, singleRunBrowserNotCaptured, config) {\n    config = config || {};\n    if (results.disconnected || singleRunBrowserNotCaptured) {\n      return 1;\n    }\n    if (results.skipped && config.failOnSkippedTests) {\n      return 1;\n    }\n    if (results.success + results.failed === 0 && !!config.failOnEmptyTestSuite) {\n      return 1;\n    }\n    if (results.error) {\n      return 1;\n    }\n    if (config.failOnFailingTestSuite === false) {\n      return 0; // Tests executed without infrastructure error, exit with 0 independent of test status.\n    }\n\n    return results.failed ? 1 : 0;\n  }\n  getResults(singleRunBrowserNotCaptured, config) {\n    const results = {\n      success: 0,\n      failed: 0,\n      skipped: 0,\n      error: false,\n      disconnected: false,\n      exitCode: 0\n    };\n    this.browsers.forEach(browser => {\n      results.success += browser.lastResult.success;\n      results.failed += browser.lastResult.failed;\n      results.skipped += browser.lastResult.skipped;\n      results.error = results.error || browser.lastResult.error;\n      results.disconnected = results.disconnected || browser.lastResult.disconnected;\n    });\n    results.exitCode = this.calculateExitCode(results, singleRunBrowserNotCaptured, config);\n    return results;\n  }\n  clearResults() {\n    this.browsers.forEach(browser => {\n      browser.lastResult = new BrowserResult();\n    });\n  }\n  clone() {\n    return new BrowserCollection(this.emitter, this.browsers.slice());\n  }\n\n  // Array APIs\n  map(callback, context) {\n    return this.browsers.map(callback, context);\n  }\n  forEach(callback, context) {\n    return this.browsers.forEach(callback, context);\n  }\n  get length() {\n    return this.browsers.length;\n  }\n}\nBrowserCollection.factory = function (emitter) {\n  return new BrowserCollection(emitter);\n};\nmodule.exports = BrowserCollection;","map":{"version":3,"names":["BrowserResult","require","helper","BrowserCollection","constructor","emitter","browsers","add","browser","push","emit","remove","arrayRemove","getById","browserId","find","id","getNonReady","filter","isConnected","areAllReady","every","serialize","map","calculateExitCode","results","singleRunBrowserNotCaptured","config","disconnected","skipped","failOnSkippedTests","success","failed","failOnEmptyTestSuite","error","failOnFailingTestSuite","getResults","exitCode","forEach","lastResult","clearResults","clone","slice","callback","context","length","factory","module","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/karma/lib/browser_collection.js"],"sourcesContent":["'use strict'\n\nconst BrowserResult = require('./browser_result')\nconst helper = require('./helper')\n\nclass BrowserCollection {\n  constructor (emitter, browsers = []) {\n    this.browsers = browsers\n    this.emitter = emitter\n  }\n\n  add (browser) {\n    this.browsers.push(browser)\n    this.emitter.emit('browsers_change', this)\n  }\n\n  remove (browser) {\n    if (helper.arrayRemove(this.browsers, browser)) {\n      this.emitter.emit('browsers_change', this)\n      return true\n    }\n    return false\n  }\n\n  getById (browserId) {\n    return this.browsers.find((browser) => browser.id === browserId) || null\n  }\n\n  getNonReady () {\n    return this.browsers.filter((browser) => !browser.isConnected())\n  }\n\n  areAllReady () {\n    return this.browsers.every((browser) => browser.isConnected())\n  }\n\n  serialize () {\n    return this.browsers.map((browser) => browser.serialize())\n  }\n\n  calculateExitCode (results, singleRunBrowserNotCaptured, config) {\n    config = config || {}\n    if (results.disconnected || singleRunBrowserNotCaptured) {\n      return 1\n    }\n    if (results.skipped && config.failOnSkippedTests) {\n      return 1\n    }\n    if (results.success + results.failed === 0 && !!config.failOnEmptyTestSuite) {\n      return 1\n    }\n    if (results.error) {\n      return 1\n    }\n    if (config.failOnFailingTestSuite === false) {\n      return 0 // Tests executed without infrastructure error, exit with 0 independent of test status.\n    }\n    return results.failed ? 1 : 0\n  }\n\n  getResults (singleRunBrowserNotCaptured, config) {\n    const results = { success: 0, failed: 0, skipped: 0, error: false, disconnected: false, exitCode: 0 }\n    this.browsers.forEach((browser) => {\n      results.success += browser.lastResult.success\n      results.failed += browser.lastResult.failed\n      results.skipped += browser.lastResult.skipped\n      results.error = results.error || browser.lastResult.error\n      results.disconnected = results.disconnected || browser.lastResult.disconnected\n    })\n\n    results.exitCode = this.calculateExitCode(results, singleRunBrowserNotCaptured, config)\n    return results\n  }\n\n  clearResults () {\n    this.browsers.forEach((browser) => {\n      browser.lastResult = new BrowserResult()\n    })\n  }\n\n  clone () {\n    return new BrowserCollection(this.emitter, this.browsers.slice())\n  }\n\n  // Array APIs\n  map (callback, context) {\n    return this.browsers.map(callback, context)\n  }\n\n  forEach (callback, context) {\n    return this.browsers.forEach(callback, context)\n  }\n\n  get length () {\n    return this.browsers.length\n  }\n}\n\nBrowserCollection.factory = function (emitter) {\n  return new BrowserCollection(emitter)\n}\n\nmodule.exports = BrowserCollection\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACjD,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAElC,MAAME,iBAAiB,CAAC;EACtBC,WAAW,CAAEC,OAAO,EAAEC,QAAQ,GAAG,EAAE,EAAE;IACnC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACD,OAAO,GAAGA,OAAO;EACxB;EAEAE,GAAG,CAAEC,OAAO,EAAE;IACZ,IAAI,CAACF,QAAQ,CAACG,IAAI,CAACD,OAAO,CAAC;IAC3B,IAAI,CAACH,OAAO,CAACK,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC;EAC5C;EAEAC,MAAM,CAAEH,OAAO,EAAE;IACf,IAAIN,MAAM,CAACU,WAAW,CAAC,IAAI,CAACN,QAAQ,EAAEE,OAAO,CAAC,EAAE;MAC9C,IAAI,CAACH,OAAO,CAACK,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC;MAC1C,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAEAG,OAAO,CAAEC,SAAS,EAAE;IAClB,OAAO,IAAI,CAACR,QAAQ,CAACS,IAAI,CAAEP,OAAO,IAAKA,OAAO,CAACQ,EAAE,KAAKF,SAAS,CAAC,IAAI,IAAI;EAC1E;EAEAG,WAAW,GAAI;IACb,OAAO,IAAI,CAACX,QAAQ,CAACY,MAAM,CAAEV,OAAO,IAAK,CAACA,OAAO,CAACW,WAAW,EAAE,CAAC;EAClE;EAEAC,WAAW,GAAI;IACb,OAAO,IAAI,CAACd,QAAQ,CAACe,KAAK,CAAEb,OAAO,IAAKA,OAAO,CAACW,WAAW,EAAE,CAAC;EAChE;EAEAG,SAAS,GAAI;IACX,OAAO,IAAI,CAAChB,QAAQ,CAACiB,GAAG,CAAEf,OAAO,IAAKA,OAAO,CAACc,SAAS,EAAE,CAAC;EAC5D;EAEAE,iBAAiB,CAAEC,OAAO,EAAEC,2BAA2B,EAAEC,MAAM,EAAE;IAC/DA,MAAM,GAAGA,MAAM,IAAI,CAAC,CAAC;IACrB,IAAIF,OAAO,CAACG,YAAY,IAAIF,2BAA2B,EAAE;MACvD,OAAO,CAAC;IACV;IACA,IAAID,OAAO,CAACI,OAAO,IAAIF,MAAM,CAACG,kBAAkB,EAAE;MAChD,OAAO,CAAC;IACV;IACA,IAAIL,OAAO,CAACM,OAAO,GAAGN,OAAO,CAACO,MAAM,KAAK,CAAC,IAAI,CAAC,CAACL,MAAM,CAACM,oBAAoB,EAAE;MAC3E,OAAO,CAAC;IACV;IACA,IAAIR,OAAO,CAACS,KAAK,EAAE;MACjB,OAAO,CAAC;IACV;IACA,IAAIP,MAAM,CAACQ,sBAAsB,KAAK,KAAK,EAAE;MAC3C,OAAO,CAAC,EAAC;IACX;;IACA,OAAOV,OAAO,CAACO,MAAM,GAAG,CAAC,GAAG,CAAC;EAC/B;EAEAI,UAAU,CAAEV,2BAA2B,EAAEC,MAAM,EAAE;IAC/C,MAAMF,OAAO,GAAG;MAAEM,OAAO,EAAE,CAAC;MAAEC,MAAM,EAAE,CAAC;MAAEH,OAAO,EAAE,CAAC;MAAEK,KAAK,EAAE,KAAK;MAAEN,YAAY,EAAE,KAAK;MAAES,QAAQ,EAAE;IAAE,CAAC;IACrG,IAAI,CAAC/B,QAAQ,CAACgC,OAAO,CAAE9B,OAAO,IAAK;MACjCiB,OAAO,CAACM,OAAO,IAAIvB,OAAO,CAAC+B,UAAU,CAACR,OAAO;MAC7CN,OAAO,CAACO,MAAM,IAAIxB,OAAO,CAAC+B,UAAU,CAACP,MAAM;MAC3CP,OAAO,CAACI,OAAO,IAAIrB,OAAO,CAAC+B,UAAU,CAACV,OAAO;MAC7CJ,OAAO,CAACS,KAAK,GAAGT,OAAO,CAACS,KAAK,IAAI1B,OAAO,CAAC+B,UAAU,CAACL,KAAK;MACzDT,OAAO,CAACG,YAAY,GAAGH,OAAO,CAACG,YAAY,IAAIpB,OAAO,CAAC+B,UAAU,CAACX,YAAY;IAChF,CAAC,CAAC;IAEFH,OAAO,CAACY,QAAQ,GAAG,IAAI,CAACb,iBAAiB,CAACC,OAAO,EAAEC,2BAA2B,EAAEC,MAAM,CAAC;IACvF,OAAOF,OAAO;EAChB;EAEAe,YAAY,GAAI;IACd,IAAI,CAAClC,QAAQ,CAACgC,OAAO,CAAE9B,OAAO,IAAK;MACjCA,OAAO,CAAC+B,UAAU,GAAG,IAAIvC,aAAa,EAAE;IAC1C,CAAC,CAAC;EACJ;EAEAyC,KAAK,GAAI;IACP,OAAO,IAAItC,iBAAiB,CAAC,IAAI,CAACE,OAAO,EAAE,IAAI,CAACC,QAAQ,CAACoC,KAAK,EAAE,CAAC;EACnE;;EAEA;EACAnB,GAAG,CAAEoB,QAAQ,EAAEC,OAAO,EAAE;IACtB,OAAO,IAAI,CAACtC,QAAQ,CAACiB,GAAG,CAACoB,QAAQ,EAAEC,OAAO,CAAC;EAC7C;EAEAN,OAAO,CAAEK,QAAQ,EAAEC,OAAO,EAAE;IAC1B,OAAO,IAAI,CAACtC,QAAQ,CAACgC,OAAO,CAACK,QAAQ,EAAEC,OAAO,CAAC;EACjD;EAEA,IAAIC,MAAM,GAAI;IACZ,OAAO,IAAI,CAACvC,QAAQ,CAACuC,MAAM;EAC7B;AACF;AAEA1C,iBAAiB,CAAC2C,OAAO,GAAG,UAAUzC,OAAO,EAAE;EAC7C,OAAO,IAAIF,iBAAiB,CAACE,OAAO,CAAC;AACvC,CAAC;AAED0C,MAAM,CAACC,OAAO,GAAG7C,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}