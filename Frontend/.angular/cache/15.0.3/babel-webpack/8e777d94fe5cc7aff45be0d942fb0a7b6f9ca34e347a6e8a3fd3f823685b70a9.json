{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst {\n  constants: BufferConstants\n} = require('buffer');\nconst stream = require('stream');\nconst {\n  promisify\n} = require('util');\nconst bufferStream = require('./buffer-stream');\nconst streamPipelinePromisified = promisify(stream.pipeline);\nclass MaxBufferError extends Error {\n  constructor() {\n    super('maxBuffer exceeded');\n    this.name = 'MaxBufferError';\n  }\n}\nfunction getStream(_x, _x2) {\n  return _getStream.apply(this, arguments);\n}\nfunction _getStream() {\n  _getStream = _asyncToGenerator(function* (inputStream, options) {\n    if (!inputStream) {\n      throw new Error('Expected a stream');\n    }\n    options = {\n      maxBuffer: Infinity,\n      ...options\n    };\n    const {\n      maxBuffer\n    } = options;\n    const stream = bufferStream(options);\n    yield new Promise((resolve, reject) => {\n      const rejectPromise = error => {\n        // Don't retrieve an oversized buffer.\n        if (error && stream.getBufferedLength() <= BufferConstants.MAX_LENGTH) {\n          error.bufferedData = stream.getBufferedValue();\n        }\n        reject(error);\n      };\n      _asyncToGenerator(function* () {\n        try {\n          yield streamPipelinePromisified(inputStream, stream);\n          resolve();\n        } catch (error) {\n          rejectPromise(error);\n        }\n      })();\n      stream.on('data', () => {\n        if (stream.getBufferedLength() > maxBuffer) {\n          rejectPromise(new MaxBufferError());\n        }\n      });\n    });\n    return stream.getBufferedValue();\n  });\n  return _getStream.apply(this, arguments);\n}\nmodule.exports = getStream;\nmodule.exports.buffer = (stream, options) => getStream(stream, {\n  ...options,\n  encoding: 'buffer'\n});\nmodule.exports.array = (stream, options) => getStream(stream, {\n  ...options,\n  array: true\n});\nmodule.exports.MaxBufferError = MaxBufferError;","map":{"version":3,"names":["constants","BufferConstants","require","stream","promisify","bufferStream","streamPipelinePromisified","pipeline","MaxBufferError","Error","constructor","name","getStream","inputStream","options","maxBuffer","Infinity","Promise","resolve","reject","rejectPromise","error","getBufferedLength","MAX_LENGTH","bufferedData","getBufferedValue","on","module","exports","buffer","encoding","array"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/get-stream/index.js"],"sourcesContent":["'use strict';\nconst {constants: BufferConstants} = require('buffer');\nconst stream = require('stream');\nconst {promisify} = require('util');\nconst bufferStream = require('./buffer-stream');\n\nconst streamPipelinePromisified = promisify(stream.pipeline);\n\nclass MaxBufferError extends Error {\n\tconstructor() {\n\t\tsuper('maxBuffer exceeded');\n\t\tthis.name = 'MaxBufferError';\n\t}\n}\n\nasync function getStream(inputStream, options) {\n\tif (!inputStream) {\n\t\tthrow new Error('Expected a stream');\n\t}\n\n\toptions = {\n\t\tmaxBuffer: Infinity,\n\t\t...options\n\t};\n\n\tconst {maxBuffer} = options;\n\tconst stream = bufferStream(options);\n\n\tawait new Promise((resolve, reject) => {\n\t\tconst rejectPromise = error => {\n\t\t\t// Don't retrieve an oversized buffer.\n\t\t\tif (error && stream.getBufferedLength() <= BufferConstants.MAX_LENGTH) {\n\t\t\t\terror.bufferedData = stream.getBufferedValue();\n\t\t\t}\n\n\t\t\treject(error);\n\t\t};\n\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tawait streamPipelinePromisified(inputStream, stream);\n\t\t\t\tresolve();\n\t\t\t} catch (error) {\n\t\t\t\trejectPromise(error);\n\t\t\t}\n\t\t})();\n\n\t\tstream.on('data', () => {\n\t\t\tif (stream.getBufferedLength() > maxBuffer) {\n\t\t\t\trejectPromise(new MaxBufferError());\n\t\t\t}\n\t\t});\n\t});\n\n\treturn stream.getBufferedValue();\n}\n\nmodule.exports = getStream;\nmodule.exports.buffer = (stream, options) => getStream(stream, {...options, encoding: 'buffer'});\nmodule.exports.array = (stream, options) => getStream(stream, {...options, array: true});\nmodule.exports.MaxBufferError = MaxBufferError;\n"],"mappings":"AAAA,YAAY;;AAAC;AACb,MAAM;EAACA,SAAS,EAAEC;AAAe,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACtD,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAM;EAACE;AAAS,CAAC,GAAGF,OAAO,CAAC,MAAM,CAAC;AACnC,MAAMG,YAAY,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAE/C,MAAMI,yBAAyB,GAAGF,SAAS,CAACD,MAAM,CAACI,QAAQ,CAAC;AAE5D,MAAMC,cAAc,SAASC,KAAK,CAAC;EAClCC,WAAW,GAAG;IACb,KAAK,CAAC,oBAAoB,CAAC;IAC3B,IAAI,CAACC,IAAI,GAAG,gBAAgB;EAC7B;AACD;AAAC,SAEcC,SAAS;EAAA;AAAA;AAAA;EAAA,+BAAxB,WAAyBC,WAAW,EAAEC,OAAO,EAAE;IAC9C,IAAI,CAACD,WAAW,EAAE;MACjB,MAAM,IAAIJ,KAAK,CAAC,mBAAmB,CAAC;IACrC;IAEAK,OAAO,GAAG;MACTC,SAAS,EAAEC,QAAQ;MACnB,GAAGF;IACJ,CAAC;IAED,MAAM;MAACC;IAAS,CAAC,GAAGD,OAAO;IAC3B,MAAMX,MAAM,GAAGE,YAAY,CAACS,OAAO,CAAC;IAEpC,MAAM,IAAIG,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,aAAa,GAAGC,KAAK,IAAI;QAC9B;QACA,IAAIA,KAAK,IAAIlB,MAAM,CAACmB,iBAAiB,EAAE,IAAIrB,eAAe,CAACsB,UAAU,EAAE;UACtEF,KAAK,CAACG,YAAY,GAAGrB,MAAM,CAACsB,gBAAgB,EAAE;QAC/C;QAEAN,MAAM,CAACE,KAAK,CAAC;MACd,CAAC;MAED,kBAAC,aAAY;QACZ,IAAI;UACH,MAAMf,yBAAyB,CAACO,WAAW,EAAEV,MAAM,CAAC;UACpDe,OAAO,EAAE;QACV,CAAC,CAAC,OAAOG,KAAK,EAAE;UACfD,aAAa,CAACC,KAAK,CAAC;QACrB;MACD,CAAC,GAAG;MAEJlB,MAAM,CAACuB,EAAE,CAAC,MAAM,EAAE,MAAM;QACvB,IAAIvB,MAAM,CAACmB,iBAAiB,EAAE,GAAGP,SAAS,EAAE;UAC3CK,aAAa,CAAC,IAAIZ,cAAc,EAAE,CAAC;QACpC;MACD,CAAC,CAAC;IACH,CAAC,CAAC;IAEF,OAAOL,MAAM,CAACsB,gBAAgB,EAAE;EACjC,CAAC;EAAA;AAAA;AAEDE,MAAM,CAACC,OAAO,GAAGhB,SAAS;AAC1Be,MAAM,CAACC,OAAO,CAACC,MAAM,GAAG,CAAC1B,MAAM,EAAEW,OAAO,KAAKF,SAAS,CAACT,MAAM,EAAE;EAAC,GAAGW,OAAO;EAAEgB,QAAQ,EAAE;AAAQ,CAAC,CAAC;AAChGH,MAAM,CAACC,OAAO,CAACG,KAAK,GAAG,CAAC5B,MAAM,EAAEW,OAAO,KAAKF,SAAS,CAACT,MAAM,EAAE;EAAC,GAAGW,OAAO;EAAEiB,KAAK,EAAE;AAAI,CAAC,CAAC;AACxFJ,MAAM,CAACC,OAAO,CAACpB,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}