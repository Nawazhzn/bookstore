{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServiceWorkerPlugin = void 0;\nconst service_worker_1 = require(\"../../utils/service-worker\");\nclass ServiceWorkerPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n  apply(compiler) {\n    var _this = this;\n    compiler.hooks.done.tapPromise('angular-service-worker', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (stats) {\n        if (stats.hasErrors()) {\n          // Don't generate a service worker if the compilation has errors.\n          // When there are errors some files will not be emitted which would cause other errors down the line such as readdir failures.\n          return;\n        }\n        const {\n          projectRoot,\n          root,\n          baseHref = '',\n          ngswConfigPath\n        } = _this.options;\n        const {\n          compilation\n        } = stats;\n        // We use the output path from the compilation instead of build options since during\n        // localization the output path is modified to a temp directory.\n        // See: https://github.com/angular/angular-cli/blob/7e64b1537d54fadb650559214fbb12707324cd75/packages/angular_devkit/build_angular/src/utils/i18n-options.ts#L251-L252\n        const outputPath = compilation.outputOptions.path;\n        if (!outputPath) {\n          throw new Error('Compilation output path cannot be empty.');\n        }\n        try {\n          yield (0, service_worker_1.augmentAppWithServiceWorker)(projectRoot, root, outputPath, baseHref, ngswConfigPath,\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          compiler.inputFileSystem.promises,\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          compiler.outputFileSystem.promises);\n        } catch (error) {\n          compilation.errors.push(new compilation.compiler.webpack.WebpackError(`Failed to generate service worker - ${error instanceof Error ? error.message : error}`));\n        }\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n}\nexports.ServiceWorkerPlugin = ServiceWorkerPlugin;","map":{"version":3,"names":["Object","defineProperty","exports","value","ServiceWorkerPlugin","service_worker_1","require","constructor","options","apply","compiler","hooks","done","tapPromise","stats","hasErrors","projectRoot","root","baseHref","ngswConfigPath","compilation","outputPath","outputOptions","path","Error","augmentAppWithServiceWorker","inputFileSystem","promises","outputFileSystem","error","errors","push","webpack","WebpackError","message"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@angular-devkit/build-angular/src/webpack/plugins/service-worker-plugin.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServiceWorkerPlugin = void 0;\nconst service_worker_1 = require(\"../../utils/service-worker\");\nclass ServiceWorkerPlugin {\n    constructor(options) {\n        this.options = options;\n    }\n    apply(compiler) {\n        compiler.hooks.done.tapPromise('angular-service-worker', async (stats) => {\n            if (stats.hasErrors()) {\n                // Don't generate a service worker if the compilation has errors.\n                // When there are errors some files will not be emitted which would cause other errors down the line such as readdir failures.\n                return;\n            }\n            const { projectRoot, root, baseHref = '', ngswConfigPath } = this.options;\n            const { compilation } = stats;\n            // We use the output path from the compilation instead of build options since during\n            // localization the output path is modified to a temp directory.\n            // See: https://github.com/angular/angular-cli/blob/7e64b1537d54fadb650559214fbb12707324cd75/packages/angular_devkit/build_angular/src/utils/i18n-options.ts#L251-L252\n            const outputPath = compilation.outputOptions.path;\n            if (!outputPath) {\n                throw new Error('Compilation output path cannot be empty.');\n            }\n            try {\n                await (0, service_worker_1.augmentAppWithServiceWorker)(projectRoot, root, outputPath, baseHref, ngswConfigPath, \n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                compiler.inputFileSystem.promises, \n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                compiler.outputFileSystem.promises);\n            }\n            catch (error) {\n                compilation.errors.push(new compilation.compiler.webpack.WebpackError(`Failed to generate service worker - ${error instanceof Error ? error.message : error}`));\n            }\n        });\n    }\n}\nexports.ServiceWorkerPlugin = ServiceWorkerPlugin;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAOAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,mBAAmB,GAAG,KAAK,CAAC;AACpC,MAAMC,gBAAgB,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AAC9D,MAAMF,mBAAmB,CAAC;EACtBG,WAAW,CAACC,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACAC,KAAK,CAACC,QAAQ,EAAE;IAAA;IACZA,QAAQ,CAACC,KAAK,CAACC,IAAI,CAACC,UAAU,CAAC,wBAAwB;MAAA,6BAAE,WAAOC,KAAK,EAAK;QACtE,IAAIA,KAAK,CAACC,SAAS,EAAE,EAAE;UACnB;UACA;UACA;QACJ;QACA,MAAM;UAAEC,WAAW;UAAEC,IAAI;UAAEC,QAAQ,GAAG,EAAE;UAAEC;QAAe,CAAC,GAAG,KAAI,CAACX,OAAO;QACzE,MAAM;UAAEY;QAAY,CAAC,GAAGN,KAAK;QAC7B;QACA;QACA;QACA,MAAMO,UAAU,GAAGD,WAAW,CAACE,aAAa,CAACC,IAAI;QACjD,IAAI,CAACF,UAAU,EAAE;UACb,MAAM,IAAIG,KAAK,CAAC,0CAA0C,CAAC;QAC/D;QACA,IAAI;UACA,MAAM,CAAC,CAAC,EAAEnB,gBAAgB,CAACoB,2BAA2B,EAAET,WAAW,EAAEC,IAAI,EAAEI,UAAU,EAAEH,QAAQ,EAAEC,cAAc;UAC/G;UACAT,QAAQ,CAACgB,eAAe,CAACC,QAAQ;UACjC;UACAjB,QAAQ,CAACkB,gBAAgB,CAACD,QAAQ,CAAC;QACvC,CAAC,CACD,OAAOE,KAAK,EAAE;UACVT,WAAW,CAACU,MAAM,CAACC,IAAI,CAAC,IAAIX,WAAW,CAACV,QAAQ,CAACsB,OAAO,CAACC,YAAY,CAAE,uCAAsCJ,KAAK,YAAYL,KAAK,GAAGK,KAAK,CAACK,OAAO,GAAGL,KAAM,EAAC,CAAC,CAAC;QACnK;MACJ,CAAC;MAAA;QAAA;MAAA;IAAA,IAAC;EACN;AACJ;AACA3B,OAAO,CAACE,mBAAmB,GAAGA,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}