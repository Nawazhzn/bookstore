{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\n/**\n * File object used for tracking files in `file-list.js`.\n */\nclass File {\n  constructor(path, mtime, doNotCache, type, isBinary, integrity) {\n    // used for serving (processed path, eg some/file.coffee -> some/file.coffee.js)\n    this.path = path;\n\n    // original absolute path, id of the file\n    this.originalPath = path;\n\n    // where the content is stored (processed)\n    this.contentPath = path;\n\n    // encodings format {[encodingType]: encodedContent}\n    //   example: {gzip: <Buffer 1f 8b 08...>}\n    this.encodings = Object.create(null);\n    this.mtime = mtime;\n    this.isUrl = false;\n    this.doNotCache = doNotCache === undefined ? false : doNotCache;\n    this.type = type;\n\n    // Tri state: null means probe file for binary.\n    this.isBinary = isBinary === undefined ? null : isBinary;\n    this.integrity = integrity;\n  }\n\n  /**\n   * Detect type from the file extension.\n   * @returns {string} detected file type or empty string\n   */\n  detectType() {\n    return path.extname(this.path).slice(1);\n  }\n  toString() {\n    return this.path;\n  }\n}\nmodule.exports = File;","map":{"version":3,"names":["path","require","File","constructor","mtime","doNotCache","type","isBinary","integrity","originalPath","contentPath","encodings","Object","create","isUrl","undefined","detectType","extname","slice","toString","module","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/karma/lib/file.js"],"sourcesContent":["'use strict'\n\nconst path = require('path')\n\n/**\n * File object used for tracking files in `file-list.js`.\n */\nclass File {\n  constructor (path, mtime, doNotCache, type, isBinary, integrity) {\n    // used for serving (processed path, eg some/file.coffee -> some/file.coffee.js)\n    this.path = path\n\n    // original absolute path, id of the file\n    this.originalPath = path\n\n    // where the content is stored (processed)\n    this.contentPath = path\n\n    // encodings format {[encodingType]: encodedContent}\n    //   example: {gzip: <Buffer 1f 8b 08...>}\n    this.encodings = Object.create(null)\n\n    this.mtime = mtime\n    this.isUrl = false\n\n    this.doNotCache = doNotCache === undefined ? false : doNotCache\n\n    this.type = type\n\n    // Tri state: null means probe file for binary.\n    this.isBinary = isBinary === undefined ? null : isBinary\n\n    this.integrity = integrity\n  }\n\n  /**\n   * Detect type from the file extension.\n   * @returns {string} detected file type or empty string\n   */\n  detectType () {\n    return path.extname(this.path).slice(1)\n  }\n\n  toString () {\n    return this.path\n  }\n}\n\nmodule.exports = File\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA;AACA;AACA,MAAMC,IAAI,CAAC;EACTC,WAAW,CAAEH,IAAI,EAAEI,KAAK,EAAEC,UAAU,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,SAAS,EAAE;IAC/D;IACA,IAAI,CAACR,IAAI,GAAGA,IAAI;;IAEhB;IACA,IAAI,CAACS,YAAY,GAAGT,IAAI;;IAExB;IACA,IAAI,CAACU,WAAW,GAAGV,IAAI;;IAEvB;IACA;IACA,IAAI,CAACW,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAEpC,IAAI,CAACT,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACU,KAAK,GAAG,KAAK;IAElB,IAAI,CAACT,UAAU,GAAGA,UAAU,KAAKU,SAAS,GAAG,KAAK,GAAGV,UAAU;IAE/D,IAAI,CAACC,IAAI,GAAGA,IAAI;;IAEhB;IACA,IAAI,CAACC,QAAQ,GAAGA,QAAQ,KAAKQ,SAAS,GAAG,IAAI,GAAGR,QAAQ;IAExD,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC5B;;EAEA;AACF;AACA;AACA;EACEQ,UAAU,GAAI;IACZ,OAAOhB,IAAI,CAACiB,OAAO,CAAC,IAAI,CAACjB,IAAI,CAAC,CAACkB,KAAK,CAAC,CAAC,CAAC;EACzC;EAEAC,QAAQ,GAAI;IACV,OAAO,IAAI,CAACnB,IAAI;EAClB;AACF;AAEAoB,MAAM,CAACC,OAAO,GAAGnB,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}