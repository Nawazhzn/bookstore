{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Service = void 0;\nconst os_1 = __importDefault(require(\"os\"));\nconst dns_txt_1 = __importDefault(require(\"./dns-txt\"));\nconst events_1 = require(\"events\");\nconst service_types_1 = require(\"./service-types\");\nconst TLD = '.local';\nclass Service extends events_1.EventEmitter {\n  constructor(config) {\n    super();\n    this.probe = true;\n    this.published = false;\n    this.activated = false;\n    this.destroyed = false;\n    this.txtService = new dns_txt_1.default();\n    if (!config.name) throw new Error('ServiceConfig requires `name` property to be set');\n    if (!config.type) throw new Error('ServiceConfig requires `type` property to be set');\n    if (!config.port) throw new Error('ServiceConfig requires `port` property to be set');\n    this.name = config.name;\n    this.protocol = config.protocol || 'tcp';\n    this.type = (0, service_types_1.toString)({\n      name: config.type,\n      protocol: this.protocol\n    });\n    this.port = config.port;\n    this.host = config.host || os_1.default.hostname();\n    this.fqdn = `${this.name}.${this.type}${TLD}`;\n    this.txt = config.txt;\n    this.subtypes = config.subtypes;\n  }\n  records() {\n    var records = [this.RecordPTR(this), this.RecordSRV(this), this.RecordTXT(this)];\n    let ifaces = Object.values(os_1.default.networkInterfaces());\n    for (let iface of ifaces) {\n      let addrs = iface;\n      for (let addr of addrs) {\n        if (addr.internal || addr.mac === '00:00:00:00:00:00') continue;\n        switch (addr.family) {\n          case 'IPv4':\n            records.push(this.RecordA(this, addr.address));\n            break;\n          case 'IPv6':\n            records.push(this.RecordAAAA(this, addr.address));\n            break;\n        }\n      }\n    }\n    return records;\n  }\n  RecordPTR(service) {\n    return {\n      name: `${service.type}${TLD}`,\n      type: 'PTR',\n      ttl: 28800,\n      data: service.fqdn\n    };\n  }\n  RecordSRV(service) {\n    return {\n      name: service.fqdn,\n      type: 'SRV',\n      ttl: 120,\n      data: {\n        port: service.port,\n        target: service.host\n      }\n    };\n  }\n  RecordTXT(service) {\n    return {\n      name: service.fqdn,\n      type: 'TXT',\n      ttl: 4500,\n      data: this.txtService.encode(service.txt)\n    };\n  }\n  RecordA(service, ip) {\n    return {\n      name: service.host,\n      type: 'A',\n      ttl: 120,\n      data: ip\n    };\n  }\n  RecordAAAA(service, ip) {\n    return {\n      name: service.host,\n      type: 'AAAA',\n      ttl: 120,\n      data: ip\n    };\n  }\n}\nexports.Service = Service;\nexports.default = Service;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Service","os_1","require","dns_txt_1","events_1","service_types_1","TLD","EventEmitter","constructor","config","probe","published","activated","destroyed","txtService","default","name","Error","type","port","protocol","toString","host","hostname","fqdn","txt","subtypes","records","RecordPTR","RecordSRV","RecordTXT","ifaces","values","networkInterfaces","iface","addrs","addr","internal","mac","family","push","RecordA","address","RecordAAAA","service","ttl","data","target","encode","ip"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/bonjour-service/dist/lib/service.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Service = void 0;\nconst os_1 = __importDefault(require(\"os\"));\nconst dns_txt_1 = __importDefault(require(\"./dns-txt\"));\nconst events_1 = require(\"events\");\nconst service_types_1 = require(\"./service-types\");\nconst TLD = '.local';\nclass Service extends events_1.EventEmitter {\n    constructor(config) {\n        super();\n        this.probe = true;\n        this.published = false;\n        this.activated = false;\n        this.destroyed = false;\n        this.txtService = new dns_txt_1.default();\n        if (!config.name)\n            throw new Error('ServiceConfig requires `name` property to be set');\n        if (!config.type)\n            throw new Error('ServiceConfig requires `type` property to be set');\n        if (!config.port)\n            throw new Error('ServiceConfig requires `port` property to be set');\n        this.name = config.name;\n        this.protocol = config.protocol || 'tcp';\n        this.type = (0, service_types_1.toString)({ name: config.type, protocol: this.protocol });\n        this.port = config.port;\n        this.host = config.host || os_1.default.hostname();\n        this.fqdn = `${this.name}.${this.type}${TLD}`;\n        this.txt = config.txt;\n        this.subtypes = config.subtypes;\n    }\n    records() {\n        var records = [this.RecordPTR(this), this.RecordSRV(this), this.RecordTXT(this)];\n        let ifaces = Object.values(os_1.default.networkInterfaces());\n        for (let iface of ifaces) {\n            let addrs = iface;\n            for (let addr of addrs) {\n                if (addr.internal || addr.mac === '00:00:00:00:00:00')\n                    continue;\n                switch (addr.family) {\n                    case 'IPv4':\n                        records.push(this.RecordA(this, addr.address));\n                        break;\n                    case 'IPv6':\n                        records.push(this.RecordAAAA(this, addr.address));\n                        break;\n                }\n            }\n        }\n        return records;\n    }\n    RecordPTR(service) {\n        return {\n            name: `${service.type}${TLD}`,\n            type: 'PTR',\n            ttl: 28800,\n            data: service.fqdn\n        };\n    }\n    RecordSRV(service) {\n        return {\n            name: service.fqdn,\n            type: 'SRV',\n            ttl: 120,\n            data: {\n                port: service.port,\n                target: service.host\n            }\n        };\n    }\n    RecordTXT(service) {\n        return {\n            name: service.fqdn,\n            type: 'TXT',\n            ttl: 4500,\n            data: this.txtService.encode(service.txt)\n        };\n    }\n    RecordA(service, ip) {\n        return {\n            name: service.host,\n            type: 'A',\n            ttl: 120,\n            data: ip\n        };\n    }\n    RecordAAAA(service, ip) {\n        return {\n            name: service.host,\n            type: 'AAAA',\n            ttl: 120,\n            data: ip\n        };\n    }\n}\nexports.Service = Service;\nexports.default = Service;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}