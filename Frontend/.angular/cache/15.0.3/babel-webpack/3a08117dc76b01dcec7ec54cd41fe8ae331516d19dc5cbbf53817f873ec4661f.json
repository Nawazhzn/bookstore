{"ast":null,"code":"const debug = require('debug')('log4js:clustering');\nconst LoggingEvent = require('./LoggingEvent');\nconst configuration = require('./configuration');\nlet disabled = false;\nlet cluster = null;\ntry {\n  // eslint-disable-next-line global-require\n  cluster = require('cluster');\n} catch (e) {\n  debug('cluster module not present');\n  disabled = true;\n}\nconst listeners = [];\nlet pm2 = false;\nlet pm2InstanceVar = 'NODE_APP_INSTANCE';\nconst isPM2Master = () => pm2 && process.env[pm2InstanceVar] === '0';\nconst isMaster = () => disabled || cluster && cluster.isMaster || isPM2Master();\nconst sendToListeners = logEvent => {\n  listeners.forEach(l => l(logEvent));\n};\n\n// in a multi-process node environment, worker loggers will use\n// process.send\nconst receiver = (worker, message) => {\n  // prior to node v6, the worker parameter was not passed (args were message, handle)\n  debug('cluster message received from worker ', worker, ': ', message);\n  if (worker.topic && worker.data) {\n    message = worker;\n    worker = undefined;\n  }\n  if (message && message.topic && message.topic === 'log4js:message') {\n    debug('received message: ', message.data);\n    const logEvent = LoggingEvent.deserialise(message.data);\n    sendToListeners(logEvent);\n  }\n};\nif (!disabled) {\n  configuration.addListener(config => {\n    // clear out the listeners, because configure has been called.\n    listeners.length = 0;\n    ({\n      pm2,\n      disableClustering: disabled,\n      pm2InstanceVar = 'NODE_APP_INSTANCE'\n    } = config);\n    debug(`clustering disabled ? ${disabled}`);\n    debug(`cluster.isMaster ? ${cluster && cluster.isMaster}`);\n    debug(`pm2 enabled ? ${pm2}`);\n    debug(`pm2InstanceVar = ${pm2InstanceVar}`);\n    debug(`process.env[${pm2InstanceVar}] = ${process.env[pm2InstanceVar]}`);\n\n    // just in case configure is called after shutdown\n    if (pm2) {\n      process.removeListener('message', receiver);\n    }\n    if (cluster && cluster.removeListener) {\n      cluster.removeListener('message', receiver);\n    }\n    if (disabled || config.disableClustering) {\n      debug('Not listening for cluster messages, because clustering disabled.');\n    } else if (isPM2Master()) {\n      // PM2 cluster support\n      // PM2 runs everything as workers - install pm2-intercom for this to work.\n      // we only want one of the app instances to write logs\n      debug('listening for PM2 broadcast messages');\n      process.on('message', receiver);\n    } else if (cluster && cluster.isMaster) {\n      debug('listening for cluster messages');\n      cluster.on('message', receiver);\n    } else {\n      debug('not listening for messages, because we are not a master process');\n    }\n  });\n}\nmodule.exports = {\n  onlyOnMaster: (fn, notMaster) => isMaster() ? fn() : notMaster,\n  isMaster,\n  send: msg => {\n    if (isMaster()) {\n      sendToListeners(msg);\n    } else {\n      if (!pm2) {\n        msg.cluster = {\n          workerId: cluster.worker.id,\n          worker: process.pid\n        };\n      }\n      process.send({\n        topic: 'log4js:message',\n        data: msg.serialise()\n      });\n    }\n  },\n  onMessage: listener => {\n    listeners.push(listener);\n  }\n};","map":{"version":3,"names":["debug","require","LoggingEvent","configuration","disabled","cluster","e","listeners","pm2","pm2InstanceVar","isPM2Master","process","env","isMaster","sendToListeners","logEvent","forEach","l","receiver","worker","message","topic","data","undefined","deserialise","addListener","config","length","disableClustering","removeListener","on","module","exports","onlyOnMaster","fn","notMaster","send","msg","workerId","id","pid","serialise","onMessage","listener","push"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/log4js/lib/clustering.js"],"sourcesContent":["const debug = require('debug')('log4js:clustering');\nconst LoggingEvent = require('./LoggingEvent');\nconst configuration = require('./configuration');\n\nlet disabled = false;\nlet cluster = null;\ntry {\n  // eslint-disable-next-line global-require\n  cluster = require('cluster');\n} catch (e) {\n  debug('cluster module not present');\n  disabled = true;\n}\n\nconst listeners = [];\n\nlet pm2 = false;\nlet pm2InstanceVar = 'NODE_APP_INSTANCE';\n\nconst isPM2Master = () => pm2 && process.env[pm2InstanceVar] === '0';\nconst isMaster = () =>\n  disabled || (cluster && cluster.isMaster) || isPM2Master();\n\nconst sendToListeners = (logEvent) => {\n  listeners.forEach((l) => l(logEvent));\n};\n\n// in a multi-process node environment, worker loggers will use\n// process.send\nconst receiver = (worker, message) => {\n  // prior to node v6, the worker parameter was not passed (args were message, handle)\n  debug('cluster message received from worker ', worker, ': ', message);\n  if (worker.topic && worker.data) {\n    message = worker;\n    worker = undefined;\n  }\n  if (message && message.topic && message.topic === 'log4js:message') {\n    debug('received message: ', message.data);\n    const logEvent = LoggingEvent.deserialise(message.data);\n    sendToListeners(logEvent);\n  }\n};\n\nif (!disabled) {\n  configuration.addListener((config) => {\n    // clear out the listeners, because configure has been called.\n    listeners.length = 0;\n\n    ({\n      pm2,\n      disableClustering: disabled,\n      pm2InstanceVar = 'NODE_APP_INSTANCE',\n    } = config);\n\n    debug(`clustering disabled ? ${disabled}`);\n    debug(`cluster.isMaster ? ${cluster && cluster.isMaster}`);\n    debug(`pm2 enabled ? ${pm2}`);\n    debug(`pm2InstanceVar = ${pm2InstanceVar}`);\n    debug(`process.env[${pm2InstanceVar}] = ${process.env[pm2InstanceVar]}`);\n\n    // just in case configure is called after shutdown\n    if (pm2) {\n      process.removeListener('message', receiver);\n    }\n    if (cluster && cluster.removeListener) {\n      cluster.removeListener('message', receiver);\n    }\n\n    if (disabled || config.disableClustering) {\n      debug('Not listening for cluster messages, because clustering disabled.');\n    } else if (isPM2Master()) {\n      // PM2 cluster support\n      // PM2 runs everything as workers - install pm2-intercom for this to work.\n      // we only want one of the app instances to write logs\n      debug('listening for PM2 broadcast messages');\n      process.on('message', receiver);\n    } else if (cluster && cluster.isMaster) {\n      debug('listening for cluster messages');\n      cluster.on('message', receiver);\n    } else {\n      debug('not listening for messages, because we are not a master process');\n    }\n  });\n}\n\nmodule.exports = {\n  onlyOnMaster: (fn, notMaster) => (isMaster() ? fn() : notMaster),\n  isMaster,\n  send: (msg) => {\n    if (isMaster()) {\n      sendToListeners(msg);\n    } else {\n      if (!pm2) {\n        msg.cluster = {\n          workerId: cluster.worker.id,\n          worker: process.pid,\n        };\n      }\n      process.send({ topic: 'log4js:message', data: msg.serialise() });\n    }\n  },\n  onMessage: (listener) => {\n    listeners.push(listener);\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}