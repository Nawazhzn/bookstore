{"ast":null,"code":"const streams = require('streamroller');\nconst os = require('os');\nconst eol = os.EOL;\nfunction openTheStream(filename, pattern, options) {\n  const stream = new streams.DateRollingFileStream(filename, pattern, options);\n  stream.on('error', err => {\n    // eslint-disable-next-line no-console\n    console.error('log4js.dateFileAppender - Writing to file %s, error happened ', filename, err);\n  });\n  stream.on('drain', () => {\n    process.emit('log4js:pause', false);\n  });\n  return stream;\n}\n\n/**\n * File appender that rolls files according to a date pattern.\n * @param filename base filename.\n * @param pattern the format that will be added to the end of filename when rolling,\n *          also used to check when to roll files - defaults to '.yyyy-MM-dd'\n * @param layout layout function for log messages - defaults to basicLayout\n * @param options - options to be passed to the underlying stream\n * @param timezoneOffset - optional timezone offset in minutes (default system local)\n */\nfunction appender(filename, pattern, layout, options, timezoneOffset) {\n  // the options for file appender use maxLogSize, but the docs say any file appender\n  // options should work for dateFile as well.\n  options.maxSize = options.maxLogSize;\n  const writer = openTheStream(filename, pattern, options);\n  const app = function (logEvent) {\n    if (!writer.writable) {\n      return;\n    }\n    if (!writer.write(layout(logEvent, timezoneOffset) + eol, 'utf8')) {\n      process.emit('log4js:pause', true);\n    }\n  };\n  app.shutdown = function (complete) {\n    writer.end('', 'utf-8', complete);\n  };\n  return app;\n}\nfunction configure(config, layouts) {\n  let layout = layouts.basicLayout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n  if (!config.alwaysIncludePattern) {\n    config.alwaysIncludePattern = false;\n  }\n\n  // security default (instead of relying on streamroller default)\n  config.mode = config.mode || 0o600;\n  return appender(config.filename, config.pattern, layout, config, config.timezoneOffset);\n}\nmodule.exports.configure = configure;","map":{"version":3,"names":["streams","require","os","eol","EOL","openTheStream","filename","pattern","options","stream","DateRollingFileStream","on","err","console","error","process","emit","appender","layout","timezoneOffset","maxSize","maxLogSize","writer","app","logEvent","writable","write","shutdown","complete","end","configure","config","layouts","basicLayout","type","alwaysIncludePattern","mode","module","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/log4js/lib/appenders/dateFile.js"],"sourcesContent":["const streams = require('streamroller');\nconst os = require('os');\n\nconst eol = os.EOL;\n\nfunction openTheStream(filename, pattern, options) {\n  const stream = new streams.DateRollingFileStream(filename, pattern, options);\n  stream.on('error', (err) => {\n    // eslint-disable-next-line no-console\n    console.error(\n      'log4js.dateFileAppender - Writing to file %s, error happened ',\n      filename,\n      err\n    );\n  });\n  stream.on('drain', () => {\n    process.emit('log4js:pause', false);\n  });\n  return stream;\n}\n\n/**\n * File appender that rolls files according to a date pattern.\n * @param filename base filename.\n * @param pattern the format that will be added to the end of filename when rolling,\n *          also used to check when to roll files - defaults to '.yyyy-MM-dd'\n * @param layout layout function for log messages - defaults to basicLayout\n * @param options - options to be passed to the underlying stream\n * @param timezoneOffset - optional timezone offset in minutes (default system local)\n */\nfunction appender(filename, pattern, layout, options, timezoneOffset) {\n  // the options for file appender use maxLogSize, but the docs say any file appender\n  // options should work for dateFile as well.\n  options.maxSize = options.maxLogSize;\n\n  const writer = openTheStream(filename, pattern, options);\n\n  const app = function (logEvent) {\n    if (!writer.writable) {\n      return;\n    }\n    if (!writer.write(layout(logEvent, timezoneOffset) + eol, 'utf8')) {\n      process.emit('log4js:pause', true);\n    }\n  };\n\n  app.shutdown = function (complete) {\n    writer.end('', 'utf-8', complete);\n  };\n\n  return app;\n}\n\nfunction configure(config, layouts) {\n  let layout = layouts.basicLayout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n\n  if (!config.alwaysIncludePattern) {\n    config.alwaysIncludePattern = false;\n  }\n\n  // security default (instead of relying on streamroller default)\n  config.mode = config.mode || 0o600;\n\n  return appender(\n    config.filename,\n    config.pattern,\n    layout,\n    config,\n    config.timezoneOffset\n  );\n}\n\nmodule.exports.configure = configure;\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,cAAc,CAAC;AACvC,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AAExB,MAAME,GAAG,GAAGD,EAAE,CAACE,GAAG;AAElB,SAASC,aAAa,CAACC,QAAQ,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACjD,MAAMC,MAAM,GAAG,IAAIT,OAAO,CAACU,qBAAqB,CAACJ,QAAQ,EAAEC,OAAO,EAAEC,OAAO,CAAC;EAC5EC,MAAM,CAACE,EAAE,CAAC,OAAO,EAAGC,GAAG,IAAK;IAC1B;IACAC,OAAO,CAACC,KAAK,CACX,+DAA+D,EAC/DR,QAAQ,EACRM,GAAG,CACJ;EACH,CAAC,CAAC;EACFH,MAAM,CAACE,EAAE,CAAC,OAAO,EAAE,MAAM;IACvBI,OAAO,CAACC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC;EACrC,CAAC,CAAC;EACF,OAAOP,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,QAAQ,CAACX,QAAQ,EAAEC,OAAO,EAAEW,MAAM,EAAEV,OAAO,EAAEW,cAAc,EAAE;EACpE;EACA;EACAX,OAAO,CAACY,OAAO,GAAGZ,OAAO,CAACa,UAAU;EAEpC,MAAMC,MAAM,GAAGjB,aAAa,CAACC,QAAQ,EAAEC,OAAO,EAAEC,OAAO,CAAC;EAExD,MAAMe,GAAG,GAAG,UAAUC,QAAQ,EAAE;IAC9B,IAAI,CAACF,MAAM,CAACG,QAAQ,EAAE;MACpB;IACF;IACA,IAAI,CAACH,MAAM,CAACI,KAAK,CAACR,MAAM,CAACM,QAAQ,EAAEL,cAAc,CAAC,GAAGhB,GAAG,EAAE,MAAM,CAAC,EAAE;MACjEY,OAAO,CAACC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC;IACpC;EACF,CAAC;EAEDO,GAAG,CAACI,QAAQ,GAAG,UAAUC,QAAQ,EAAE;IACjCN,MAAM,CAACO,GAAG,CAAC,EAAE,EAAE,OAAO,EAAED,QAAQ,CAAC;EACnC,CAAC;EAED,OAAOL,GAAG;AACZ;AAEA,SAASO,SAAS,CAACC,MAAM,EAAEC,OAAO,EAAE;EAClC,IAAId,MAAM,GAAGc,OAAO,CAACC,WAAW;EAChC,IAAIF,MAAM,CAACb,MAAM,EAAE;IACjBA,MAAM,GAAGc,OAAO,CAACd,MAAM,CAACa,MAAM,CAACb,MAAM,CAACgB,IAAI,EAAEH,MAAM,CAACb,MAAM,CAAC;EAC5D;EAEA,IAAI,CAACa,MAAM,CAACI,oBAAoB,EAAE;IAChCJ,MAAM,CAACI,oBAAoB,GAAG,KAAK;EACrC;;EAEA;EACAJ,MAAM,CAACK,IAAI,GAAGL,MAAM,CAACK,IAAI,IAAI,KAAK;EAElC,OAAOnB,QAAQ,CACbc,MAAM,CAACzB,QAAQ,EACfyB,MAAM,CAACxB,OAAO,EACdW,MAAM,EACNa,MAAM,EACNA,MAAM,CAACZ,cAAc,CACtB;AACH;AAEAkB,MAAM,CAACC,OAAO,CAACR,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}