{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requiresLinking = void 0;\nconst babel_loader_1 = require(\"babel-loader\");\nconst load_esm_1 = require(\"../utils/load-esm\");\nconst package_version_1 = require(\"../utils/package-version\");\n/**\n * Cached instance of the compiler-cli linker's needsLinking function.\n */\nlet needsLinking;\n/**\n * Cached instance of the compiler-cli linker's Babel plugin factory function.\n */\nlet linkerPluginCreator;\n/**\n * Cached instance of the localize Babel plugins factory functions.\n */\nlet i18nPluginCreators;\nfunction requiresLinking(_x, _x2) {\n  return _requiresLinking.apply(this, arguments);\n}\nfunction _requiresLinking() {\n  _requiresLinking = _asyncToGenerator(function* (path, source) {\n    // @angular/core and @angular/compiler will cause false positives\n    // Also, TypeScript files do not require linking\n    if (/[\\\\/]@angular[\\\\/](?:compiler|core)|\\.tsx?$/.test(path)) {\n      return false;\n    }\n    if (!needsLinking) {\n      // Load ESM `@angular/compiler-cli/linker` using the TypeScript dynamic import workaround.\n      // Once TypeScript provides support for keeping the dynamic import this workaround can be\n      // changed to a direct dynamic import.\n      const linkerModule = yield (0, load_esm_1.loadEsmModule)('@angular/compiler-cli/linker');\n      needsLinking = linkerModule.needsLinking;\n    }\n    return needsLinking(path, source);\n  });\n  return _requiresLinking.apply(this, arguments);\n}\nexports.requiresLinking = requiresLinking;\n// eslint-disable-next-line max-lines-per-function\nexports.default = (0, babel_loader_1.custom)(() => {\n  const baseOptions = Object.freeze({\n    babelrc: false,\n    configFile: false,\n    compact: false,\n    cacheCompression: false,\n    sourceType: 'unambiguous',\n    inputSourceMap: false\n  });\n  return {\n    customOptions(options, {\n      source,\n      map\n    }) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        var _a, _b;\n        const {\n          i18n,\n          aot,\n          optimize,\n          instrumentCode,\n          supportedBrowsers,\n          ...rawOptions\n        } = options;\n        // Must process file if plugins are added\n        let shouldProcess = Array.isArray(rawOptions.plugins) && rawOptions.plugins.length > 0;\n        const customOptions = {\n          forceAsyncTransformation: false,\n          angularLinker: undefined,\n          i18n: undefined,\n          instrumentCode: undefined,\n          supportedBrowsers\n        };\n        // Analyze file for linking\n        if (yield requiresLinking(_this.resourcePath, source)) {\n          // Load ESM `@angular/compiler-cli/linker/babel` using the TypeScript dynamic import workaround.\n          // Once TypeScript provides support for keeping the dynamic import this workaround can be\n          // changed to a direct dynamic import.\n          linkerPluginCreator !== null && linkerPluginCreator !== void 0 ? linkerPluginCreator : linkerPluginCreator = (yield (0, load_esm_1.loadEsmModule)('@angular/compiler-cli/linker/babel')).createEs2015LinkerPlugin;\n          customOptions.angularLinker = {\n            shouldLink: true,\n            jitMode: aot !== true,\n            linkerPluginCreator\n          };\n          shouldProcess = true;\n        }\n        // Application code (TS files) will only contain native async if target is ES2017+.\n        // However, third-party libraries can regardless of the target option.\n        // APF packages with code in [f]esm2015 directories is downlevelled to ES2015 and\n        // will not have native async.\n        customOptions.forceAsyncTransformation = !/[\\\\/][_f]?esm2015[\\\\/]/.test(_this.resourcePath) && source.includes('async');\n        shouldProcess || (shouldProcess = customOptions.forceAsyncTransformation || customOptions.supportedBrowsers !== undefined || false);\n        // Analyze for i18n inlining\n        if (i18n && !/[\\\\/]@angular[\\\\/](?:compiler|localize)/.test(_this.resourcePath) && source.includes('$localize')) {\n          // Load the i18n plugin creators from the new `@angular/localize/tools` entry point.\n          // This may fail during the transition to ESM due to the entry point not yet existing.\n          // During the transition, this will always attempt to load the entry point for each file.\n          // This will only occur during prerelease and will be automatically corrected once the new\n          // entry point exists.\n          if (i18nPluginCreators === undefined) {\n            // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n            // Once TypeScript provides support for keeping the dynamic import this workaround can be\n            // changed to a direct dynamic import.\n            i18nPluginCreators = yield (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n          }\n          customOptions.i18n = {\n            ...i18n,\n            pluginCreators: i18nPluginCreators\n          };\n          // Add translation files as dependencies of the file to support rebuilds\n          // Except for `@angular/core` which needs locale injection but has no translations\n          if (customOptions.i18n.translationFiles && !/[\\\\/]@angular[\\\\/]core/.test(_this.resourcePath)) {\n            for (const file of customOptions.i18n.translationFiles) {\n              _this.addDependency(file);\n            }\n          }\n          shouldProcess = true;\n        }\n        if (optimize) {\n          const angularPackage = /[\\\\/]node_modules[\\\\/]@angular[\\\\/]/.test(_this.resourcePath);\n          customOptions.optimize = {\n            // Angular packages provide additional tested side effects guarantees and can use\n            // otherwise unsafe optimizations.\n            looseEnums: angularPackage,\n            pureTopLevel: angularPackage,\n            // JavaScript modules that are marked as side effect free are considered to have\n            // no decorators that contain non-local effects.\n            wrapDecorators: !!((_b = (_a = _this._module) === null || _a === void 0 ? void 0 : _a.factoryMeta) === null || _b === void 0 ? void 0 : _b.sideEffectFree)\n          };\n          shouldProcess = true;\n        }\n        if (instrumentCode && !instrumentCode.excludedPaths.has(_this.resourcePath) && !/\\.(e2e|spec)\\.tsx?$|[\\\\/]node_modules[\\\\/]/.test(_this.resourcePath) && _this.resourcePath.startsWith(instrumentCode.includedBasePath)) {\n          // `babel-plugin-istanbul` has it's own includes but we do the below so that we avoid running the the loader.\n          customOptions.instrumentCode = {\n            includedBasePath: instrumentCode.includedBasePath,\n            inputSourceMap: map\n          };\n          shouldProcess = true;\n        }\n        // Add provided loader options to default base options\n        const loaderOptions = {\n          ...baseOptions,\n          ...rawOptions,\n          cacheIdentifier: JSON.stringify({\n            buildAngular: package_version_1.VERSION,\n            customOptions,\n            baseOptions,\n            rawOptions\n          })\n        };\n        // Skip babel processing if no actions are needed\n        if (!shouldProcess) {\n          // Force the current file to be ignored\n          loaderOptions.ignore = [() => true];\n        }\n        return {\n          custom: customOptions,\n          loader: loaderOptions\n        };\n      })();\n    },\n    config(configuration, {\n      customOptions\n    }) {\n      var _a;\n      return {\n        ...configuration.options,\n        // Using `false` disables babel from attempting to locate sourcemaps or process any inline maps.\n        // The babel types do not include the false option even though it is valid\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        inputSourceMap: (_a = configuration.options.inputSourceMap) !== null && _a !== void 0 ? _a : false,\n        presets: [...(configuration.options.presets || []), [require('./presets/application').default, {\n          ...customOptions,\n          diagnosticReporter: (type, message) => {\n            switch (type) {\n              case 'error':\n                this.emitError(message);\n                break;\n              case 'info':\n              // Webpack does not currently have an informational diagnostic\n              case 'warning':\n                this.emitWarning(message);\n                break;\n            }\n          }\n        }]]\n      };\n    }\n  };\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","requiresLinking","babel_loader_1","require","load_esm_1","package_version_1","needsLinking","linkerPluginCreator","i18nPluginCreators","path","source","test","linkerModule","loadEsmModule","default","custom","baseOptions","freeze","babelrc","configFile","compact","cacheCompression","sourceType","inputSourceMap","customOptions","options","map","_a","_b","i18n","aot","optimize","instrumentCode","supportedBrowsers","rawOptions","shouldProcess","Array","isArray","plugins","length","forceAsyncTransformation","angularLinker","undefined","resourcePath","createEs2015LinkerPlugin","shouldLink","jitMode","includes","pluginCreators","translationFiles","file","addDependency","angularPackage","looseEnums","pureTopLevel","wrapDecorators","_module","factoryMeta","sideEffectFree","excludedPaths","has","startsWith","includedBasePath","loaderOptions","cacheIdentifier","JSON","stringify","buildAngular","VERSION","ignore","loader","config","configuration","presets","diagnosticReporter","type","message","emitError","emitWarning"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@angular-devkit/build-angular/src/babel/webpack-loader.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.requiresLinking = void 0;\nconst babel_loader_1 = require(\"babel-loader\");\nconst load_esm_1 = require(\"../utils/load-esm\");\nconst package_version_1 = require(\"../utils/package-version\");\n/**\n * Cached instance of the compiler-cli linker's needsLinking function.\n */\nlet needsLinking;\n/**\n * Cached instance of the compiler-cli linker's Babel plugin factory function.\n */\nlet linkerPluginCreator;\n/**\n * Cached instance of the localize Babel plugins factory functions.\n */\nlet i18nPluginCreators;\nasync function requiresLinking(path, source) {\n    // @angular/core and @angular/compiler will cause false positives\n    // Also, TypeScript files do not require linking\n    if (/[\\\\/]@angular[\\\\/](?:compiler|core)|\\.tsx?$/.test(path)) {\n        return false;\n    }\n    if (!needsLinking) {\n        // Load ESM `@angular/compiler-cli/linker` using the TypeScript dynamic import workaround.\n        // Once TypeScript provides support for keeping the dynamic import this workaround can be\n        // changed to a direct dynamic import.\n        const linkerModule = await (0, load_esm_1.loadEsmModule)('@angular/compiler-cli/linker');\n        needsLinking = linkerModule.needsLinking;\n    }\n    return needsLinking(path, source);\n}\nexports.requiresLinking = requiresLinking;\n// eslint-disable-next-line max-lines-per-function\nexports.default = (0, babel_loader_1.custom)(() => {\n    const baseOptions = Object.freeze({\n        babelrc: false,\n        configFile: false,\n        compact: false,\n        cacheCompression: false,\n        sourceType: 'unambiguous',\n        inputSourceMap: false,\n    });\n    return {\n        async customOptions(options, { source, map }) {\n            var _a, _b;\n            const { i18n, aot, optimize, instrumentCode, supportedBrowsers, ...rawOptions } = options;\n            // Must process file if plugins are added\n            let shouldProcess = Array.isArray(rawOptions.plugins) && rawOptions.plugins.length > 0;\n            const customOptions = {\n                forceAsyncTransformation: false,\n                angularLinker: undefined,\n                i18n: undefined,\n                instrumentCode: undefined,\n                supportedBrowsers,\n            };\n            // Analyze file for linking\n            if (await requiresLinking(this.resourcePath, source)) {\n                // Load ESM `@angular/compiler-cli/linker/babel` using the TypeScript dynamic import workaround.\n                // Once TypeScript provides support for keeping the dynamic import this workaround can be\n                // changed to a direct dynamic import.\n                linkerPluginCreator !== null && linkerPluginCreator !== void 0 ? linkerPluginCreator : (linkerPluginCreator = (await (0, load_esm_1.loadEsmModule)('@angular/compiler-cli/linker/babel')).createEs2015LinkerPlugin);\n                customOptions.angularLinker = {\n                    shouldLink: true,\n                    jitMode: aot !== true,\n                    linkerPluginCreator,\n                };\n                shouldProcess = true;\n            }\n            // Application code (TS files) will only contain native async if target is ES2017+.\n            // However, third-party libraries can regardless of the target option.\n            // APF packages with code in [f]esm2015 directories is downlevelled to ES2015 and\n            // will not have native async.\n            customOptions.forceAsyncTransformation =\n                !/[\\\\/][_f]?esm2015[\\\\/]/.test(this.resourcePath) && source.includes('async');\n            shouldProcess || (shouldProcess = customOptions.forceAsyncTransformation ||\n                customOptions.supportedBrowsers !== undefined ||\n                false);\n            // Analyze for i18n inlining\n            if (i18n &&\n                !/[\\\\/]@angular[\\\\/](?:compiler|localize)/.test(this.resourcePath) &&\n                source.includes('$localize')) {\n                // Load the i18n plugin creators from the new `@angular/localize/tools` entry point.\n                // This may fail during the transition to ESM due to the entry point not yet existing.\n                // During the transition, this will always attempt to load the entry point for each file.\n                // This will only occur during prerelease and will be automatically corrected once the new\n                // entry point exists.\n                if (i18nPluginCreators === undefined) {\n                    // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n                    // Once TypeScript provides support for keeping the dynamic import this workaround can be\n                    // changed to a direct dynamic import.\n                    i18nPluginCreators = await (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n                }\n                customOptions.i18n = {\n                    ...i18n,\n                    pluginCreators: i18nPluginCreators,\n                };\n                // Add translation files as dependencies of the file to support rebuilds\n                // Except for `@angular/core` which needs locale injection but has no translations\n                if (customOptions.i18n.translationFiles &&\n                    !/[\\\\/]@angular[\\\\/]core/.test(this.resourcePath)) {\n                    for (const file of customOptions.i18n.translationFiles) {\n                        this.addDependency(file);\n                    }\n                }\n                shouldProcess = true;\n            }\n            if (optimize) {\n                const angularPackage = /[\\\\/]node_modules[\\\\/]@angular[\\\\/]/.test(this.resourcePath);\n                customOptions.optimize = {\n                    // Angular packages provide additional tested side effects guarantees and can use\n                    // otherwise unsafe optimizations.\n                    looseEnums: angularPackage,\n                    pureTopLevel: angularPackage,\n                    // JavaScript modules that are marked as side effect free are considered to have\n                    // no decorators that contain non-local effects.\n                    wrapDecorators: !!((_b = (_a = this._module) === null || _a === void 0 ? void 0 : _a.factoryMeta) === null || _b === void 0 ? void 0 : _b.sideEffectFree),\n                };\n                shouldProcess = true;\n            }\n            if (instrumentCode &&\n                !instrumentCode.excludedPaths.has(this.resourcePath) &&\n                !/\\.(e2e|spec)\\.tsx?$|[\\\\/]node_modules[\\\\/]/.test(this.resourcePath) &&\n                this.resourcePath.startsWith(instrumentCode.includedBasePath)) {\n                // `babel-plugin-istanbul` has it's own includes but we do the below so that we avoid running the the loader.\n                customOptions.instrumentCode = {\n                    includedBasePath: instrumentCode.includedBasePath,\n                    inputSourceMap: map,\n                };\n                shouldProcess = true;\n            }\n            // Add provided loader options to default base options\n            const loaderOptions = {\n                ...baseOptions,\n                ...rawOptions,\n                cacheIdentifier: JSON.stringify({\n                    buildAngular: package_version_1.VERSION,\n                    customOptions,\n                    baseOptions,\n                    rawOptions,\n                }),\n            };\n            // Skip babel processing if no actions are needed\n            if (!shouldProcess) {\n                // Force the current file to be ignored\n                loaderOptions.ignore = [() => true];\n            }\n            return { custom: customOptions, loader: loaderOptions };\n        },\n        config(configuration, { customOptions }) {\n            var _a;\n            return {\n                ...configuration.options,\n                // Using `false` disables babel from attempting to locate sourcemaps or process any inline maps.\n                // The babel types do not include the false option even though it is valid\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                inputSourceMap: (_a = configuration.options.inputSourceMap) !== null && _a !== void 0 ? _a : false,\n                presets: [\n                    ...(configuration.options.presets || []),\n                    [\n                        require('./presets/application').default,\n                        {\n                            ...customOptions,\n                            diagnosticReporter: (type, message) => {\n                                switch (type) {\n                                    case 'error':\n                                        this.emitError(message);\n                                        break;\n                                    case 'info':\n                                    // Webpack does not currently have an informational diagnostic\n                                    case 'warning':\n                                        this.emitWarning(message);\n                                        break;\n                                }\n                            },\n                        },\n                    ],\n                ],\n            };\n        },\n    };\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}