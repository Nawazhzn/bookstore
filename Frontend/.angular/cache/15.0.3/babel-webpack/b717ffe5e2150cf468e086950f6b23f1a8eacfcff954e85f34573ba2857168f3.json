{"ast":null,"code":"\"use strict\";\n\nconst path = require(\"path\");\n\n// Based on https://github.com/webpack/webpack/blob/master/lib/cli.js\n// Please do not modify it\n\n/** @typedef {\"unknown-argument\" | \"unexpected-non-array-in-path\" | \"unexpected-non-object-in-path\" | \"multiple-values-unexpected\" | \"invalid-value\"} ProblemType */\n\n/**\n * @typedef {Object} Problem\n * @property {ProblemType} type\n * @property {string} path\n * @property {string} argument\n * @property {any=} value\n * @property {number=} index\n * @property {string=} expected\n */\n\n/**\n * @typedef {Object} LocalProblem\n * @property {ProblemType} type\n * @property {string} path\n * @property {string=} expected\n */\n\n/**\n * @typedef {Object} ArgumentConfig\n * @property {string} description\n * @property {string} path\n * @property {boolean} multiple\n * @property {\"enum\"|\"string\"|\"path\"|\"number\"|\"boolean\"|\"RegExp\"|\"reset\"} type\n * @property {any[]=} values\n */\n\n/**\n * @typedef {Object} Argument\n * @property {string} description\n * @property {\"string\"|\"number\"|\"boolean\"} simpleType\n * @property {boolean} multiple\n * @property {ArgumentConfig[]} configs\n */\n\nconst cliAddedItems = new WeakMap();\n\n/**\n * @param {any} config configuration\n * @param {string} schemaPath path in the config\n * @param {number | undefined} index index of value when multiple values are provided, otherwise undefined\n * @returns {{ problem?: LocalProblem, object?: any, property?: string | number, value?: any }} problem or object with property and value\n */\nconst getObjectAndProperty = (config, schemaPath, index = 0) => {\n  if (!schemaPath) {\n    return {\n      value: config\n    };\n  }\n  const parts = schemaPath.split(\".\");\n  const property = parts.pop();\n  let current = config;\n  let i = 0;\n  for (const part of parts) {\n    const isArray = part.endsWith(\"[]\");\n    const name = isArray ? part.slice(0, -2) : part;\n    let value = current[name];\n    if (isArray) {\n      // eslint-disable-next-line no-undefined\n      if (value === undefined) {\n        value = {};\n        current[name] = [...Array.from({\n          length: index\n        }), value];\n        cliAddedItems.set(current[name], index + 1);\n      } else if (!Array.isArray(value)) {\n        return {\n          problem: {\n            type: \"unexpected-non-array-in-path\",\n            path: parts.slice(0, i).join(\".\")\n          }\n        };\n      } else {\n        let addedItems = cliAddedItems.get(value) || 0;\n        while (addedItems <= index) {\n          // eslint-disable-next-line no-undefined\n          value.push(undefined);\n          // eslint-disable-next-line no-plusplus\n          addedItems++;\n        }\n        cliAddedItems.set(value, addedItems);\n        const x = value.length - addedItems + index;\n\n        // eslint-disable-next-line no-undefined\n        if (value[x] === undefined) {\n          value[x] = {};\n        } else if (value[x] === null || typeof value[x] !== \"object\") {\n          return {\n            problem: {\n              type: \"unexpected-non-object-in-path\",\n              path: parts.slice(0, i).join(\".\")\n            }\n          };\n        }\n        value = value[x];\n      }\n      // eslint-disable-next-line no-undefined\n    } else if (value === undefined) {\n      // eslint-disable-next-line no-multi-assign\n      value = current[name] = {};\n    } else if (value === null || typeof value !== \"object\") {\n      return {\n        problem: {\n          type: \"unexpected-non-object-in-path\",\n          path: parts.slice(0, i).join(\".\")\n        }\n      };\n    }\n    current = value;\n    // eslint-disable-next-line no-plusplus\n    i++;\n  }\n  const value = current[/** @type {string} */property];\n  if ( /** @type {string} */property.endsWith(\"[]\")) {\n    const name = /** @type {string} */property.slice(0, -2);\n    // eslint-disable-next-line no-shadow\n    const value = current[name];\n\n    // eslint-disable-next-line no-undefined\n    if (value === undefined) {\n      // eslint-disable-next-line no-undefined\n      current[name] = [...Array.from({\n        length: index\n      }), undefined];\n      cliAddedItems.set(current[name], index + 1);\n\n      // eslint-disable-next-line no-undefined\n      return {\n        object: current[name],\n        property: index,\n        value: undefined\n      };\n    } else if (!Array.isArray(value)) {\n      // eslint-disable-next-line no-undefined\n      current[name] = [value, ...Array.from({\n        length: index\n      }), undefined];\n      cliAddedItems.set(current[name], index + 1);\n\n      // eslint-disable-next-line no-undefined\n      return {\n        object: current[name],\n        property: index + 1,\n        value: undefined\n      };\n    }\n    let addedItems = cliAddedItems.get(value) || 0;\n    while (addedItems <= index) {\n      // eslint-disable-next-line no-undefined\n      value.push(undefined);\n      // eslint-disable-next-line no-plusplus\n      addedItems++;\n    }\n    cliAddedItems.set(value, addedItems);\n    const x = value.length - addedItems + index;\n\n    // eslint-disable-next-line no-undefined\n    if (value[x] === undefined) {\n      value[x] = {};\n    } else if (value[x] === null || typeof value[x] !== \"object\") {\n      return {\n        problem: {\n          type: \"unexpected-non-object-in-path\",\n          path: schemaPath\n        }\n      };\n    }\n    return {\n      object: value,\n      property: x,\n      value: value[x]\n    };\n  }\n  return {\n    object: current,\n    property,\n    value\n  };\n};\n\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @param {any} value the value\n * @returns {any | undefined} parsed value\n */\nconst parseValueForArgumentConfig = (argConfig, value) => {\n  // eslint-disable-next-line default-case\n  switch (argConfig.type) {\n    case \"string\":\n      if (typeof value === \"string\") {\n        return value;\n      }\n      break;\n    case \"path\":\n      if (typeof value === \"string\") {\n        return path.resolve(value);\n      }\n      break;\n    case \"number\":\n      if (typeof value === \"number\") {\n        return value;\n      }\n      if (typeof value === \"string\" && /^[+-]?\\d*(\\.\\d*)[eE]\\d+$/) {\n        const n = +value;\n        if (!isNaN(n)) return n;\n      }\n      break;\n    case \"boolean\":\n      if (typeof value === \"boolean\") {\n        return value;\n      }\n      if (value === \"true\") {\n        return true;\n      }\n      if (value === \"false\") {\n        return false;\n      }\n      break;\n    case \"RegExp\":\n      if (value instanceof RegExp) {\n        return value;\n      }\n      if (typeof value === \"string\") {\n        // cspell:word yugi\n        const match = /^\\/(.*)\\/([yugi]*)$/.exec(value);\n        if (match && !/[^\\\\]\\//.test(match[1])) {\n          return new RegExp(match[1], match[2]);\n        }\n      }\n      break;\n    case \"enum\":\n      if ( /** @type {any[]} */argConfig.values.includes(value)) {\n        return value;\n      }\n      for (const item of /** @type {any[]} */argConfig.values) {\n        if (`${item}` === value) return item;\n      }\n      break;\n    case \"reset\":\n      if (value === true) {\n        return [];\n      }\n      break;\n  }\n};\n\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @returns {string | undefined} expected message\n */\nconst getExpectedValue = argConfig => {\n  switch (argConfig.type) {\n    default:\n      return argConfig.type;\n    case \"boolean\":\n      return \"true | false\";\n    case \"RegExp\":\n      return \"regular expression (example: /ab?c*/)\";\n    case \"enum\":\n      return (/** @type {any[]} */argConfig.values.map(v => `${v}`).join(\" | \")\n      );\n    case \"reset\":\n      return \"true (will reset the previous value to an empty array)\";\n  }\n};\n\n/**\n * @param {any} config configuration\n * @param {string} schemaPath path in the config\n * @param {any} value parsed value\n * @param {number | undefined} index index of value when multiple values are provided, otherwise undefined\n * @returns {LocalProblem | null} problem or null for success\n */\nconst setValue = (config, schemaPath, value, index) => {\n  const {\n    problem,\n    object,\n    property\n  } = getObjectAndProperty(config, schemaPath, index);\n  if (problem) {\n    return problem;\n  }\n  object[/** @type {string} */property] = value;\n  return null;\n};\n\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @param {any} config configuration\n * @param {any} value the value\n * @param {number | undefined} index the index if multiple values provided\n * @returns {LocalProblem | null} a problem if any\n */\nconst processArgumentConfig = (argConfig, config, value, index) => {\n  // eslint-disable-next-line no-undefined\n  if (index !== undefined && !argConfig.multiple) {\n    return {\n      type: \"multiple-values-unexpected\",\n      path: argConfig.path\n    };\n  }\n  const parsed = parseValueForArgumentConfig(argConfig, value);\n\n  // eslint-disable-next-line no-undefined\n  if (parsed === undefined) {\n    return {\n      type: \"invalid-value\",\n      path: argConfig.path,\n      expected: getExpectedValue(argConfig)\n    };\n  }\n  const problem = setValue(config, argConfig.path, parsed, index);\n  if (problem) {\n    return problem;\n  }\n  return null;\n};\n\n/**\n * @param {Record<string, Argument>} args object of arguments\n * @param {any} config configuration\n * @param {Record<string, string | number | boolean | RegExp | (string | number | boolean | RegExp)[]>} values object with values\n * @returns {Problem[] | null} problems or null for success\n */\nconst processArguments = (args, config, values) => {\n  /**\n   * @type {Problem[]}\n   */\n  const problems = [];\n  for (const key of Object.keys(values)) {\n    const arg = args[key];\n    if (!arg) {\n      problems.push({\n        type: \"unknown-argument\",\n        path: \"\",\n        argument: key\n      });\n\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    /**\n     * @param {any} value\n     * @param {number | undefined} i\n     */\n    const processValue = (value, i) => {\n      const currentProblems = [];\n      for (const argConfig of arg.configs) {\n        const problem = processArgumentConfig(argConfig, config, value, i);\n        if (!problem) {\n          return;\n        }\n        currentProblems.push({\n          ...problem,\n          argument: key,\n          value,\n          index: i\n        });\n      }\n      problems.push(...currentProblems);\n    };\n    const value = values[key];\n    if (Array.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        processValue(value[i], i);\n      }\n    } else {\n      // eslint-disable-next-line no-undefined\n      processValue(value, undefined);\n    }\n  }\n  if (problems.length === 0) {\n    return null;\n  }\n  return problems;\n};\nmodule.exports = processArguments;","map":{"version":3,"names":["path","require","cliAddedItems","WeakMap","getObjectAndProperty","config","schemaPath","index","value","parts","split","property","pop","current","i","part","isArray","endsWith","name","slice","undefined","Array","from","length","set","problem","type","join","addedItems","get","push","x","object","parseValueForArgumentConfig","argConfig","resolve","n","isNaN","RegExp","match","exec","test","values","includes","item","getExpectedValue","map","v","setValue","processArgumentConfig","multiple","parsed","expected","processArguments","args","problems","key","Object","keys","arg","argument","processValue","currentProblems","configs","module","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/webpack-dev-server/bin/process-arguments.js"],"sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\n\n// Based on https://github.com/webpack/webpack/blob/master/lib/cli.js\n// Please do not modify it\n\n/** @typedef {\"unknown-argument\" | \"unexpected-non-array-in-path\" | \"unexpected-non-object-in-path\" | \"multiple-values-unexpected\" | \"invalid-value\"} ProblemType */\n\n/**\n * @typedef {Object} Problem\n * @property {ProblemType} type\n * @property {string} path\n * @property {string} argument\n * @property {any=} value\n * @property {number=} index\n * @property {string=} expected\n */\n\n/**\n * @typedef {Object} LocalProblem\n * @property {ProblemType} type\n * @property {string} path\n * @property {string=} expected\n */\n\n/**\n * @typedef {Object} ArgumentConfig\n * @property {string} description\n * @property {string} path\n * @property {boolean} multiple\n * @property {\"enum\"|\"string\"|\"path\"|\"number\"|\"boolean\"|\"RegExp\"|\"reset\"} type\n * @property {any[]=} values\n */\n\n/**\n * @typedef {Object} Argument\n * @property {string} description\n * @property {\"string\"|\"number\"|\"boolean\"} simpleType\n * @property {boolean} multiple\n * @property {ArgumentConfig[]} configs\n */\n\nconst cliAddedItems = new WeakMap();\n\n/**\n * @param {any} config configuration\n * @param {string} schemaPath path in the config\n * @param {number | undefined} index index of value when multiple values are provided, otherwise undefined\n * @returns {{ problem?: LocalProblem, object?: any, property?: string | number, value?: any }} problem or object with property and value\n */\nconst getObjectAndProperty = (config, schemaPath, index = 0) => {\n  if (!schemaPath) {\n    return { value: config };\n  }\n\n  const parts = schemaPath.split(\".\");\n  const property = parts.pop();\n  let current = config;\n  let i = 0;\n\n  for (const part of parts) {\n    const isArray = part.endsWith(\"[]\");\n    const name = isArray ? part.slice(0, -2) : part;\n    let value = current[name];\n\n    if (isArray) {\n      // eslint-disable-next-line no-undefined\n      if (value === undefined) {\n        value = {};\n        current[name] = [...Array.from({ length: index }), value];\n        cliAddedItems.set(current[name], index + 1);\n      } else if (!Array.isArray(value)) {\n        return {\n          problem: {\n            type: \"unexpected-non-array-in-path\",\n            path: parts.slice(0, i).join(\".\"),\n          },\n        };\n      } else {\n        let addedItems = cliAddedItems.get(value) || 0;\n\n        while (addedItems <= index) {\n          // eslint-disable-next-line no-undefined\n          value.push(undefined);\n          // eslint-disable-next-line no-plusplus\n          addedItems++;\n        }\n\n        cliAddedItems.set(value, addedItems);\n\n        const x = value.length - addedItems + index;\n\n        // eslint-disable-next-line no-undefined\n        if (value[x] === undefined) {\n          value[x] = {};\n        } else if (value[x] === null || typeof value[x] !== \"object\") {\n          return {\n            problem: {\n              type: \"unexpected-non-object-in-path\",\n              path: parts.slice(0, i).join(\".\"),\n            },\n          };\n        }\n\n        value = value[x];\n      }\n      // eslint-disable-next-line no-undefined\n    } else if (value === undefined) {\n      // eslint-disable-next-line no-multi-assign\n      value = current[name] = {};\n    } else if (value === null || typeof value !== \"object\") {\n      return {\n        problem: {\n          type: \"unexpected-non-object-in-path\",\n          path: parts.slice(0, i).join(\".\"),\n        },\n      };\n    }\n\n    current = value;\n    // eslint-disable-next-line no-plusplus\n    i++;\n  }\n\n  const value = current[/** @type {string} */ (property)];\n\n  if (/** @type {string} */ (property).endsWith(\"[]\")) {\n    const name = /** @type {string} */ (property).slice(0, -2);\n    // eslint-disable-next-line no-shadow\n    const value = current[name];\n\n    // eslint-disable-next-line no-undefined\n    if (value === undefined) {\n      // eslint-disable-next-line no-undefined\n      current[name] = [...Array.from({ length: index }), undefined];\n      cliAddedItems.set(current[name], index + 1);\n\n      // eslint-disable-next-line no-undefined\n      return { object: current[name], property: index, value: undefined };\n    } else if (!Array.isArray(value)) {\n      // eslint-disable-next-line no-undefined\n      current[name] = [value, ...Array.from({ length: index }), undefined];\n      cliAddedItems.set(current[name], index + 1);\n\n      // eslint-disable-next-line no-undefined\n      return { object: current[name], property: index + 1, value: undefined };\n    }\n\n    let addedItems = cliAddedItems.get(value) || 0;\n\n    while (addedItems <= index) {\n      // eslint-disable-next-line no-undefined\n      value.push(undefined);\n      // eslint-disable-next-line no-plusplus\n      addedItems++;\n    }\n\n    cliAddedItems.set(value, addedItems);\n\n    const x = value.length - addedItems + index;\n\n    // eslint-disable-next-line no-undefined\n    if (value[x] === undefined) {\n      value[x] = {};\n    } else if (value[x] === null || typeof value[x] !== \"object\") {\n      return {\n        problem: {\n          type: \"unexpected-non-object-in-path\",\n          path: schemaPath,\n        },\n      };\n    }\n\n    return {\n      object: value,\n      property: x,\n      value: value[x],\n    };\n  }\n\n  return { object: current, property, value };\n};\n\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @param {any} value the value\n * @returns {any | undefined} parsed value\n */\nconst parseValueForArgumentConfig = (argConfig, value) => {\n  // eslint-disable-next-line default-case\n  switch (argConfig.type) {\n    case \"string\":\n      if (typeof value === \"string\") {\n        return value;\n      }\n      break;\n    case \"path\":\n      if (typeof value === \"string\") {\n        return path.resolve(value);\n      }\n      break;\n    case \"number\":\n      if (typeof value === \"number\") {\n        return value;\n      }\n\n      if (typeof value === \"string\" && /^[+-]?\\d*(\\.\\d*)[eE]\\d+$/) {\n        const n = +value;\n        if (!isNaN(n)) return n;\n      }\n\n      break;\n    case \"boolean\":\n      if (typeof value === \"boolean\") {\n        return value;\n      }\n\n      if (value === \"true\") {\n        return true;\n      }\n\n      if (value === \"false\") {\n        return false;\n      }\n\n      break;\n    case \"RegExp\":\n      if (value instanceof RegExp) {\n        return value;\n      }\n\n      if (typeof value === \"string\") {\n        // cspell:word yugi\n        const match = /^\\/(.*)\\/([yugi]*)$/.exec(value);\n\n        if (match && !/[^\\\\]\\//.test(match[1])) {\n          return new RegExp(match[1], match[2]);\n        }\n      }\n\n      break;\n    case \"enum\":\n      if (/** @type {any[]} */ (argConfig.values).includes(value)) {\n        return value;\n      }\n\n      for (const item of /** @type {any[]} */ (argConfig.values)) {\n        if (`${item}` === value) return item;\n      }\n\n      break;\n    case \"reset\":\n      if (value === true) {\n        return [];\n      }\n\n      break;\n  }\n};\n\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @returns {string | undefined} expected message\n */\nconst getExpectedValue = (argConfig) => {\n  switch (argConfig.type) {\n    default:\n      return argConfig.type;\n    case \"boolean\":\n      return \"true | false\";\n    case \"RegExp\":\n      return \"regular expression (example: /ab?c*/)\";\n    case \"enum\":\n      return /** @type {any[]} */ (argConfig.values)\n        .map((v) => `${v}`)\n        .join(\" | \");\n    case \"reset\":\n      return \"true (will reset the previous value to an empty array)\";\n  }\n};\n\n/**\n * @param {any} config configuration\n * @param {string} schemaPath path in the config\n * @param {any} value parsed value\n * @param {number | undefined} index index of value when multiple values are provided, otherwise undefined\n * @returns {LocalProblem | null} problem or null for success\n */\nconst setValue = (config, schemaPath, value, index) => {\n  const { problem, object, property } = getObjectAndProperty(\n    config,\n    schemaPath,\n    index\n  );\n\n  if (problem) {\n    return problem;\n  }\n\n  object[/** @type {string} */ (property)] = value;\n\n  return null;\n};\n\n/**\n * @param {ArgumentConfig} argConfig processing instructions\n * @param {any} config configuration\n * @param {any} value the value\n * @param {number | undefined} index the index if multiple values provided\n * @returns {LocalProblem | null} a problem if any\n */\nconst processArgumentConfig = (argConfig, config, value, index) => {\n  // eslint-disable-next-line no-undefined\n  if (index !== undefined && !argConfig.multiple) {\n    return {\n      type: \"multiple-values-unexpected\",\n      path: argConfig.path,\n    };\n  }\n\n  const parsed = parseValueForArgumentConfig(argConfig, value);\n\n  // eslint-disable-next-line no-undefined\n  if (parsed === undefined) {\n    return {\n      type: \"invalid-value\",\n      path: argConfig.path,\n      expected: getExpectedValue(argConfig),\n    };\n  }\n\n  const problem = setValue(config, argConfig.path, parsed, index);\n\n  if (problem) {\n    return problem;\n  }\n\n  return null;\n};\n\n/**\n * @param {Record<string, Argument>} args object of arguments\n * @param {any} config configuration\n * @param {Record<string, string | number | boolean | RegExp | (string | number | boolean | RegExp)[]>} values object with values\n * @returns {Problem[] | null} problems or null for success\n */\nconst processArguments = (args, config, values) => {\n  /**\n   * @type {Problem[]}\n   */\n  const problems = [];\n\n  for (const key of Object.keys(values)) {\n    const arg = args[key];\n\n    if (!arg) {\n      problems.push({\n        type: \"unknown-argument\",\n        path: \"\",\n        argument: key,\n      });\n\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    /**\n     * @param {any} value\n     * @param {number | undefined} i\n     */\n    const processValue = (value, i) => {\n      const currentProblems = [];\n\n      for (const argConfig of arg.configs) {\n        const problem = processArgumentConfig(argConfig, config, value, i);\n\n        if (!problem) {\n          return;\n        }\n\n        currentProblems.push({\n          ...problem,\n          argument: key,\n          value,\n          index: i,\n        });\n      }\n\n      problems.push(...currentProblems);\n    };\n\n    const value = values[key];\n\n    if (Array.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        processValue(value[i], i);\n      }\n    } else {\n      // eslint-disable-next-line no-undefined\n      processValue(value, undefined);\n    }\n  }\n\n  if (problems.length === 0) {\n    return null;\n  }\n\n  return problems;\n};\n\nmodule.exports = processArguments;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}