{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loader;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _semver = require(\"semver\");\nvar _package = _interopRequireDefault(require(\"postcss/package.json\"));\nvar _Warning = _interopRequireDefault(require(\"./Warning\"));\nvar _options = _interopRequireDefault(require(\"./options.json\"));\nvar _utils = require(\"./utils\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nlet hasExplicitDependencyOnPostCSS = false;\n/**\n * **PostCSS Loader**\n *\n * Loads && processes CSS with [PostCSS](https://github.com/postcss/postcss)\n *\n * @method loader\n *\n * @param {String} content Source\n * @param {Object} sourceMap Source Map\n * @param {Object} meta Meta\n *\n * @return {callback} callback Result\n */\nfunction loader(_x, _x2, _x3) {\n  return _loader.apply(this, arguments);\n}\nfunction _loader() {\n  _loader = _asyncToGenerator(function* (content, sourceMap, meta) {\n    const options = this.getOptions(_options.default);\n    const callback = this.async();\n    const configOption = typeof options.postcssOptions === \"undefined\" || typeof options.postcssOptions.config === \"undefined\" ? true : options.postcssOptions.config;\n    const postcssFactory = (0, _utils.getPostcssImplementation)(this, options.implementation);\n    if (!postcssFactory) {\n      callback(new Error(`The Postcss implementation \"${options.implementation}\" not found`));\n      return;\n    }\n    let loadedConfig;\n    if (configOption) {\n      try {\n        loadedConfig = yield (0, _utils.loadConfig)(this, configOption, options.postcssOptions);\n      } catch (error) {\n        callback(error);\n        return;\n      }\n    }\n    const useSourceMap = typeof options.sourceMap !== \"undefined\" ? options.sourceMap : this.sourceMap;\n    const {\n      plugins,\n      processOptions\n    } = yield (0, _utils.getPostcssOptions)(this, loadedConfig, options.postcssOptions);\n    if (useSourceMap) {\n      processOptions.map = {\n        inline: false,\n        annotation: false,\n        ...processOptions.map\n      };\n    }\n    if (sourceMap && processOptions.map) {\n      processOptions.map.prev = (0, _utils.normalizeSourceMap)(sourceMap, this.context);\n    }\n    let root; // Reuse PostCSS AST from other loaders\n\n    if (meta && meta.ast && meta.ast.type === \"postcss\" && (0, _semver.satisfies)(meta.ast.version, `^${_package.default.version}`)) {\n      ({\n        root\n      } = meta.ast);\n    }\n    if (!root && options.execute) {\n      // eslint-disable-next-line no-param-reassign\n      content = (0, _utils.exec)(content, this);\n    }\n    let result;\n    let processor;\n    try {\n      processor = postcssFactory(plugins);\n      result = yield processor.process(root || content, processOptions);\n    } catch (error) {\n      // Check postcss versions to avoid using PostCSS 7.\n      // For caching reasons, we use the readFileSync and existsSync functions from the context,\n      // not the functions from the `fs` module.\n      if (!hasExplicitDependencyOnPostCSS && processor && processor.version && processor.version.startsWith(\"7.\")) {\n        // The `findPackageJsonDir` function returns `string` or `null`.\n        // This is used to do for caching, that is, an explicit comparison with `undefined`\n        // is used to make the condition body run once.\n        const packageJSONDir = (0, _utils.findPackageJSONDir)(process.cwd(), this.fs.statSync);\n        if (packageJSONDir) {\n          let bufferOfPackageJSON;\n          try {\n            bufferOfPackageJSON = this.fs.readFileSync(_path.default.resolve(packageJSONDir, \"package.json\"), \"utf8\");\n          } catch (_error) {// Nothing\n          }\n          if (bufferOfPackageJSON) {\n            let pkg;\n            try {\n              pkg = JSON.parse(bufferOfPackageJSON);\n            } catch (_error) {// Nothing\n            }\n            if (pkg) {\n              if (!pkg.dependencies.postcss && !pkg.devDependencies.postcss) {\n                this.emitWarning(new Error(\"Add postcss as project dependency. postcss is not a peer dependency for postcss-loader. \" + \"Use `npm install postcss` or `yarn add postcss`\"));\n              } else {\n                hasExplicitDependencyOnPostCSS = true;\n              }\n            }\n          }\n        }\n      }\n      (0, _utils.reportError)(this, callback, error);\n      return;\n    }\n    for (const warning of result.warnings()) {\n      this.emitWarning(new _Warning.default(warning));\n    }\n    for (const message of result.messages) {\n      // eslint-disable-next-line default-case\n      switch (message.type) {\n        case \"dependency\":\n          this.addDependency(message.file);\n          break;\n        case \"build-dependency\":\n          this.addBuildDependency(message.file);\n          break;\n        case \"missing-dependency\":\n          this.addMissingDependency(message.file);\n          break;\n        case \"context-dependency\":\n          this.addContextDependency(message.file);\n          break;\n        case \"dir-dependency\":\n          this.addContextDependency(message.dir);\n          break;\n        case \"asset\":\n          if (message.content && message.file) {\n            this.emitFile(message.file, message.content, message.sourceMap, message.info);\n          }\n      }\n    } // eslint-disable-next-line no-undefined\n\n    let map = result.map ? result.map.toJSON() : undefined;\n    if (map && useSourceMap) {\n      map = (0, _utils.normalizeSourceMapAfterPostcss)(map, this.context);\n    }\n    let ast;\n    try {\n      ast = {\n        type: \"postcss\",\n        version: result.processor.version,\n        root: result.root\n      };\n    } catch (error) {\n      (0, _utils.reportError)(this, callback, error);\n      return;\n    }\n    callback(null, result.css, map, {\n      ast\n    });\n  });\n  return _loader.apply(this, arguments);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","loader","_path","_interopRequireDefault","require","_semver","_package","_Warning","_options","_utils","obj","__esModule","hasExplicitDependencyOnPostCSS","content","sourceMap","meta","options","getOptions","callback","async","configOption","postcssOptions","config","postcssFactory","getPostcssImplementation","implementation","Error","loadedConfig","loadConfig","error","useSourceMap","plugins","processOptions","getPostcssOptions","map","inline","annotation","prev","normalizeSourceMap","context","root","ast","type","satisfies","version","execute","exec","result","processor","process","startsWith","packageJSONDir","findPackageJSONDir","cwd","fs","statSync","bufferOfPackageJSON","readFileSync","resolve","_error","pkg","JSON","parse","dependencies","postcss","devDependencies","emitWarning","reportError","warning","warnings","message","messages","addDependency","file","addBuildDependency","addMissingDependency","addContextDependency","dir","emitFile","info","toJSON","undefined","normalizeSourceMapAfterPostcss","css"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/postcss-loader/dist/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loader;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _semver = require(\"semver\");\n\nvar _package = _interopRequireDefault(require(\"postcss/package.json\"));\n\nvar _Warning = _interopRequireDefault(require(\"./Warning\"));\n\nvar _options = _interopRequireDefault(require(\"./options.json\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet hasExplicitDependencyOnPostCSS = false;\n/**\n * **PostCSS Loader**\n *\n * Loads && processes CSS with [PostCSS](https://github.com/postcss/postcss)\n *\n * @method loader\n *\n * @param {String} content Source\n * @param {Object} sourceMap Source Map\n * @param {Object} meta Meta\n *\n * @return {callback} callback Result\n */\n\nasync function loader(content, sourceMap, meta) {\n  const options = this.getOptions(_options.default);\n  const callback = this.async();\n  const configOption = typeof options.postcssOptions === \"undefined\" || typeof options.postcssOptions.config === \"undefined\" ? true : options.postcssOptions.config;\n  const postcssFactory = (0, _utils.getPostcssImplementation)(this, options.implementation);\n\n  if (!postcssFactory) {\n    callback(new Error(`The Postcss implementation \"${options.implementation}\" not found`));\n    return;\n  }\n\n  let loadedConfig;\n\n  if (configOption) {\n    try {\n      loadedConfig = await (0, _utils.loadConfig)(this, configOption, options.postcssOptions);\n    } catch (error) {\n      callback(error);\n      return;\n    }\n  }\n\n  const useSourceMap = typeof options.sourceMap !== \"undefined\" ? options.sourceMap : this.sourceMap;\n  const {\n    plugins,\n    processOptions\n  } = await (0, _utils.getPostcssOptions)(this, loadedConfig, options.postcssOptions);\n\n  if (useSourceMap) {\n    processOptions.map = {\n      inline: false,\n      annotation: false,\n      ...processOptions.map\n    };\n  }\n\n  if (sourceMap && processOptions.map) {\n    processOptions.map.prev = (0, _utils.normalizeSourceMap)(sourceMap, this.context);\n  }\n\n  let root; // Reuse PostCSS AST from other loaders\n\n  if (meta && meta.ast && meta.ast.type === \"postcss\" && (0, _semver.satisfies)(meta.ast.version, `^${_package.default.version}`)) {\n    ({\n      root\n    } = meta.ast);\n  }\n\n  if (!root && options.execute) {\n    // eslint-disable-next-line no-param-reassign\n    content = (0, _utils.exec)(content, this);\n  }\n\n  let result;\n  let processor;\n\n  try {\n    processor = postcssFactory(plugins);\n    result = await processor.process(root || content, processOptions);\n  } catch (error) {\n    // Check postcss versions to avoid using PostCSS 7.\n    // For caching reasons, we use the readFileSync and existsSync functions from the context,\n    // not the functions from the `fs` module.\n    if (!hasExplicitDependencyOnPostCSS && processor && processor.version && processor.version.startsWith(\"7.\")) {\n      // The `findPackageJsonDir` function returns `string` or `null`.\n      // This is used to do for caching, that is, an explicit comparison with `undefined`\n      // is used to make the condition body run once.\n      const packageJSONDir = (0, _utils.findPackageJSONDir)(process.cwd(), this.fs.statSync);\n\n      if (packageJSONDir) {\n        let bufferOfPackageJSON;\n\n        try {\n          bufferOfPackageJSON = this.fs.readFileSync(_path.default.resolve(packageJSONDir, \"package.json\"), \"utf8\");\n        } catch (_error) {// Nothing\n        }\n\n        if (bufferOfPackageJSON) {\n          let pkg;\n\n          try {\n            pkg = JSON.parse(bufferOfPackageJSON);\n          } catch (_error) {// Nothing\n          }\n\n          if (pkg) {\n            if (!pkg.dependencies.postcss && !pkg.devDependencies.postcss) {\n              this.emitWarning(new Error(\"Add postcss as project dependency. postcss is not a peer dependency for postcss-loader. \" + \"Use `npm install postcss` or `yarn add postcss`\"));\n            } else {\n              hasExplicitDependencyOnPostCSS = true;\n            }\n          }\n        }\n      }\n    }\n\n    (0, _utils.reportError)(this, callback, error);\n    return;\n  }\n\n  for (const warning of result.warnings()) {\n    this.emitWarning(new _Warning.default(warning));\n  }\n\n  for (const message of result.messages) {\n    // eslint-disable-next-line default-case\n    switch (message.type) {\n      case \"dependency\":\n        this.addDependency(message.file);\n        break;\n\n      case \"build-dependency\":\n        this.addBuildDependency(message.file);\n        break;\n\n      case \"missing-dependency\":\n        this.addMissingDependency(message.file);\n        break;\n\n      case \"context-dependency\":\n        this.addContextDependency(message.file);\n        break;\n\n      case \"dir-dependency\":\n        this.addContextDependency(message.dir);\n        break;\n\n      case \"asset\":\n        if (message.content && message.file) {\n          this.emitFile(message.file, message.content, message.sourceMap, message.info);\n        }\n\n    }\n  } // eslint-disable-next-line no-undefined\n\n\n  let map = result.map ? result.map.toJSON() : undefined;\n\n  if (map && useSourceMap) {\n    map = (0, _utils.normalizeSourceMapAfterPostcss)(map, this.context);\n  }\n\n  let ast;\n\n  try {\n    ast = {\n      type: \"postcss\",\n      version: result.processor.version,\n      root: result.root\n    };\n  } catch (error) {\n    (0, _utils.reportError)(this, callback, error);\n    return;\n  }\n\n  callback(null, result.css, map, {\n    ast\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}