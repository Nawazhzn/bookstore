{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst path = require('path');\nconst {\n  promisify\n} = require('util');\nconst glob = promisify(require('glob'));\nconst minimatch = require('minimatch');\nconst {\n  defaults\n} = require('@istanbuljs/schema');\nconst isOutsideDir = require('./is-outside-dir');\nclass TestExclude {\n  constructor(opts = {}) {\n    Object.assign(this, {\n      relativePath: true\n    }, defaults.testExclude);\n    for (const [name, value] of Object.entries(opts)) {\n      if (value !== undefined) {\n        this[name] = value;\n      }\n    }\n    if (typeof this.include === 'string') {\n      this.include = [this.include];\n    }\n    if (typeof this.exclude === 'string') {\n      this.exclude = [this.exclude];\n    }\n    if (typeof this.extension === 'string') {\n      this.extension = [this.extension];\n    } else if (this.extension.length === 0) {\n      this.extension = false;\n    }\n    if (this.include && this.include.length > 0) {\n      this.include = prepGlobPatterns([].concat(this.include));\n    } else {\n      this.include = false;\n    }\n    if (this.excludeNodeModules && !this.exclude.includes('**/node_modules/**')) {\n      this.exclude = this.exclude.concat('**/node_modules/**');\n    }\n    this.exclude = prepGlobPatterns([].concat(this.exclude));\n    this.handleNegation();\n  }\n\n  /* handle the special case of negative globs\n   * (!**foo/bar); we create a new this.excludeNegated set\n   * of rules, which is applied after excludes and we\n   * move excluded include rules into this.excludes.\n   */\n  handleNegation() {\n    const noNeg = e => e.charAt(0) !== '!';\n    const onlyNeg = e => e.charAt(0) === '!';\n    const stripNeg = e => e.slice(1);\n    if (Array.isArray(this.include)) {\n      const includeNegated = this.include.filter(onlyNeg).map(stripNeg);\n      this.exclude.push(...prepGlobPatterns(includeNegated));\n      this.include = this.include.filter(noNeg);\n    }\n    this.excludeNegated = this.exclude.filter(onlyNeg).map(stripNeg);\n    this.exclude = this.exclude.filter(noNeg);\n    this.excludeNegated = prepGlobPatterns(this.excludeNegated);\n  }\n  shouldInstrument(filename, relFile) {\n    if (this.extension && !this.extension.some(ext => filename.endsWith(ext))) {\n      return false;\n    }\n    let pathToCheck = filename;\n    if (this.relativePath) {\n      relFile = relFile || path.relative(this.cwd, filename);\n\n      // Don't instrument files that are outside of the current working directory.\n      if (isOutsideDir(this.cwd, filename)) {\n        return false;\n      }\n      pathToCheck = relFile.replace(/^\\.[\\\\/]/, ''); // remove leading './' or '.\\'.\n    }\n\n    const dot = {\n      dot: true\n    };\n    const matches = pattern => minimatch(pathToCheck, pattern, dot);\n    return (!this.include || this.include.some(matches)) && (!this.exclude.some(matches) || this.excludeNegated.some(matches));\n  }\n  globSync(cwd = this.cwd) {\n    const globPatterns = getExtensionPattern(this.extension || []);\n    const globOptions = {\n      cwd,\n      nodir: true,\n      dot: true\n    };\n    /* If we don't have any excludeNegated then we can optimize glob by telling\n     * it to not iterate into unwanted directory trees (like node_modules). */\n    if (this.excludeNegated.length === 0) {\n      globOptions.ignore = this.exclude;\n    }\n    return glob.sync(globPatterns, globOptions).filter(file => this.shouldInstrument(path.resolve(cwd, file)));\n  }\n  glob(cwd = this.cwd) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const globPatterns = getExtensionPattern(_this.extension || []);\n      const globOptions = {\n        cwd,\n        nodir: true,\n        dot: true\n      };\n      /* If we don't have any excludeNegated then we can optimize glob by telling\n       * it to not iterate into unwanted directory trees (like node_modules). */\n      if (_this.excludeNegated.length === 0) {\n        globOptions.ignore = _this.exclude;\n      }\n      const list = yield glob(globPatterns, globOptions);\n      return list.filter(file => _this.shouldInstrument(path.resolve(cwd, file)));\n    })();\n  }\n}\nfunction prepGlobPatterns(patterns) {\n  return patterns.reduce((result, pattern) => {\n    // Allow gitignore style of directory exclusion\n    if (!/\\/\\*\\*$/.test(pattern)) {\n      result = result.concat(pattern.replace(/\\/$/, '') + '/**');\n    }\n\n    // Any rules of the form **/foo.js, should also match foo.js.\n    if (/^\\*\\*\\//.test(pattern)) {\n      result = result.concat(pattern.replace(/^\\*\\*\\//, ''));\n    }\n    return result.concat(pattern);\n  }, []);\n}\nfunction getExtensionPattern(extension) {\n  switch (extension.length) {\n    case 0:\n      return '**';\n    case 1:\n      return `**/*${extension[0]}`;\n    default:\n      return `**/*{${extension.join()}}`;\n  }\n}\nmodule.exports = TestExclude;","map":{"version":3,"names":["path","require","promisify","glob","minimatch","defaults","isOutsideDir","TestExclude","constructor","opts","Object","assign","relativePath","testExclude","name","value","entries","undefined","include","exclude","extension","length","prepGlobPatterns","concat","excludeNodeModules","includes","handleNegation","noNeg","e","charAt","onlyNeg","stripNeg","slice","Array","isArray","includeNegated","filter","map","push","excludeNegated","shouldInstrument","filename","relFile","some","ext","endsWith","pathToCheck","relative","cwd","replace","dot","matches","pattern","globSync","globPatterns","getExtensionPattern","globOptions","nodir","ignore","sync","file","resolve","list","patterns","reduce","result","test","join","module","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/test-exclude/index.js"],"sourcesContent":["'use strict';\n\nconst path = require('path');\nconst { promisify } = require('util');\nconst glob = promisify(require('glob'));\nconst minimatch = require('minimatch');\nconst { defaults } = require('@istanbuljs/schema');\nconst isOutsideDir = require('./is-outside-dir');\n\nclass TestExclude {\n    constructor(opts = {}) {\n        Object.assign(\n            this,\n            {relativePath: true},\n            defaults.testExclude\n        );\n\n        for (const [name, value] of Object.entries(opts)) {\n            if (value !== undefined) {\n                this[name] = value;\n            }\n        }\n\n        if (typeof this.include === 'string') {\n            this.include = [this.include];\n        }\n\n        if (typeof this.exclude === 'string') {\n            this.exclude = [this.exclude];\n        }\n\n        if (typeof this.extension === 'string') {\n            this.extension = [this.extension];\n        } else if (this.extension.length === 0) {\n            this.extension = false;\n        }\n\n        if (this.include && this.include.length > 0) {\n            this.include = prepGlobPatterns([].concat(this.include));\n        } else {\n            this.include = false;\n        }\n\n        if (\n            this.excludeNodeModules &&\n            !this.exclude.includes('**/node_modules/**')\n        ) {\n            this.exclude = this.exclude.concat('**/node_modules/**');\n        }\n\n        this.exclude = prepGlobPatterns([].concat(this.exclude));\n\n        this.handleNegation();\n    }\n\n    /* handle the special case of negative globs\n     * (!**foo/bar); we create a new this.excludeNegated set\n     * of rules, which is applied after excludes and we\n     * move excluded include rules into this.excludes.\n     */\n    handleNegation() {\n        const noNeg = e => e.charAt(0) !== '!';\n        const onlyNeg = e => e.charAt(0) === '!';\n        const stripNeg = e => e.slice(1);\n\n        if (Array.isArray(this.include)) {\n            const includeNegated = this.include.filter(onlyNeg).map(stripNeg);\n            this.exclude.push(...prepGlobPatterns(includeNegated));\n            this.include = this.include.filter(noNeg);\n        }\n\n        this.excludeNegated = this.exclude.filter(onlyNeg).map(stripNeg);\n        this.exclude = this.exclude.filter(noNeg);\n        this.excludeNegated = prepGlobPatterns(this.excludeNegated);\n    }\n\n    shouldInstrument(filename, relFile) {\n        if (\n            this.extension &&\n            !this.extension.some(ext => filename.endsWith(ext))\n        ) {\n            return false;\n        }\n\n        let pathToCheck = filename;\n\n        if (this.relativePath) {\n            relFile = relFile || path.relative(this.cwd, filename);\n\n            // Don't instrument files that are outside of the current working directory.\n            if (isOutsideDir(this.cwd, filename)) {\n                return false;\n            }\n\n            pathToCheck = relFile.replace(/^\\.[\\\\/]/, ''); // remove leading './' or '.\\'.\n        }\n\n        const dot = { dot: true };\n        const matches = pattern => minimatch(pathToCheck, pattern, dot);\n        return (\n            (!this.include || this.include.some(matches)) &&\n            (!this.exclude.some(matches) || this.excludeNegated.some(matches))\n        );\n    }\n\n    globSync(cwd = this.cwd) {\n        const globPatterns = getExtensionPattern(this.extension || []);\n        const globOptions = { cwd, nodir: true, dot: true };\n        /* If we don't have any excludeNegated then we can optimize glob by telling\n         * it to not iterate into unwanted directory trees (like node_modules). */\n        if (this.excludeNegated.length === 0) {\n            globOptions.ignore = this.exclude;\n        }\n\n        return glob\n            .sync(globPatterns, globOptions)\n            .filter(file => this.shouldInstrument(path.resolve(cwd, file)));\n    }\n\n    async glob(cwd = this.cwd) {\n        const globPatterns = getExtensionPattern(this.extension || []);\n        const globOptions = { cwd, nodir: true, dot: true };\n        /* If we don't have any excludeNegated then we can optimize glob by telling\n         * it to not iterate into unwanted directory trees (like node_modules). */\n        if (this.excludeNegated.length === 0) {\n            globOptions.ignore = this.exclude;\n        }\n\n        const list = await glob(globPatterns, globOptions);\n        return list.filter(file => this.shouldInstrument(path.resolve(cwd, file)));\n    }\n}\n\nfunction prepGlobPatterns(patterns) {\n    return patterns.reduce((result, pattern) => {\n        // Allow gitignore style of directory exclusion\n        if (!/\\/\\*\\*$/.test(pattern)) {\n            result = result.concat(pattern.replace(/\\/$/, '') + '/**');\n        }\n\n        // Any rules of the form **/foo.js, should also match foo.js.\n        if (/^\\*\\*\\//.test(pattern)) {\n            result = result.concat(pattern.replace(/^\\*\\*\\//, ''));\n        }\n\n        return result.concat(pattern);\n    }, []);\n}\n\nfunction getExtensionPattern(extension) {\n    switch (extension.length) {\n        case 0:\n            return '**';\n        case 1:\n            return `**/*${extension[0]}`;\n        default:\n            return `**/*{${extension.join()}}`;\n    }\n}\n\nmodule.exports = TestExclude;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}