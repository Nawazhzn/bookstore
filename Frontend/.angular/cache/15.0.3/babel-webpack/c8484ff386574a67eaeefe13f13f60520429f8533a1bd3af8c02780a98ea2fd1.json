{"ast":null,"code":"'use strict';\n\nconst BrowserResult = require('./browser_result');\nconst helper = require('./helper');\nconst logger = require('./logger');\nconst CONNECTED = 'CONNECTED'; // The browser is connected but not yet been commanded to execute tests.\nconst CONFIGURING = 'CONFIGURING'; // The browser has been told to execute tests; it is configuring before tests execution.\nconst EXECUTING = 'EXECUTING'; // The browser is executing the tests.\nconst EXECUTING_DISCONNECTED = 'EXECUTING_DISCONNECTED'; // The browser is executing the tests, but temporarily disconnect (waiting for socket reconnecting).\nconst DISCONNECTED = 'DISCONNECTED'; // The browser got completely disconnected (e.g. browser crash) and can be only restored with a restart of execution.\n\nclass Browser {\n  constructor(id, fullName, collection, emitter, socket, timer, disconnectDelay, noActivityTimeout, singleRun, clientConfig) {\n    this.id = id;\n    this.fullName = fullName;\n    this.name = helper.browserFullNameToShort(fullName);\n    this.lastResult = new BrowserResult();\n    this.disconnectsCount = 0;\n    this.activeSockets = [socket];\n    this.noActivityTimeout = noActivityTimeout;\n    this.singleRun = singleRun;\n    this.clientConfig = clientConfig;\n    this.collection = collection;\n    this.emitter = emitter;\n    this.socket = socket;\n    this.timer = timer;\n    this.disconnectDelay = disconnectDelay;\n    this.log = logger.create(this.name);\n    this.noActivityTimeoutId = null;\n    this.pendingDisconnect = null;\n    this.setState(CONNECTED);\n  }\n  init() {\n    this.log.info(`Connected on socket ${this.socket.id} with id ${this.id}`);\n    this.bindSocketEvents(this.socket);\n    this.collection.add(this);\n    this.emitter.emit('browser_register', this);\n  }\n  setState(toState) {\n    this.log.debug(`${this.state} -> ${toState}`);\n    this.state = toState;\n  }\n  onKarmaError(error) {\n    if (this.isNotConnected()) {\n      this.lastResult.error = true;\n    }\n    this.emitter.emit('browser_error', this, error);\n    this.refreshNoActivityTimeout();\n  }\n  onInfo(info) {\n    if (helper.isDefined(info.dump)) {\n      this.emitter.emit('browser_log', this, info.dump, 'dump');\n    }\n    if (helper.isDefined(info.log)) {\n      this.emitter.emit('browser_log', this, info.log, info.type);\n    } else if (helper.isDefined(info.total)) {\n      if (this.state === EXECUTING) {\n        this.lastResult.total = info.total;\n      }\n    } else if (!helper.isDefined(info.dump)) {\n      this.emitter.emit('browser_info', this, info);\n    }\n    this.refreshNoActivityTimeout();\n  }\n  onStart(info) {\n    if (info.total === null) {\n      this.log.warn('Adapter did not report total number of specs.');\n    }\n    this.lastResult = new BrowserResult(info.total);\n    this.setState(EXECUTING);\n    this.emitter.emit('browser_start', this, info);\n    this.refreshNoActivityTimeout();\n  }\n  onComplete(result) {\n    if (this.isNotConnected()) {\n      this.setState(CONNECTED);\n      this.lastResult.totalTimeEnd();\n      this.emitter.emit('browsers_change', this.collection);\n      this.emitter.emit('browser_complete', this, result);\n      this.clearNoActivityTimeout();\n    }\n  }\n  onSocketDisconnect(reason, disconnectedSocket) {\n    helper.arrayRemove(this.activeSockets, disconnectedSocket);\n    if (this.activeSockets.length) {\n      this.log.debug(`Disconnected ${disconnectedSocket.id}, still have ${this.getActiveSocketsIds()}`);\n      return;\n    }\n    if (this.isConnected()) {\n      this.disconnect(`Client disconnected from CONNECTED state (${reason})`);\n    } else if ([CONFIGURING, EXECUTING].includes(this.state)) {\n      this.log.debug(`Disconnected during run, waiting ${this.disconnectDelay}ms for reconnecting.`);\n      this.setState(EXECUTING_DISCONNECTED);\n      this.pendingDisconnect = this.timer.setTimeout(() => {\n        this.lastResult.totalTimeEnd();\n        this.lastResult.disconnected = true;\n        this.disconnect(`reconnect failed before timeout of ${this.disconnectDelay}ms (${reason})`);\n        this.emitter.emit('browser_complete', this);\n      }, this.disconnectDelay);\n      this.clearNoActivityTimeout();\n    }\n  }\n  reconnect(newSocket, clientSaysReconnect) {\n    if (!clientSaysReconnect || this.state === DISCONNECTED) {\n      this.log.info(`Disconnected browser returned on socket ${newSocket.id} with id ${this.id}.`);\n      this.setState(CONNECTED);\n\n      // The disconnected browser is already part of the collection.\n      // Update the collection view in the UI (header on client.html)\n      this.emitter.emit('browsers_change', this.collection);\n      // Notify the launcher\n      this.emitter.emit('browser_register', this);\n      // Execute tests if configured to do so.\n      if (this.singleRun) {\n        this.execute();\n      }\n    } else if (this.state === EXECUTING_DISCONNECTED) {\n      this.log.debug('Lost socket connection, but browser continued to execute. Reconnected ' + `on socket ${newSocket.id}.`);\n      this.setState(EXECUTING);\n    } else if ([CONNECTED, CONFIGURING, EXECUTING].includes(this.state)) {\n      this.log.debug(`Rebinding to new socket ${newSocket.id} (already have ` + `${this.getActiveSocketsIds()})`);\n    }\n    if (!this.activeSockets.some(s => s.id === newSocket.id)) {\n      this.activeSockets.push(newSocket);\n      this.bindSocketEvents(newSocket);\n    }\n    if (this.pendingDisconnect) {\n      this.timer.clearTimeout(this.pendingDisconnect);\n    }\n    this.refreshNoActivityTimeout();\n  }\n  onResult(result) {\n    if (Array.isArray(result)) {\n      result.forEach(this.onResult, this);\n    } else if (this.isNotConnected()) {\n      this.lastResult.add(result);\n      this.emitter.emit('spec_complete', this, result);\n    }\n    this.refreshNoActivityTimeout();\n  }\n  execute() {\n    this.activeSockets.forEach(socket => socket.emit('execute', this.clientConfig));\n    this.setState(CONFIGURING);\n    this.refreshNoActivityTimeout();\n  }\n  getActiveSocketsIds() {\n    return this.activeSockets.map(s => s.id).join(', ');\n  }\n  disconnect(reason) {\n    this.log.warn(`Disconnected (${this.disconnectsCount} times) ${reason || ''}`);\n    this.disconnectsCount++;\n    this.emitter.emit('browser_error', this, `Disconnected ${reason || ''}`);\n    this.remove();\n  }\n  remove() {\n    this.setState(DISCONNECTED);\n    this.collection.remove(this);\n  }\n  refreshNoActivityTimeout() {\n    if (this.noActivityTimeout) {\n      this.clearNoActivityTimeout();\n      this.noActivityTimeoutId = this.timer.setTimeout(() => {\n        this.lastResult.totalTimeEnd();\n        this.lastResult.disconnected = true;\n        this.disconnect(`, because no message in ${this.noActivityTimeout} ms.`);\n        this.emitter.emit('browser_complete', this);\n      }, this.noActivityTimeout);\n    }\n  }\n  clearNoActivityTimeout() {\n    if (this.noActivityTimeout && this.noActivityTimeoutId) {\n      this.timer.clearTimeout(this.noActivityTimeoutId);\n      this.noActivityTimeoutId = null;\n    }\n  }\n  bindSocketEvents(socket) {\n    // TODO: check which of these events are actually emitted by socket\n    socket.on('disconnect', reason => this.onSocketDisconnect(reason, socket));\n    socket.on('start', info => this.onStart(info));\n    socket.on('karma_error', error => this.onKarmaError(error));\n    socket.on('complete', result => this.onComplete(result));\n    socket.on('info', info => this.onInfo(info));\n    socket.on('result', result => this.onResult(result));\n  }\n  isConnected() {\n    return this.state === CONNECTED;\n  }\n  isNotConnected() {\n    return !this.isConnected();\n  }\n  serialize() {\n    return {\n      id: this.id,\n      name: this.name,\n      isConnected: this.state === CONNECTED\n    };\n  }\n  toString() {\n    return this.name;\n  }\n  toJSON() {\n    return {\n      id: this.id,\n      fullName: this.fullName,\n      name: this.name,\n      state: this.state,\n      lastResult: this.lastResult,\n      disconnectsCount: this.disconnectsCount,\n      noActivityTimeout: this.noActivityTimeout,\n      disconnectDelay: this.disconnectDelay\n    };\n  }\n}\nBrowser.factory = function (id, fullName, /* capturedBrowsers */collection, emitter, socket, timer, /* config.browserDisconnectTimeout */disconnectDelay, /* config.browserNoActivityTimeout */noActivityTimeout, /* config.singleRun */singleRun, /* config.client */clientConfig) {\n  return new Browser(id, fullName, collection, emitter, socket, timer, disconnectDelay, noActivityTimeout, singleRun, clientConfig);\n};\nBrowser.STATE_CONNECTED = CONNECTED;\nBrowser.STATE_CONFIGURING = CONFIGURING;\nBrowser.STATE_EXECUTING = EXECUTING;\nBrowser.STATE_EXECUTING_DISCONNECTED = EXECUTING_DISCONNECTED;\nBrowser.STATE_DISCONNECTED = DISCONNECTED;\nmodule.exports = Browser;","map":{"version":3,"names":["BrowserResult","require","helper","logger","CONNECTED","CONFIGURING","EXECUTING","EXECUTING_DISCONNECTED","DISCONNECTED","Browser","constructor","id","fullName","collection","emitter","socket","timer","disconnectDelay","noActivityTimeout","singleRun","clientConfig","name","browserFullNameToShort","lastResult","disconnectsCount","activeSockets","log","create","noActivityTimeoutId","pendingDisconnect","setState","init","info","bindSocketEvents","add","emit","toState","debug","state","onKarmaError","error","isNotConnected","refreshNoActivityTimeout","onInfo","isDefined","dump","type","total","onStart","warn","onComplete","result","totalTimeEnd","clearNoActivityTimeout","onSocketDisconnect","reason","disconnectedSocket","arrayRemove","length","getActiveSocketsIds","isConnected","disconnect","includes","setTimeout","disconnected","reconnect","newSocket","clientSaysReconnect","execute","some","s","push","clearTimeout","onResult","Array","isArray","forEach","map","join","remove","on","serialize","toString","toJSON","factory","STATE_CONNECTED","STATE_CONFIGURING","STATE_EXECUTING","STATE_EXECUTING_DISCONNECTED","STATE_DISCONNECTED","module","exports"],"sources":["C:/Users/Nawaz/Downloads/mean-stack-authentication-authorization-master/mean-stack-authentication-authorization-master/Frontend/node_modules/karma/lib/browser.js"],"sourcesContent":["'use strict'\n\nconst BrowserResult = require('./browser_result')\nconst helper = require('./helper')\nconst logger = require('./logger')\n\nconst CONNECTED = 'CONNECTED' // The browser is connected but not yet been commanded to execute tests.\nconst CONFIGURING = 'CONFIGURING' // The browser has been told to execute tests; it is configuring before tests execution.\nconst EXECUTING = 'EXECUTING' // The browser is executing the tests.\nconst EXECUTING_DISCONNECTED = 'EXECUTING_DISCONNECTED' // The browser is executing the tests, but temporarily disconnect (waiting for socket reconnecting).\nconst DISCONNECTED = 'DISCONNECTED' // The browser got completely disconnected (e.g. browser crash) and can be only restored with a restart of execution.\n\nclass Browser {\n  constructor (id, fullName, collection, emitter, socket, timer, disconnectDelay,\n    noActivityTimeout, singleRun, clientConfig) {\n    this.id = id\n    this.fullName = fullName\n    this.name = helper.browserFullNameToShort(fullName)\n    this.lastResult = new BrowserResult()\n    this.disconnectsCount = 0\n    this.activeSockets = [socket]\n    this.noActivityTimeout = noActivityTimeout\n    this.singleRun = singleRun\n    this.clientConfig = clientConfig\n    this.collection = collection\n    this.emitter = emitter\n    this.socket = socket\n    this.timer = timer\n    this.disconnectDelay = disconnectDelay\n\n    this.log = logger.create(this.name)\n\n    this.noActivityTimeoutId = null\n    this.pendingDisconnect = null\n    this.setState(CONNECTED)\n  }\n\n  init () {\n    this.log.info(`Connected on socket ${this.socket.id} with id ${this.id}`)\n\n    this.bindSocketEvents(this.socket)\n    this.collection.add(this)\n    this.emitter.emit('browser_register', this)\n  }\n\n  setState (toState) {\n    this.log.debug(`${this.state} -> ${toState}`)\n    this.state = toState\n  }\n\n  onKarmaError (error) {\n    if (this.isNotConnected()) {\n      this.lastResult.error = true\n    }\n    this.emitter.emit('browser_error', this, error)\n    this.refreshNoActivityTimeout()\n  }\n\n  onInfo (info) {\n    if (helper.isDefined(info.dump)) {\n      this.emitter.emit('browser_log', this, info.dump, 'dump')\n    }\n\n    if (helper.isDefined(info.log)) {\n      this.emitter.emit('browser_log', this, info.log, info.type)\n    } else if (helper.isDefined(info.total)) {\n      if (this.state === EXECUTING) {\n        this.lastResult.total = info.total\n      }\n    } else if (!helper.isDefined(info.dump)) {\n      this.emitter.emit('browser_info', this, info)\n    }\n\n    this.refreshNoActivityTimeout()\n  }\n\n  onStart (info) {\n    if (info.total === null) {\n      this.log.warn('Adapter did not report total number of specs.')\n    }\n\n    this.lastResult = new BrowserResult(info.total)\n    this.setState(EXECUTING)\n    this.emitter.emit('browser_start', this, info)\n    this.refreshNoActivityTimeout()\n  }\n\n  onComplete (result) {\n    if (this.isNotConnected()) {\n      this.setState(CONNECTED)\n      this.lastResult.totalTimeEnd()\n\n      this.emitter.emit('browsers_change', this.collection)\n      this.emitter.emit('browser_complete', this, result)\n\n      this.clearNoActivityTimeout()\n    }\n  }\n\n  onSocketDisconnect (reason, disconnectedSocket) {\n    helper.arrayRemove(this.activeSockets, disconnectedSocket)\n    if (this.activeSockets.length) {\n      this.log.debug(`Disconnected ${disconnectedSocket.id}, still have ${this.getActiveSocketsIds()}`)\n      return\n    }\n\n    if (this.isConnected()) {\n      this.disconnect(`Client disconnected from CONNECTED state (${reason})`)\n    } else if ([CONFIGURING, EXECUTING].includes(this.state)) {\n      this.log.debug(`Disconnected during run, waiting ${this.disconnectDelay}ms for reconnecting.`)\n      this.setState(EXECUTING_DISCONNECTED)\n\n      this.pendingDisconnect = this.timer.setTimeout(() => {\n        this.lastResult.totalTimeEnd()\n        this.lastResult.disconnected = true\n        this.disconnect(`reconnect failed before timeout of ${this.disconnectDelay}ms (${reason})`)\n        this.emitter.emit('browser_complete', this)\n      }, this.disconnectDelay)\n\n      this.clearNoActivityTimeout()\n    }\n  }\n\n  reconnect (newSocket, clientSaysReconnect) {\n    if (!clientSaysReconnect || this.state === DISCONNECTED) {\n      this.log.info(`Disconnected browser returned on socket ${newSocket.id} with id ${this.id}.`)\n      this.setState(CONNECTED)\n\n      // The disconnected browser is already part of the collection.\n      // Update the collection view in the UI (header on client.html)\n      this.emitter.emit('browsers_change', this.collection)\n      // Notify the launcher\n      this.emitter.emit('browser_register', this)\n      // Execute tests if configured to do so.\n      if (this.singleRun) {\n        this.execute()\n      }\n    } else if (this.state === EXECUTING_DISCONNECTED) {\n      this.log.debug('Lost socket connection, but browser continued to execute. Reconnected ' +\n        `on socket ${newSocket.id}.`)\n      this.setState(EXECUTING)\n    } else if ([CONNECTED, CONFIGURING, EXECUTING].includes(this.state)) {\n      this.log.debug(`Rebinding to new socket ${newSocket.id} (already have ` +\n        `${this.getActiveSocketsIds()})`)\n    }\n\n    if (!this.activeSockets.some((s) => s.id === newSocket.id)) {\n      this.activeSockets.push(newSocket)\n      this.bindSocketEvents(newSocket)\n    }\n\n    if (this.pendingDisconnect) {\n      this.timer.clearTimeout(this.pendingDisconnect)\n    }\n\n    this.refreshNoActivityTimeout()\n  }\n\n  onResult (result) {\n    if (Array.isArray(result)) {\n      result.forEach(this.onResult, this)\n    } else if (this.isNotConnected()) {\n      this.lastResult.add(result)\n      this.emitter.emit('spec_complete', this, result)\n    }\n    this.refreshNoActivityTimeout()\n  }\n\n  execute () {\n    this.activeSockets.forEach((socket) => socket.emit('execute', this.clientConfig))\n    this.setState(CONFIGURING)\n    this.refreshNoActivityTimeout()\n  }\n\n  getActiveSocketsIds () {\n    return this.activeSockets.map((s) => s.id).join(', ')\n  }\n\n  disconnect (reason) {\n    this.log.warn(`Disconnected (${this.disconnectsCount} times) ${reason || ''}`)\n    this.disconnectsCount++\n    this.emitter.emit('browser_error', this, `Disconnected ${reason || ''}`)\n    this.remove()\n  }\n\n  remove () {\n    this.setState(DISCONNECTED)\n    this.collection.remove(this)\n  }\n\n  refreshNoActivityTimeout () {\n    if (this.noActivityTimeout) {\n      this.clearNoActivityTimeout()\n\n      this.noActivityTimeoutId = this.timer.setTimeout(() => {\n        this.lastResult.totalTimeEnd()\n        this.lastResult.disconnected = true\n        this.disconnect(`, because no message in ${this.noActivityTimeout} ms.`)\n        this.emitter.emit('browser_complete', this)\n      }, this.noActivityTimeout)\n    }\n  }\n\n  clearNoActivityTimeout () {\n    if (this.noActivityTimeout && this.noActivityTimeoutId) {\n      this.timer.clearTimeout(this.noActivityTimeoutId)\n      this.noActivityTimeoutId = null\n    }\n  }\n\n  bindSocketEvents (socket) {\n    // TODO: check which of these events are actually emitted by socket\n    socket.on('disconnect', (reason) => this.onSocketDisconnect(reason, socket))\n    socket.on('start', (info) => this.onStart(info))\n    socket.on('karma_error', (error) => this.onKarmaError(error))\n    socket.on('complete', (result) => this.onComplete(result))\n    socket.on('info', (info) => this.onInfo(info))\n    socket.on('result', (result) => this.onResult(result))\n  }\n\n  isConnected () {\n    return this.state === CONNECTED\n  }\n\n  isNotConnected () {\n    return !this.isConnected()\n  }\n\n  serialize () {\n    return {\n      id: this.id,\n      name: this.name,\n      isConnected: this.state === CONNECTED\n    }\n  }\n\n  toString () {\n    return this.name\n  }\n\n  toJSON () {\n    return {\n      id: this.id,\n      fullName: this.fullName,\n      name: this.name,\n      state: this.state,\n      lastResult: this.lastResult,\n      disconnectsCount: this.disconnectsCount,\n      noActivityTimeout: this.noActivityTimeout,\n      disconnectDelay: this.disconnectDelay\n    }\n  }\n}\n\nBrowser.factory = function (\n  id, fullName, /* capturedBrowsers */ collection, emitter, socket, timer,\n  /* config.browserDisconnectTimeout */ disconnectDelay,\n  /* config.browserNoActivityTimeout */ noActivityTimeout,\n  /* config.singleRun */ singleRun,\n  /* config.client */ clientConfig) {\n  return new Browser(id, fullName, collection, emitter, socket, timer,\n    disconnectDelay, noActivityTimeout, singleRun, clientConfig)\n}\n\nBrowser.STATE_CONNECTED = CONNECTED\nBrowser.STATE_CONFIGURING = CONFIGURING\nBrowser.STATE_EXECUTING = EXECUTING\nBrowser.STATE_EXECUTING_DISCONNECTED = EXECUTING_DISCONNECTED\nBrowser.STATE_DISCONNECTED = DISCONNECTED\n\nmodule.exports = Browser\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}